{"version":3,"sources":["../src/utils/validation.ts"],"names":["errorPrefix","validateArgCount","fnName","minCount","maxCount","argCount","argError","error","Error","argumentNumber","optional","argName","validateNamespace","namespace","validateCallback","callback","validateContextObject","context"],"mappings":";;;;;;;;QAgDMA,W,GAAAA,W;AAhDN;;;;;;;;;;;;;;;AAgBA;;;;;;;;;AAhBA;;;;;;;;;;;;;;EAyBO,IAAMC,8CAAmB,SAAnBA,gBAAmB,CAASC,MAAT,EAAiBC,QAAjB,EAA2BC,QAA3B,EAAqCC,QAArC,EAA6C;AAC3E,QAAIC,QAAJ;AACA,QAAID,WAAWF,QAAf,EAAyB;AACvBG,mBAAW,cAAcH,QAAzB;AACD,KAFD,MAEO,IAAIE,WAAWD,QAAf,EAAyB;AAC9BE,mBAAYF,aAAa,CAAd,GAAmB,MAAnB,GAA6B,kBAAkBA,QAA1D;AACD;AACD,QAAIE,QAAJ,EAAc;AACZ,YAAIC,QAAQL,SAAS,2BAAT,GAAuCG,QAAvC,IACRA,aAAa,CAAd,GAAmB,YAAnB,GAAkC,aADzB,IAEV,WAFU,GAEIC,QAFJ,GAEe,GAF3B;AAGA,cAAM,IAAIE,KAAJ,CAAUD,KAAV,CAAN;AACD;AACF,CAbM;AAeP;;;;;;;;AAQM,SAAAP,WAAA,CAAsBE,MAAtB,EAA8BO,cAA9B,EAA8CC,QAA9C,EAAsD;AAC1D,QAAIC,UAAU,EAAd;AACA,YAAQF,cAAR;AACE,aAAK,CAAL;AACEE,sBAAUD,WAAW,OAAX,GAAqB,OAA/B;AACA;AACF,aAAK,CAAL;AACEC,sBAAUD,WAAW,QAAX,GAAsB,QAAhC;AACA;AACF,aAAK,CAAL;AACEC,sBAAUD,WAAW,OAAX,GAAqB,OAA/B;AACA;AACF,aAAK,CAAL;AACEC,sBAAUD,WAAW,QAAX,GAAsB,QAAhC;AACA;AACF;AACE,kBAAM,IAAIF,KAAJ,CAAU,iEAAV,CAAN;AAdJ;AAiBA,QAAID,QAAQL,SAAS,WAArB;AAEAK,aAASI,UAAU,YAAnB;AACA,WAAOJ,KAAP;AACD;AAAA;AAED;;;;;;AAMO,IAAMK,gDAAoB,SAApBA,iBAAoB,CAASV,MAAT,EAAiBO,cAAjB,EAAiCI,SAAjC,EAA4CH,QAA5C,EAAoD;AACnF,QAAIA,YAAY,CAAEG,SAAlB,EACE;AACF,QAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC;AACA,cAAM,IAAIL,KAAJ,CAAUR,YAAYE,MAAZ,EAAoBO,cAApB,EAAoCC,QAApC,IACd,qCADI,CAAN;AAED;AACF,CARM;AAUA,IAAMI,8CAAmB,SAAnBA,gBAAmB,CAASZ,MAAT,EAAiBO,cAAjB,EAAiCM,QAAjC,EAA2CL,QAA3C,EAAmD;AACjF,QAAIA,YAAY,CAAEK,QAAlB,EACE;AACF,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EACE,MAAM,IAAIP,KAAJ,CAAUR,YAAYE,MAAZ,EAAoBO,cAApB,EAAoCC,QAApC,IAAgD,2BAA1D,CAAN;AACH,CALM;AAOA,IAAMM,wDAAwB,SAAxBA,qBAAwB,CAASd,MAAT,EAAiBO,cAAjB,EAAiCQ,OAAjC,EAA0CP,QAA1C,EAAkD;AACrF,QAAIA,YAAY,CAAEO,OAAlB,EACE;AACF,QAAI,QAAOA,OAAP,yCAAOA,OAAP,OAAmB,QAAnB,IAA+BA,YAAY,IAA/C,EACE,MAAM,IAAIT,KAAJ,CAAUR,YAAYE,MAAZ,EAAoBO,cAApB,EAAoCC,QAApC,IACd,iCADI,CAAN;AAEH,CANM","file":"validation.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param {!string} fnName The function name\n * @param {!number} minCount The minimum number of arguments to allow for the function call\n * @param {!number} maxCount The maximum number of argument to allow for the function call\n * @param {!number} argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function(fnName, minCount, maxCount, argCount) {\n  var argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = (maxCount === 0) ? 'none' : ('no more than ' + maxCount);\n  }\n  if (argError) {\n    var error = fnName + ' failed: Was called with ' + argCount +\n      ((argCount === 1) ? ' argument.' : ' arguments.') +\n      ' Expects ' + argError + '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param {!string} fnName The function name\n * @param {!number} argumentNumber The index of the argument\n * @param {boolean} optional Whether or not the argument is optional\n * @return {!string} The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName, argumentNumber, optional) {\n  var argName = '';\n  switch (argumentNumber) {\n    case 1:\n      argName = optional ? 'first' : 'First';\n      break;\n    case 2:\n      argName = optional ? 'second' : 'Second';\n      break;\n    case 3:\n      argName = optional ? 'third' : 'Third';\n      break;\n    case 4:\n      argName = optional ? 'fourth' : 'Fourth';\n      break;\n    default:\n      throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');\n  }\n\n  var error = fnName + ' failed: ';\n\n  error += argName + ' argument ';\n  return error;\n};\n\n/**\n * @param {!string} fnName\n * @param {!number} argumentNumber\n * @param {!string} namespace\n * @param {boolean} optional\n */\nexport const validateNamespace = function(fnName, argumentNumber, namespace, optional) {\n  if (optional && !(namespace))\n    return;\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(errorPrefix(fnName, argumentNumber, optional) +\n      'must be a valid firebase namespace.');\n  }\n};\n\nexport const validateCallback = function(fnName, argumentNumber, callback, optional) {\n  if (optional && !(callback))\n    return;\n  if (typeof callback !== 'function')\n    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid function.');\n};\n\nexport const validateContextObject = function(fnName, argumentNumber, context, optional) {\n  if (optional && !(context))\n    return;\n  if (typeof context !== 'object' || context === null)\n    throw new Error(errorPrefix(fnName, argumentNumber, optional) +\n      'must be a valid context object.');\n};\n"]}