{"version":3,"sources":["webpack:///firebase-storage.js","webpack:///./src/storage/implementation/error.ts","webpack:///./src/storage/implementation/string.ts","webpack:///./src/storage/implementation/taskenums.ts","webpack:///./src/storage/implementation/object.ts","webpack:///./src/storage/implementation/promise_external.ts","webpack:///./src/storage/implementation/type.ts","webpack:///./src/storage/implementation/json.ts","webpack:///./src/storage/implementation/path.ts","webpack:///./src/storage/implementation/url.ts","webpack:///./src/storage/implementation/metadata.ts","webpack:///./src/storage/implementation/args.ts","webpack:///./src/storage/implementation/fs.ts","webpack:///./src/storage/implementation/array.ts","webpack:///./src/storage/implementation/requests.ts","webpack:///./src/storage/implementation/async.ts","webpack:///./src/storage/implementation/backoff.ts","webpack:///./src/storage/implementation/request.ts","webpack:///./src/storage.ts","webpack:///./src/storage/implementation/constants.ts","webpack:///./src/storage/implementation/xhrio.ts","webpack:///./src/storage/implementation/xhrio_network.ts","webpack:///./src/storage/implementation/xhriopool.ts","webpack:///./src/storage/implementation/location.ts","webpack:///./src/storage/implementation/blob.ts","webpack:///./src/storage/implementation/requestinfo.ts","webpack:///./src/storage/implementation/observer.ts","webpack:///./src/storage/tasksnapshot.ts","webpack:///./src/storage/task.ts","webpack:///./src/storage/reference.ts","webpack:///./src/storage/implementation/failrequest.ts","webpack:///./src/storage/implementation/requestmap.ts","webpack:///./src/storage/implementation/authwrapper.ts","webpack:///./src/storage/service.ts"],"names":["webpackJsonpFirebase","22","module","__webpack_exports__","__webpack_require__","prependCode","code","unknown","FirebaseStorageError","Code","UNKNOWN","objectNotFound","path","OBJECT_NOT_FOUND","quotaExceeded","bucket","QUOTA_EXCEEDED","unauthenticated","UNAUTHENTICATED","unauthorized","UNAUTHORIZED","retryLimitExceeded","RETRY_LIMIT_EXCEEDED","error_canceled","CANCELED","invalidUrl","url","INVALID_URL","invalidDefaultBucket","INVALID_DEFAULT_BUCKET","cannotSliceBlob","CANNOT_SLICE_BLOB","serverFileWrongSize","SERVER_FILE_WRONG_SIZE","noDownloadURL","NO_DOWNLOAD_URL","invalidArgument","index","fnName","message","INVALID_ARGUMENT","invalidArgumentCount","argMin","argMax","real","countPart","plural","INVALID_ARGUMENT_COUNT","appDeleted","APP_DELETED","invalidRootOperation","name","INVALID_ROOT_OPERATION","invalidFormat","format","INVALID_FORMAT","internalError","INTERNAL_ERROR","formatValidator","stringFormat","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","dataFromString","string","StringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","i","length","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","decodeURIComponent","e","hasMinus","indexOf","hasUnder","invalidChar","hasPlus","hasSlash","replace","bytes","atob","array","parts","string_DataURLParts","base64","rest","contentType","endsWith","s","end","substring","taskStateFromInternalTaskState","state","InternalTaskState","RUNNING","PAUSING","CANCELING","TaskState","PAUSED","SUCCESS","ERROR","contains","obj","prop","Object","prototype","hasOwnProperty","call","forEach","f","key","clone","val","make","resolver","__WEBPACK_IMPORTED_MODULE_0__utils_promise__","promise_external_resolve","value","resolve","promise_external_reject","error","reject","isDef","p","isJustDef","isFunction","isObject","_typeof","isNonNullObject","isNonArrayObject","Array","isArray","isString","String","isNumber","Number","isNativeBlob","isNativeBlobDefined","Blob","jsonObjectOrNull","JSON","parse","parent","lastIndexOf","slice","child","childPath","canonicalChildPath","split","filter","component","join","lastComponent","makeNormalUrl","urlPart","domainBase","apiBaseUrl","makeDownloadUrl","downloadBase","makeUploadUrl","apiUploadBaseUrl","makeQueryString","params","encode","encodeURIComponent","queryPart","nextPart","noXform_","metadata","xformPath","fullPath","getMappings","mappingsXformPath","xformSize","size","xformTokens","tokens","map","token","alt","mappings_","mappings","Mapping","nameMapping","xform","sizeMapping","addRef","authWrapper","generateRef","loc","location_Location","makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","local","server","fromResourceString","resourceString","toResourceString","writable","stringify","metadataValidator","validate","specs","passed","minArgs","maxArgs","optional","validator","Error","and_","v1","v2","stringSpec","opt_validator","opt_optional","stringValidator","args_ArgSpec","uploadDataSpec","ArrayBuffer","metadataSpec","nonNegativeNumberSpec","looseObjectSpec","undefined","nullFunctionSpec","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob","var_args","_i","arguments","bb","append","sliceBlob","blob","start","webkitSlice","mozSlice","array_contains","elem","array_clone","arraylike","remove","splice","handlerCheck","cndn","metadataHandler","handler","xhr","text","sharedErrorHandler","location","errorHandler","err","newErr","getStatus","setServerResponseProp","serverResponseProp","objectErrorHandler","shared","getMetadata","fullServerUrl","timeout","maxOperationRetryTime","requestInfo","RequestInfo","updateMetadata","body","headers","Content-Type","deleteObject","successCodes","determineContentType_","type","metadataForUpload_","opt_metadata","multipartUpload","bucketOnlyServerUrl","X-Goog-Upload-Protocol","boundary","str","Math","random","metadataString","preBlobPart","postBlobPart","blob_FbsBlob","urlParams","maxUploadRetryTime","uploadData","checkResumeHeader_","opt_allowed","status","getResponseHeader","createResumableUpload","X-Goog-Upload-Command","X-Goog-Upload-Header-Content-Length","X-Goog-Upload-Header-Content-Type","getResumableUploadStatus","sizeString","parseInt","isNaN","ResumableUploadStatus","continueResumableUpload","chunkSize","opt_status","opt_progressCallback","uploadStatus","newCurrent","current","bytesToUpload","total","bytesLeft","min","startByte","endByte","uploadCommand","X-Goog-Upload-Offset","progressCallback","async","argsToForward","then","apply","callback","canceled","cancelState","triggerCallback","triggeredCallback","callWithDelay","millis","timeoutId","setTimeout","success","hitTimeout","waitSeconds","waitMillis","stop","wasTimeout","stopped","clearTimeout","id","addAuthHeader_","authToken","addVersionHeader_","number","firebase","SDK_VERSION","makeRequest","pool","request_NetworkRequest","method","additionalRetryCodes","factory","app","unused","opt_url","service_Service","xhriopool_XhrIoPool","registerStorage","instance","namespaceExports","TaskEvent","Storage","Reference","reference_Reference","INTERNAL","registerService","STORAGE_TYPE","ErrorCode","defaultMaxOperationRetryTime","defaultMaxUploadRetryTime","minSafeInteger","this","code_","message_","serverResponse_","name_","codeProp","codeEquals","serverResponse","enumerable","configurable","BUCKET_NOT_FOUND","PROJECT_NOT_FOUND","INVALID_CHECKSUM","INVALID_EVENT_NAME","NO_DEFAULT_BUCKET","data","opt_contentType","DataURLParts","dataURL","matches","match","middle","STATE_CHANGED","Symbol","iterator","constructor","xhrio_network_NetworkXhrIo","NetworkXhrIo","_this","sent_","xhr_","XMLHttpRequest","errorCode_","NO_ERROR","sendPromise_","addEventListener","event","ABORT","NETWORK_ERROR","send","opt_body","opt_headers","open","setRequestHeader","getErrorCode","getResponseText","responseText","abort","header","addUploadProgressListener","listener","upload","removeUploadProgressListener","removeEventListener","XhrIoPool","createXhrIo","Location","path_","makeFromBucketSpec","bucketString","bucketLocation","makeFromUrl","gsModify","charAt","httpModify","gsRegex","RegExp","gsIndices","httpRegex","httpIndices","groups","regex","indices","postModify","group","captures","exec","bucketValue","pathValue","opt_local","opt_writable","opt_xform","ArgSpec","self","FbsBlob","opt_elideCopy","blobType","data_","byteLength","set","size_","type_","realBlob","sliced","buffer","blobby","uint8Arrays","finalLength_1","merged_1","index_1","finalized","observer_Observer","Observer","nextOrObserver","opt_error","opt_complete","next","complete","observer","UploadTaskSnapshot","bytesTransferred","totalBytes","task","ref","urls","task_UploadTask","UploadTask","transferred_","needToFetchStatus_","needToFetchMetadata_","observers_","error_","uploadUrl_","request_","chunkMultiplier_","resolve_","reject_","ref_","authWrapper_","location_","blob_","metadata_","resumable_","shouldDoResumable_","state_","errorHandler_","completeTransitions_","transition_","metadataErrorHandler_","promise_","start_","makeProgressCallback_","sizeBefore","loaded","updateProgress_","createResumable_","fetchStatus_","fetchMetadata_","continueUpload_","oneShotUpload_","resolveToken_","getAuthToken","createRequest","getPromise","statusRequest","uploadRequest","newStatus","increaseMultiplier_","metadataRequest","multipartRequest","transferred","old","notifyObservers_","cancel","wasPaused","externalState","on","completed","typeValidator","_p","nextOrObserverValidator","nextValidator","observerValidator","nextOrObserverMessage","makeBinder","binder","addObserver_","removeObserver_","binderNextOrObserverValidator","binderSpecs","onFulfilled","onRejected","catch","notifyObserver_","finishPromise_","triggered","bind","snapshot","resume","pause","toString","newRef","newPath","service","put","throwIfRoot_","putString","delete","getDownloadURL","failrequest_FailRequest","FailRequest","appDelete","requestmap_RequestMap","RequestMap","map_","id_","addRequest","r","unmap","clear","authwrapper_AuthWrapper","AuthWrapper","maker","requestMaker","bucket_","deleted_","app_","options","extractBucket_","storageRefMaker_","requestMaker_","pool_","service_","maxOperationRetryTime_","maxUploadRetryTime_","requestMap_","config","getToken","response","accessToken","_error","request","deleteApp","setMaxUploadRetryTime","time","setMaxOperationRetryTime","NetworkRequest","errorCallback","pendingXhr_","backoffId_","canceled_","appDelete_","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","progressCallback_","timeout_","doTheRequest","backoffCallback","progressListener","progressEvent","lengthComputable","RequestEndStatus","hitServer","isRetryStatusCode_","wasCanceled","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","isRequestSpecificRetryCode","opt_canceled","Service","authWrapperBucket","internals_","service_ServiceInternals","test","refFromURL","ServiceInternals"],"mappings":"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","file":"firebase-storage.js","sourcesContent":["try {\n          webpackJsonpFirebase([1],{\n\n/***/ 22:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./src/storage/implementation/constants.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n/**\r\n * Domain and scheme for API calls.\r\n */\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/var domainBase = 'https://firebasestorage.googleapis.com';\n/**\r\n * Domain and scheme for object downloads.\r\n */\nvar downloadBase = 'https://firebasestorage.googleapis.com';\n/**\r\n * Base URL for non-upload calls to the API.\r\n */\nvar apiBaseUrl = '/v0';\n/**\r\n * Base URL for upload calls to the API.\r\n */\nvar apiUploadBaseUrl = '/v0';\nfunction setDomainBase(domainBase) {\n  domainBase = domainBase;\n}\nvar configOption = 'storageBucket';\n/**\r\n * 1 minute\r\n */\nvar shortMaxOperationRetryTime = 1 * 60 * 1000;\n/**\r\n * 2 minutes\r\n */\nvar defaultMaxOperationRetryTime = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n */\nvar defaultMaxUploadRetryTime = 10 * 60 * 100;\n/**\r\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\r\n * enough for us to use it directly.\r\n */\nvar minSafeInteger = -9007199254740991;\n// CONCATENATED MODULE: ./src/storage/implementation/error.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\nvar FirebaseStorageError = function () {\n    function FirebaseStorageError(code, message) {\n        this.code_ = prependCode(code);\n        this.message_ = 'Firebase Storage: ' + message;\n        this.serverResponse_ = null;\n        this.name_ = 'FirebaseError';\n    }\n    FirebaseStorageError.prototype.codeProp = function () {\n        return this.code;\n    };\n    FirebaseStorageError.prototype.codeEquals = function (code) {\n        return prependCode(code) === this.codeProp();\n    };\n    FirebaseStorageError.prototype.serverResponseProp = function () {\n        return this.serverResponse_;\n    };\n    FirebaseStorageError.prototype.setServerResponseProp = function (serverResponse) {\n        this.serverResponse_ = serverResponse;\n    };\n    Object.defineProperty(FirebaseStorageError.prototype, \"name\", {\n        get: function get() {\n            return this.name_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FirebaseStorageError.prototype, \"code\", {\n        get: function get() {\n            return this.code_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FirebaseStorageError.prototype, \"message\", {\n        get: function get() {\n            return this.message_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FirebaseStorageError.prototype, \"serverResponse\", {\n        get: function get() {\n            return this.serverResponse_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FirebaseStorageError;\n}();\n\nvar errors = {};\nvar Code = {\n    // Shared between all platforms\n    UNKNOWN: 'unknown',\n    OBJECT_NOT_FOUND: 'object-not-found',\n    BUCKET_NOT_FOUND: 'bucket-not-found',\n    PROJECT_NOT_FOUND: 'project-not-found',\n    QUOTA_EXCEEDED: 'quota-exceeded',\n    UNAUTHENTICATED: 'unauthenticated',\n    UNAUTHORIZED: 'unauthorized',\n    RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',\n    INVALID_CHECKSUM: 'invalid-checksum',\n    CANCELED: 'canceled',\n    // JS specific\n    INVALID_EVENT_NAME: 'invalid-event-name',\n    INVALID_URL: 'invalid-url',\n    INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',\n    NO_DEFAULT_BUCKET: 'no-default-bucket',\n    CANNOT_SLICE_BLOB: 'cannot-slice-blob',\n    SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',\n    NO_DOWNLOAD_URL: 'no-download-url',\n    INVALID_ARGUMENT: 'invalid-argument',\n    INVALID_ARGUMENT_COUNT: 'invalid-argument-count',\n    APP_DELETED: 'app-deleted',\n    INVALID_ROOT_OPERATION: 'invalid-root-operation',\n    INVALID_FORMAT: 'invalid-format',\n    INTERNAL_ERROR: 'internal-error'\n};\nfunction prependCode(code) {\n    return 'storage/' + code;\n}\nfunction unknown() {\n    var message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n    return new FirebaseStorageError(Code.UNKNOWN, message);\n}\nfunction objectNotFound(path) {\n    return new FirebaseStorageError(Code.OBJECT_NOT_FOUND, 'Object \\'' + path + '\\' does not exist.');\n}\nfunction bucketNotFound(bucket) {\n    return new FirebaseStorageError(Code.BUCKET_NOT_FOUND, 'Bucket \\'' + bucket + '\\' does not exist.');\n}\nfunction projectNotFound(project) {\n    return new FirebaseStorageError(Code.PROJECT_NOT_FOUND, 'Project \\'' + project + '\\' does not exist.');\n}\nfunction quotaExceeded(bucket) {\n    return new FirebaseStorageError(Code.QUOTA_EXCEEDED, 'Quota for bucket \\'' + bucket + '\\' exceeded, please view quota on ' + 'https://firebase.google.com/pricing/.');\n}\nfunction unauthenticated() {\n    var message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n    return new FirebaseStorageError(Code.UNAUTHENTICATED, message);\n}\nfunction unauthorized(path) {\n    return new FirebaseStorageError(Code.UNAUTHORIZED, 'User does not have permission to access \\'' + path + '\\'.');\n}\nfunction retryLimitExceeded() {\n    return new FirebaseStorageError(Code.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\n}\nfunction invalidChecksum(path, checksum, calculated) {\n    return new FirebaseStorageError(Code.INVALID_CHECKSUM, 'Uploaded/downloaded object \\'' + path + '\\' has checksum \\'' + checksum + '\\' which does not match \\'' + calculated + '\\'. Please retry the upload/download.');\n}\nfunction error_canceled() {\n    return new FirebaseStorageError(Code.CANCELED, 'User canceled the upload/download.');\n}\nfunction invalidEventName(name) {\n    return new FirebaseStorageError(Code.INVALID_EVENT_NAME, 'Invalid event name \\'' + name + '\\'.');\n}\nfunction invalidUrl(url) {\n    return new FirebaseStorageError(Code.INVALID_URL, 'Invalid URL \\'' + url + '\\'.');\n}\nfunction invalidDefaultBucket(bucket) {\n    return new FirebaseStorageError(Code.INVALID_DEFAULT_BUCKET, 'Invalid default bucket \\'' + bucket + '\\'.');\n}\nfunction noDefaultBucket() {\n    return new FirebaseStorageError(Code.NO_DEFAULT_BUCKET, 'No default bucket ' + 'found. Did you set the \\'' + configOption + '\\' property when initializing the app?');\n}\nfunction cannotSliceBlob() {\n    return new FirebaseStorageError(Code.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\n}\nfunction serverFileWrongSize() {\n    return new FirebaseStorageError(Code.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\n}\nfunction noDownloadURL() {\n    return new FirebaseStorageError(Code.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\n}\nfunction invalidArgument(index, fnName, message) {\n    return new FirebaseStorageError(Code.INVALID_ARGUMENT, 'Invalid argument in `' + fnName + '` at index ' + index + ': ' + message);\n}\nfunction invalidArgumentCount(argMin, argMax, fnName, real) {\n    var countPart;\n    var plural;\n    if (argMin === argMax) {\n        countPart = argMin;\n        plural = argMin === 1 ? 'argument' : 'arguments';\n    } else {\n        countPart = 'between ' + argMin + ' and ' + argMax;\n        plural = 'arguments';\n    }\n    return new FirebaseStorageError(Code.INVALID_ARGUMENT_COUNT, 'Invalid argument count in `' + fnName + '`: Expected ' + countPart + ' ' + plural + ', received ' + real + '.');\n}\nfunction appDeleted() {\n    return new FirebaseStorageError(Code.APP_DELETED, 'The Firebase app was deleted.');\n}\n/**\r\n * @param name The name of the operation that was invalid.\r\n */\nfunction invalidRootOperation(name) {\n    return new FirebaseStorageError(Code.INVALID_ROOT_OPERATION, 'The operation \\'' + name + '\\' cannot be performed on a root reference, create a non-root ' + 'reference using child, such as .child(\\'file.png\\').');\n}\n/**\r\n * @param format The format that was not valid.\r\n * @param message A message describing the format violation.\r\n */\nfunction invalidFormat(format, message) {\n    return new FirebaseStorageError(Code.INVALID_FORMAT, 'String does not match format \\'' + format + '\\': ' + message);\n}\n/**\r\n * @param message A message describing the internal error.\r\n */\nfunction internalError(message) {\n    throw new FirebaseStorageError(Code.INTERNAL_ERROR, 'Internal error: ' + message);\n}\n// CONCATENATED MODULE: ./src/storage/implementation/string.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\nvar StringFormat = {\n    RAW: 'raw',\n    BASE64: 'base64',\n    BASE64URL: 'base64url',\n    DATA_URL: 'data_url'\n};\nfunction formatValidator(stringFormat) {\n    switch (stringFormat) {\n        case StringFormat.RAW:\n        case StringFormat.BASE64:\n        case StringFormat.BASE64URL:\n        case StringFormat.DATA_URL:\n            return;\n        default:\n            throw 'Expected one of the event types: [' + StringFormat.RAW + ', ' + StringFormat.BASE64 + ', ' + StringFormat.BASE64URL + ', ' + StringFormat.DATA_URL + '].';\n    }\n}\n/**\r\n * @struct\r\n */\nvar StringData = function () {\n    function StringData(data, opt_contentType) {\n        this.data = data;\n        this.contentType = opt_contentType || null;\n    }\n    return StringData;\n}();\n\nfunction dataFromString(format, string) {\n    switch (format) {\n        case StringFormat.RAW:\n            return new StringData(utf8Bytes_(string));\n        case StringFormat.BASE64:\n        case StringFormat.BASE64URL:\n            return new StringData(base64Bytes_(format, string));\n        case StringFormat.DATA_URL:\n            return new StringData(dataURLBytes_(string), dataURLContentType_(string));\n    }\n    // assert(false);\n    throw unknown();\n}\nfunction utf8Bytes_(string) {\n    var b = [];\n    for (var i = 0; i < string.length; i++) {\n        var c = string.charCodeAt(i);\n        if (c <= 127) {\n            b.push(c);\n        } else {\n            if (c <= 2047) {\n                b.push(192 | c >> 6, 128 | c & 63);\n            } else {\n                if ((c & 64512) == 55296) {\n                    // The start of a surrogate pair.\n                    var valid = i < string.length - 1 && (string.charCodeAt(i + 1) & 64512) == 56320;\n                    if (!valid) {\n                        // The second surrogate wasn't there.\n                        b.push(239, 191, 189);\n                    } else {\n                        var hi = c;\n                        var lo = string.charCodeAt(++i);\n                        c = 65536 | (hi & 1023) << 10 | lo & 1023;\n                        b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n                    }\n                } else {\n                    if ((c & 64512) == 56320) {\n                        // Invalid low surrogate.\n                        b.push(239, 191, 189);\n                    } else {\n                        b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n                    }\n                }\n            }\n        }\n    }\n    return new Uint8Array(b);\n}\nfunction percentEncodedBytes_(string) {\n    var decoded;\n    try {\n        decoded = decodeURIComponent(string);\n    } catch (e) {\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n    }\n    return utf8Bytes_(decoded);\n}\nfunction base64Bytes_(format, string) {\n    switch (format) {\n        case StringFormat.BASE64:\n            {\n                var hasMinus = string.indexOf('-') !== -1;\n                var hasUnder = string.indexOf('_') !== -1;\n                if (hasMinus || hasUnder) {\n                    var invalidChar = hasMinus ? '-' : '_';\n                    throw invalidFormat(format, 'Invalid character \\'' + invalidChar + '\\' found: is it base64url encoded?');\n                }\n                break;\n            }\n        case StringFormat.BASE64URL:\n            {\n                var hasPlus = string.indexOf('+') !== -1;\n                var hasSlash = string.indexOf('/') !== -1;\n                if (hasPlus || hasSlash) {\n                    var invalidChar = hasPlus ? '+' : '/';\n                    throw invalidFormat(format, 'Invalid character \\'' + invalidChar + '\\' found: is it base64 encoded?');\n                }\n                string = string.replace(/-/g, '+').replace(/_/g, '/');\n                break;\n            }\n    }\n    var bytes;\n    try {\n        bytes = atob(string);\n    } catch (e) {\n        throw invalidFormat(format, 'Invalid character found');\n    }\n    var array = new Uint8Array(bytes.length);\n    for (var i = 0; i < bytes.length; i++) {\n        array[i] = bytes.charCodeAt(i);\n    }\n    return array;\n}\n/**\r\n * @struct\r\n */\nvar string_DataURLParts = function () {\n    function DataURLParts(dataURL) {\n        this.base64 = false;\n        this.contentType = null;\n        var matches = dataURL.match(/^data:([^,]+)?,/);\n        if (matches === null) {\n            throw invalidFormat(StringFormat.DATA_URL, 'Must be formatted \\'data:[<mediatype>][;base64],<data>');\n        }\n        var middle = matches[1] || null;\n        if (middle != null) {\n            this.base64 = endsWith(middle, ';base64');\n            this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n        }\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n    }\n    return DataURLParts;\n}();\nfunction dataURLBytes_(string) {\n    var parts = new string_DataURLParts(string);\n    if (parts.base64) {\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\n    } else {\n        return percentEncodedBytes_(parts.rest);\n    }\n}\nfunction dataURLContentType_(string) {\n    var parts = new string_DataURLParts(string);\n    return parts.contentType;\n}\nfunction endsWith(s, end) {\n    var longEnough = s.length >= end.length;\n    if (!longEnough) {\n        return false;\n    }\n    return s.substring(s.length - end.length) === end;\n}\n// CONCATENATED MODULE: ./src/storage/implementation/taskenums.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\nvar TaskEvent = {\n    /** Triggered whenever the task changes or progress is updated. */\n    STATE_CHANGED: 'state_changed'\n};\nvar InternalTaskState = {\n    RUNNING: 'running',\n    PAUSING: 'pausing',\n    PAUSED: 'paused',\n    SUCCESS: 'success',\n    CANCELING: 'canceling',\n    CANCELED: 'canceled',\n    ERROR: 'error'\n};\nvar TaskState = {\n    /** The task is currently transferring data. */\n    RUNNING: 'running',\n    /** The task was paused by the user. */\n    PAUSED: 'paused',\n    /** The task completed successfully. */\n    SUCCESS: 'success',\n    /** The task was canceled. */\n    CANCELED: 'canceled',\n    /** The task failed with an error. */\n    ERROR: 'error'\n};\nfunction taskStateFromInternalTaskState(state) {\n    switch (state) {\n        case InternalTaskState.RUNNING:\n        case InternalTaskState.PAUSING:\n        case InternalTaskState.CANCELING:\n            return TaskState.RUNNING;\n        case InternalTaskState.PAUSED:\n            return TaskState.PAUSED;\n        case InternalTaskState.SUCCESS:\n            return TaskState.SUCCESS;\n        case InternalTaskState.CANCELED:\n            return TaskState.CANCELED;\n        case InternalTaskState.ERROR:\n            return TaskState.ERROR;\n        default:\n            // TODO(andysoto): assert(false);\n            return TaskState.ERROR;\n    }\n}\n// CONCATENATED MODULE: ./src/storage/implementation/object.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * @fileoverview Contains methods for working with objects.\r\n */\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/function contains(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\nfunction forEach(obj, f) {\n    for (var key in obj) {\n        if (contains(obj, key)) {\n            f(key, obj[key]);\n        }\n    }\n}\nfunction clone(obj) {\n    if (obj == null) {\n        return {};\n    }\n    var c = {};\n    forEach(obj, function (key, val) {\n        c[key] = val;\n    });\n    return c;\n}\n// CONCATENATED MODULE: ./src/storage/implementation/promise_external.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_promise__ = __webpack_require__(4);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * @fileoverview Implements the promise abstraction interface for external\r\n * (public SDK) packaging, which just passes through to the firebase-app impl.\r\n */\n/**\r\n * @template T\r\n * @param {function((function(T): void),\r\n *                  (function(!Error): void))} resolver\r\n */\n\nfunction make(resolver) {\n  return new __WEBPACK_IMPORTED_MODULE_0__utils_promise__[\"b\" /* PromiseImpl */](resolver);\n}\n/**\r\n * @template T\r\n */\nfunction promise_external_resolve(value) {\n  return __WEBPACK_IMPORTED_MODULE_0__utils_promise__[\"b\" /* PromiseImpl */].resolve(value);\n}\nfunction promise_external_reject(error) {\n  return __WEBPACK_IMPORTED_MODULE_0__utils_promise__[\"b\" /* PromiseImpl */].reject(error);\n}\n// CONCATENATED MODULE: ./src/storage/implementation/type.ts\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * @return False if the object is undefined or null, true otherwise.\r\n */\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/function isDef(p) {\n    return p != null;\n}\nfunction isJustDef(p) {\n    return p !== void 0;\n}\nfunction isFunction(p) {\n    return typeof p === 'function';\n}\nfunction isObject(p) {\n    return (typeof p === 'undefined' ? 'undefined' : _typeof(p)) === 'object';\n}\nfunction isNonNullObject(p) {\n    return isObject(p) && p !== null;\n}\nfunction isNonArrayObject(p) {\n    return isObject(p) && !Array.isArray(p);\n}\nfunction isString(p) {\n    return typeof p === 'string' || p instanceof String;\n}\nfunction isNumber(p) {\n    return typeof p === 'number' || p instanceof Number;\n}\nfunction isNativeBlob(p) {\n    return isNativeBlobDefined() && p instanceof Blob;\n}\nfunction isNativeBlobDefined() {\n    return typeof Blob !== 'undefined';\n}\n// CONCATENATED MODULE: ./src/storage/implementation/xhrio.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * @enum{number}\r\n */\nvar ErrorCode;\n(function (ErrorCode) {\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n// CONCATENATED MODULE: ./src/storage/implementation/xhrio_network.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n/**\r\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\r\n * doesn't work in React Native on Android.\r\n */\nvar xhrio_network_NetworkXhrIo = function () {\n    function NetworkXhrIo() {\n        var _this = this;\n        this.sent_ = false;\n        this.xhr_ = new XMLHttpRequest();\n        this.errorCode_ = ErrorCode.NO_ERROR;\n        this.sendPromise_ = make(function (resolve, reject) {\n            _this.xhr_.addEventListener('abort', function (event) {\n                _this.errorCode_ = ErrorCode.ABORT;\n                resolve(_this);\n            });\n            _this.xhr_.addEventListener('error', function (event) {\n                _this.errorCode_ = ErrorCode.NETWORK_ERROR;\n                resolve(_this);\n            });\n            _this.xhr_.addEventListener('load', function (event) {\n                resolve(_this);\n            });\n        });\n    }\n    /**\r\n     * @override\r\n     */\n    NetworkXhrIo.prototype.send = function (url, method, opt_body, opt_headers) {\n        var _this = this;\n        if (this.sent_) {\n            throw internalError('cannot .send() more than once');\n        }\n        this.sent_ = true;\n        this.xhr_.open(method, url, true);\n        if (isDef(opt_headers)) {\n            var headers = opt_headers;\n            forEach(headers, function (key, val) {\n                _this.xhr_.setRequestHeader(key, val.toString());\n            });\n        }\n        if (isDef(opt_body)) {\n            this.xhr_.send(opt_body);\n        } else {\n            this.xhr_.send();\n        }\n        return this.sendPromise_;\n    };\n    /**\r\n     * @override\r\n     */\n    NetworkXhrIo.prototype.getErrorCode = function () {\n        if (!this.sent_) {\n            throw internalError('cannot .getErrorCode() before sending');\n        }\n        return this.errorCode_;\n    };\n    /**\r\n     * @override\r\n     */\n    NetworkXhrIo.prototype.getStatus = function () {\n        if (!this.sent_) {\n            throw internalError('cannot .getStatus() before sending');\n        }\n        try {\n            return this.xhr_.status;\n        } catch (e) {\n            return -1;\n        }\n    };\n    /**\r\n     * @override\r\n     */\n    NetworkXhrIo.prototype.getResponseText = function () {\n        if (!this.sent_) {\n            throw internalError('cannot .getResponseText() before sending');\n        }\n        return this.xhr_.responseText;\n    };\n    /**\r\n     * Aborts the request.\r\n     * @override\r\n     */\n    NetworkXhrIo.prototype.abort = function () {\n        this.xhr_.abort();\n    };\n    /**\r\n     * @override\r\n     */\n    NetworkXhrIo.prototype.getResponseHeader = function (header) {\n        return this.xhr_.getResponseHeader(header);\n    };\n    /**\r\n     * @override\r\n     */\n    NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {\n        if (isDef(this.xhr_.upload)) {\n            this.xhr_.upload.addEventListener('progress', listener);\n        }\n    };\n    /**\r\n     * @override\r\n     */\n    NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {\n        if (isDef(this.xhr_.upload)) {\n            this.xhr_.upload.removeEventListener('progress', listener);\n        }\n    };\n    return NetworkXhrIo;\n}();\n\n// CONCATENATED MODULE: ./src/storage/implementation/xhriopool.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * Factory-like class for creating XhrIo instances.\r\n */\nvar xhriopool_XhrIoPool = function () {\n    function XhrIoPool() {}\n    XhrIoPool.prototype.createXhrIo = function () {\n        return new xhrio_network_NetworkXhrIo();\n    };\n    return XhrIoPool;\n}();\n\n// CONCATENATED MODULE: ./src/storage/implementation/json.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\nfunction jsonObjectOrNull(s) {\n    var obj;\n    try {\n        obj = JSON.parse(s);\n    } catch (e) {\n        return null;\n    }\n    if (isNonArrayObject(obj)) {\n        return obj;\n    } else {\n        return null;\n    }\n}\n// CONCATENATED MODULE: ./src/storage/implementation/location.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * @fileoverview Functionality related to the parsing/composition of bucket/\r\n * object location.\r\n */\n\n/**\r\n * @struct\r\n */\nvar location_Location = function () {\n    function Location(bucket, path) {\n        this.bucket = bucket;\n        this.path_ = path;\n    }\n    Object.defineProperty(Location.prototype, \"path\", {\n        get: function get() {\n            return this.path_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Location.prototype.fullServerUrl = function () {\n        var encode = encodeURIComponent;\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n    };\n    Location.prototype.bucketOnlyServerUrl = function () {\n        var encode = encodeURIComponent;\n        return '/b/' + encode(this.bucket) + '/o';\n    };\n    Location.makeFromBucketSpec = function (bucketString) {\n        var bucketLocation;\n        try {\n            bucketLocation = Location.makeFromUrl(bucketString);\n        } catch (e) {\n            // Not valid URL, use as-is. This lets you put bare bucket names in\n            // config.\n            return new Location(bucketString, '');\n        }\n        if (bucketLocation.path === '') {\n            return bucketLocation;\n        } else {\n            throw invalidDefaultBucket(bucketString);\n        }\n    };\n    Location.makeFromUrl = function (url) {\n        var location = null;\n        var bucketDomain = '([A-Za-z0-9.\\\\-]+)';\n        function gsModify(loc) {\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\n                loc.path_ = loc.path_.slice(0, -1);\n            }\n        }\n        var gsPath = '(/(.*))?$';\n        var path = '(/([^?#]*).*)?$';\n        var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n        var gsIndices = { bucket: 1, path: 3 };\n        function httpModify(loc) {\n            loc.path_ = decodeURIComponent(loc.path);\n        }\n        var version = 'v[A-Za-z0-9_]+';\n        var httpRegex = new RegExp('^https?://firebasestorage\\\\.googleapis\\\\.com/' + version + '/b/' + bucketDomain + '/o' + path, 'i');\n        var httpIndices = { bucket: 1, path: 3 };\n        var groups = [{ regex: gsRegex, indices: gsIndices, postModify: gsModify }, { regex: httpRegex, indices: httpIndices, postModify: httpModify }];\n        for (var i = 0; i < groups.length; i++) {\n            var group = groups[i];\n            var captures = group.regex.exec(url);\n            if (captures) {\n                var bucketValue = captures[group.indices.bucket];\n                var pathValue = captures[group.indices.path];\n                if (!pathValue) {\n                    pathValue = '';\n                }\n                location = new Location(bucketValue, pathValue);\n                group.postModify(location);\n                break;\n            }\n        }\n        if (location == null) {\n            throw invalidUrl(url);\n        }\n        return location;\n    };\n    return Location;\n}();\n\n// CONCATENATED MODULE: ./src/storage/implementation/path.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n/**\r\n * @return Null if the path is already at the root.\r\n */\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/function parent(path) {\n    if (path.length == 0) {\n        return null;\n    }\n    var index = path.lastIndexOf('/');\n    if (index === -1) {\n        return '';\n    }\n    var newPath = path.slice(0, index);\n    return newPath;\n}\nfunction child(path, childPath) {\n    var canonicalChildPath = childPath.split('/').filter(function (component) {\n        return component.length > 0;\n    }).join('/');\n    if (path.length === 0) {\n        return canonicalChildPath;\n    } else {\n        return path + '/' + canonicalChildPath;\n    }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\nfunction lastComponent(path) {\n    var index = path.lastIndexOf('/', path.length - 2);\n    if (index === -1) {\n        return path;\n    } else {\n        return path.slice(index + 1);\n    }\n}\n// CONCATENATED MODULE: ./src/storage/implementation/url.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * @fileoverview Functions to create and manipulate URLs for the server API.\r\n */\n\n\nfunction makeNormalUrl(urlPart) {\n    return domainBase + apiBaseUrl + urlPart;\n}\nfunction makeDownloadUrl(urlPart) {\n    return downloadBase + apiBaseUrl + urlPart;\n}\nfunction makeUploadUrl(urlPart) {\n    return domainBase + apiUploadBaseUrl + urlPart;\n}\nfunction makeQueryString(params) {\n    var encode = encodeURIComponent;\n    var queryPart = '?';\n    forEach(params, function (key, val) {\n        var nextPart = encode(key) + '=' + encode(val);\n        queryPart = queryPart + nextPart + '&';\n    });\n    // Chop off the extra '&' or '?' on the end\n    queryPart = queryPart.slice(0, -1);\n    return queryPart;\n}\n// CONCATENATED MODULE: ./src/storage/implementation/metadata.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\nfunction noXform_(metadata, value) {\n    return value;\n}\n/**\r\n * @struct\r\n */\nvar Mapping = function () {\n    function Mapping(server, opt_local, opt_writable, opt_xform) {\n        this.server = server;\n        this.local = opt_local || server;\n        this.writable = !!opt_writable;\n        this.xform = opt_xform || noXform_;\n    }\n    return Mapping;\n}();\n\nvar mappings_ = null;\nfunction xformPath(fullPath) {\n    var valid = isString(fullPath);\n    if (!valid || fullPath.length < 2) {\n        return fullPath;\n    } else {\n        fullPath = fullPath;\n        return lastComponent(fullPath);\n    }\n}\nfunction getMappings() {\n    if (mappings_) {\n        return mappings_;\n    }\n    var mappings = [];\n    mappings.push(new Mapping('bucket'));\n    mappings.push(new Mapping('generation'));\n    mappings.push(new Mapping('metageneration'));\n    mappings.push(new Mapping('name', 'fullPath', true));\n    function mappingsXformPath(metadata, fullPath) {\n        return xformPath(fullPath);\n    }\n    var nameMapping = new Mapping('name');\n    nameMapping.xform = mappingsXformPath;\n    mappings.push(nameMapping);\n    /**\r\n     * Coerces the second param to a number, if it is defined.\r\n     */\n    function xformSize(metadata, size) {\n        if (isDef(size)) {\n            return +size;\n        } else {\n            return size;\n        }\n    }\n    var sizeMapping = new Mapping('size');\n    sizeMapping.xform = xformSize;\n    mappings.push(sizeMapping);\n    mappings.push(new Mapping('timeCreated'));\n    mappings.push(new Mapping('updated'));\n    mappings.push(new Mapping('md5Hash', null, true));\n    mappings.push(new Mapping('cacheControl', null, true));\n    mappings.push(new Mapping('contentDisposition', null, true));\n    mappings.push(new Mapping('contentEncoding', null, true));\n    mappings.push(new Mapping('contentLanguage', null, true));\n    mappings.push(new Mapping('contentType', null, true));\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\n    /**\r\n     * Transforms a comma-separated string of tokens into a list of download\r\n     * URLs.\r\n     */\n    function xformTokens(metadata, tokens) {\n        var valid = isString(tokens) && tokens.length > 0;\n        if (!valid) {\n            // This can happen if objects are uploaded through GCS and retrieved\n            // through list, so we don't want to throw an Error.\n            return [];\n        }\n        var encode = encodeURIComponent;\n        var tokensList = tokens.split(',');\n        var urls = tokensList.map(function (token) {\n            var bucket = metadata['bucket'];\n            var path = metadata['fullPath'];\n            var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n            var base = makeDownloadUrl(urlPart);\n            var queryString = makeQueryString({ 'alt': 'media', 'token': token });\n            return base + queryString;\n        });\n        return urls;\n    }\n    mappings.push(new Mapping('downloadTokens', 'downloadURLs', false, xformTokens));\n    mappings_ = mappings;\n    return mappings_;\n}\nfunction addRef(metadata, authWrapper) {\n    function generateRef() {\n        var bucket = metadata['bucket'];\n        var path = metadata['fullPath'];\n        var loc = new location_Location(bucket, path);\n        return authWrapper.makeStorageReference(loc);\n    }\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\nfunction fromResource(authWrapper, resource, mappings) {\n    var metadata = {};\n    metadata['type'] = 'file';\n    var len = mappings.length;\n    for (var i = 0; i < len; i++) {\n        var mapping = mappings[i];\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n    }\n    addRef(metadata, authWrapper);\n    return metadata;\n}\nfunction fromResourceString(authWrapper, resourceString, mappings) {\n    var obj = jsonObjectOrNull(resourceString);\n    if (obj === null) {\n        return null;\n    }\n    var resource = obj;\n    return fromResource(authWrapper, resource, mappings);\n}\nfunction toResourceString(metadata, mappings) {\n    var resource = {};\n    var len = mappings.length;\n    for (var i = 0; i < len; i++) {\n        var mapping = mappings[i];\n        if (mapping.writable) {\n            resource[mapping.server] = metadata[mapping.local];\n        }\n    }\n    return JSON.stringify(resource);\n}\nfunction metadataValidator(p) {\n    var validType = p && isObject(p);\n    if (!validType) {\n        throw 'Expected Metadata object.';\n    }\n    for (var key in p) {\n        var val = p[key];\n        if (key === 'customMetadata') {\n            if (!isObject(val)) {\n                throw 'Expected object for \\'customMetadata\\' mapping.';\n            }\n        } else {\n            if (isNonNullObject(val)) {\n                throw 'Mapping for \\'' + key + '\\' cannot be an object.';\n            }\n        }\n    }\n}\n// CONCATENATED MODULE: ./src/storage/implementation/args.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n/**\r\n * @param name Name of the function.\r\n * @param specs Argument specs.\r\n * @param passed The actual arguments passed to the function.\r\n * @throws {fbs.Error} If the arguments are invalid.\r\n */\nfunction validate(name, specs, passed) {\n    var minArgs = specs.length;\n    var maxArgs = specs.length;\n    for (var i = 0; i < specs.length; i++) {\n        if (specs[i].optional) {\n            minArgs = i;\n            break;\n        }\n    }\n    var validLength = minArgs <= passed.length && passed.length <= maxArgs;\n    if (!validLength) {\n        throw invalidArgumentCount(minArgs, maxArgs, name, passed.length);\n    }\n    for (var i = 0; i < passed.length; i++) {\n        try {\n            specs[i].validator(passed[i]);\n        } catch (e) {\n            if (e instanceof Error) {\n                throw invalidArgument(i, name, e.message);\n            } else {\n                throw invalidArgument(i, name, e);\n            }\n        }\n    }\n}\n/**\r\n * @struct\r\n */\nvar args_ArgSpec = function () {\n    function ArgSpec(validator, opt_optional) {\n        var self = this;\n        this.validator = function (p) {\n            if (self.optional && !isJustDef(p)) {\n                return;\n            }\n            validator(p);\n        };\n        this.optional = !!opt_optional;\n    }\n    return ArgSpec;\n}();\n\nfunction and_(v1, v2) {\n    return function (p) {\n        v1(p);\n        v2(p);\n    };\n}\nfunction stringSpec(opt_validator, opt_optional) {\n    function stringValidator(p) {\n        if (!isString(p)) {\n            throw 'Expected string.';\n        }\n    }\n    var validator;\n    if (opt_validator) {\n        validator = and_(stringValidator, opt_validator);\n    } else {\n        validator = stringValidator;\n    }\n    return new args_ArgSpec(validator, opt_optional);\n}\nfunction uploadDataSpec() {\n    function validator(p) {\n        var valid = p instanceof Uint8Array || p instanceof ArrayBuffer || isNativeBlobDefined() && p instanceof Blob;\n        if (!valid) {\n            throw 'Expected Blob or File.';\n        }\n    }\n    return new args_ArgSpec(validator);\n}\nfunction metadataSpec(opt_optional) {\n    return new args_ArgSpec(metadataValidator, opt_optional);\n}\nfunction nonNegativeNumberSpec() {\n    function validator(p) {\n        var valid = isNumber(p) && p >= 0;\n        if (!valid) {\n            throw 'Expected a number 0 or greater.';\n        }\n    }\n    return new args_ArgSpec(validator);\n}\nfunction looseObjectSpec(opt_validator, opt_optional) {\n    function validator(p) {\n        var isLooseObject = p === null || isDef(p) && p instanceof Object;\n        if (!isLooseObject) {\n            throw 'Expected an Object.';\n        }\n        if (opt_validator !== undefined && opt_validator !== null) {\n            opt_validator(p);\n        }\n    }\n    return new args_ArgSpec(validator, opt_optional);\n}\nfunction nullFunctionSpec(opt_optional) {\n    function validator(p) {\n        var valid = p === null || isFunction(p);\n        if (!valid) {\n            throw 'Expected a Function.';\n        }\n    }\n    return new args_ArgSpec(validator, opt_optional);\n}\n// CONCATENATED MODULE: ./src/storage/implementation/fs.ts\n\nfunction getBlobBuilder() {\n    if (typeof BlobBuilder !== 'undefined') {\n        return BlobBuilder;\n    } else if (typeof WebKitBlobBuilder !== 'undefined') {\n        return WebKitBlobBuilder;\n    } else {\n        return undefined;\n    }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param var_args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\nfunction getBlob() {\n    var var_args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        var_args[_i] = arguments[_i];\n    }\n    var BlobBuilder = getBlobBuilder();\n    if (BlobBuilder !== undefined) {\n        var bb = new BlobBuilder();\n        for (var i = 0; i < var_args.length; i++) {\n            bb.append(var_args[i]);\n        }\n        return bb.getBlob();\n    } else {\n        if (isNativeBlobDefined()) {\n            return new Blob(var_args);\n        } else {\n            throw Error('This browser doesn\\'t seem to support creating Blobs');\n        }\n    }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\nfunction sliceBlob(blob, start, end) {\n    if (blob.webkitSlice) {\n        return blob.webkitSlice(start, end);\n    } else if (blob.mozSlice) {\n        return blob.mozSlice(start, end);\n    } else if (blob.slice) {\n        return blob.slice(start, end);\n    }\n    return null;\n}\n// CONCATENATED MODULE: ./src/storage/implementation/blob.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * @file Provides a Blob-like wrapper for various binary types (including the\r\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\r\n * making uploads possible in environments without the native Blob type.\r\n */\n\n\n\n\n/**\r\n * @param opt_elideCopy If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n */\nvar blob_FbsBlob = function () {\n    function FbsBlob(data, opt_elideCopy) {\n        var size = 0;\n        var blobType = '';\n        if (isNativeBlob(data)) {\n            this.data_ = data;\n            size = data.size;\n            blobType = data.type;\n        } else if (data instanceof ArrayBuffer) {\n            if (opt_elideCopy) {\n                this.data_ = new Uint8Array(data);\n            } else {\n                this.data_ = new Uint8Array(data.byteLength);\n                this.data_.set(new Uint8Array(data));\n            }\n            size = this.data_.length;\n        } else if (data instanceof Uint8Array) {\n            if (opt_elideCopy) {\n                this.data_ = data;\n            } else {\n                this.data_ = new Uint8Array(data.length);\n                this.data_.set(data);\n            }\n            size = data.length;\n        }\n        this.size_ = size;\n        this.type_ = blobType;\n    }\n    FbsBlob.prototype.size = function () {\n        return this.size_;\n    };\n    FbsBlob.prototype.type = function () {\n        return this.type_;\n    };\n    FbsBlob.prototype.slice = function (startByte, endByte) {\n        if (isNativeBlob(this.data_)) {\n            var realBlob = this.data_;\n            var sliced = sliceBlob(realBlob, startByte, endByte);\n            if (sliced === null) {\n                return null;\n            }\n            return new FbsBlob(sliced);\n        } else {\n            var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n            return new FbsBlob(slice, true);\n        }\n    };\n    FbsBlob.getBlob = function () {\n        var var_args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            var_args[_i] = arguments[_i];\n        }\n        if (isNativeBlobDefined()) {\n            var blobby = var_args.map(function (val) {\n                if (val instanceof FbsBlob) {\n                    return val.data_;\n                } else {\n                    return val;\n                }\n            });\n            return new FbsBlob(getBlob.apply(null, blobby));\n        } else {\n            var uint8Arrays = var_args.map(function (val) {\n                if (isString(val)) {\n                    return dataFromString(StringFormat.RAW, val).data;\n                } else {\n                    // Blobs don't exist, so this has to be a Uint8Array.\n                    return val.data_;\n                }\n            });\n            var finalLength_1 = 0;\n            uint8Arrays.forEach(function (array) {\n                finalLength_1 += array.byteLength;\n            });\n            var merged_1 = new Uint8Array(finalLength_1);\n            var index_1 = 0;\n            uint8Arrays.forEach(function (array) {\n                for (var i = 0; i < array.length; i++) {\n                    merged_1[index_1++] = array[i];\n                }\n            });\n            return new FbsBlob(merged_1, true);\n        }\n    };\n    FbsBlob.prototype.uploadData = function () {\n        return this.data_;\n    };\n    return FbsBlob;\n}();\n\n// CONCATENATED MODULE: ./src/storage/implementation/array.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * Returns true if the object is contained in the array (compared with ===).\r\n * @template T\r\n */\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/function array_contains(array, elem) {\n    return array.indexOf(elem) !== -1;\n}\n/**\r\n * Returns a shallow copy of the array or array-like object (e.g. arguments).\r\n * @template T\r\n */\nfunction array_clone(arraylike) {\n    return Array.prototype.slice.call(arraylike);\n}\n/**\r\n * Removes the given element from the given array, if it is contained.\r\n * Directly modifies the passed-in array.\r\n * @template T\r\n */\nfunction remove(array, elem) {\n    var i = array.indexOf(elem);\n    if (i !== -1) {\n        array.splice(i, 1);\n    }\n}\n// CONCATENATED MODULE: ./src/storage/implementation/requestinfo.ts\nvar RequestInfo = function () {\n  function RequestInfo(url, method,\n  /**\r\n   * Returns the value with which to resolve the request's promise. Only called\r\n   * if the request is successful. Throw from this function to reject the\r\n   * returned Request's promise with the thrown error.\r\n   * Note: The XhrIo passed to this function may be reused after this callback\r\n   * returns. Do not keep a reference to it in any way.\r\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\r\n     * Called with the current number of bytes uploaded and total size (-1 if not\r\n     * computable) of the request body (i.e. used to report upload progress).\r\n     */\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n  return RequestInfo;\n}();\n\n// CONCATENATED MODULE: ./src/storage/implementation/requests.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n\n\n/**\r\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\r\n */\nfunction handlerCheck(cndn) {\n    if (!cndn) {\n        throw unknown();\n    }\n}\nfunction metadataHandler(authWrapper, mappings) {\n    function handler(xhr, text) {\n        var metadata = fromResourceString(authWrapper, text, mappings);\n        handlerCheck(metadata !== null);\n        return metadata;\n    }\n    return handler;\n}\nfunction sharedErrorHandler(location) {\n    function errorHandler(xhr, err) {\n        var newErr;\n        if (xhr.getStatus() === 401) {\n            newErr = unauthenticated();\n        } else {\n            if (xhr.getStatus() === 402) {\n                newErr = quotaExceeded(location.bucket);\n            } else {\n                if (xhr.getStatus() === 403) {\n                    newErr = unauthorized(location.path);\n                } else {\n                    newErr = err;\n                }\n            }\n        }\n        newErr.setServerResponseProp(err.serverResponseProp());\n        return newErr;\n    }\n    return errorHandler;\n}\nfunction objectErrorHandler(location) {\n    var shared = sharedErrorHandler(location);\n    function errorHandler(xhr, err) {\n        var newErr = shared(xhr, err);\n        if (xhr.getStatus() === 404) {\n            newErr = objectNotFound(location.path);\n        }\n        newErr.setServerResponseProp(err.serverResponseProp());\n        return newErr;\n    }\n    return errorHandler;\n}\nfunction getMetadata(authWrapper, location, mappings) {\n    var urlPart = location.fullServerUrl();\n    var url = makeNormalUrl(urlPart);\n    var method = 'GET';\n    var timeout = authWrapper.maxOperationRetryTime();\n    var requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nfunction updateMetadata(authWrapper, location, metadata, mappings) {\n    var urlPart = location.fullServerUrl();\n    var url = makeNormalUrl(urlPart);\n    var method = 'PATCH';\n    var body = toResourceString(metadata, mappings);\n    var headers = { 'Content-Type': 'application/json; charset=utf-8' };\n    var timeout = authWrapper.maxOperationRetryTime();\n    var requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);\n    requestInfo.headers = headers;\n    requestInfo.body = body;\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nfunction deleteObject(authWrapper, location) {\n    var urlPart = location.fullServerUrl();\n    var url = makeNormalUrl(urlPart);\n    var method = 'DELETE';\n    var timeout = authWrapper.maxOperationRetryTime();\n    function handler(xhr, text) {}\n    var requestInfo = new RequestInfo(url, method, handler, timeout);\n    requestInfo.successCodes = [200, 204];\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nfunction determineContentType_(metadata, blob) {\n    return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\nfunction metadataForUpload_(location, blob, opt_metadata) {\n    var metadata = clone(opt_metadata);\n    metadata['fullPath'] = location.path;\n    metadata['size'] = blob.size();\n    if (!metadata['contentType']) {\n        metadata['contentType'] = determineContentType_(null, blob);\n    }\n    return metadata;\n}\nfunction multipartUpload(authWrapper, location, mappings, blob, opt_metadata) {\n    var urlPart = location.bucketOnlyServerUrl();\n    var headers = { 'X-Goog-Upload-Protocol': 'multipart' };\n    function genBoundary() {\n        var str = '';\n        for (var i = 0; i < 2; i++) {\n            str = str + Math.random().toString().slice(2);\n        }\n        return str;\n    }\n    var boundary = genBoundary();\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n    var metadata = metadataForUpload_(location, blob, opt_metadata);\n    var metadataString = toResourceString(metadata, mappings);\n    var preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata['contentType'] + '\\r\\n\\r\\n';\n    var postBlobPart = '\\r\\n--' + boundary + '--';\n    var body = blob_FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n    if (body === null) {\n        throw cannotSliceBlob();\n    }\n    var urlParams = { 'name': metadata['fullPath'] };\n    var url = makeUploadUrl(urlPart);\n    var method = 'POST';\n    var timeout = authWrapper.maxUploadRetryTime();\n    var requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);\n    requestInfo.urlParams = urlParams;\n    requestInfo.headers = headers;\n    requestInfo.body = body.uploadData();\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n * @struct\r\n */\nvar ResumableUploadStatus = function () {\n    function ResumableUploadStatus(current, total, finalized, metadata) {\n        this.current = current;\n        this.total = total;\n        this.finalized = !!finalized;\n        this.metadata = metadata || null;\n    }\n    return ResumableUploadStatus;\n}();\n\nfunction checkResumeHeader_(xhr, opt_allowed) {\n    var status;\n    try {\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\n    } catch (e) {\n        handlerCheck(false);\n    }\n    var allowed = opt_allowed || ['active'];\n    handlerCheck(array_contains(allowed, status));\n    return status;\n}\nfunction createResumableUpload(authWrapper, location, mappings, blob, opt_metadata) {\n    var urlPart = location.bucketOnlyServerUrl();\n    var metadata = metadataForUpload_(location, blob, opt_metadata);\n    var urlParams = { 'name': metadata['fullPath'] };\n    var url = makeUploadUrl(urlPart);\n    var method = 'POST';\n    var headers = {\n        'X-Goog-Upload-Protocol': 'resumable',\n        'X-Goog-Upload-Command': 'start',\n        'X-Goog-Upload-Header-Content-Length': blob.size(),\n        'X-Goog-Upload-Header-Content-Type': metadata['contentType'],\n        'Content-Type': 'application/json; charset=utf-8'\n    };\n    var body = toResourceString(metadata, mappings);\n    var timeout = authWrapper.maxUploadRetryTime();\n    function handler(xhr, text) {\n        checkResumeHeader_(xhr);\n        var url;\n        try {\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\n        } catch (e) {\n            handlerCheck(false);\n        }\n        handlerCheck(isString(url));\n        return url;\n    }\n    var requestInfo = new RequestInfo(url, method, handler, timeout);\n    requestInfo.urlParams = urlParams;\n    requestInfo.headers = headers;\n    requestInfo.body = body;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\nfunction getResumableUploadStatus(authWrapper, location, url, blob) {\n    var headers = { 'X-Goog-Upload-Command': 'query' };\n    function handler(xhr, text) {\n        var status = checkResumeHeader_(xhr, ['active', 'final']);\n        var sizeString;\n        try {\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n        } catch (e) {\n            handlerCheck(false);\n        }\n        var size = parseInt(sizeString, 10);\n        handlerCheck(!isNaN(size));\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\n    }\n    var method = 'POST';\n    var timeout = authWrapper.maxUploadRetryTime();\n    var requestInfo = new RequestInfo(url, method, handler, timeout);\n    requestInfo.headers = headers;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\nvar resumableUploadChunkSize = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param opt_status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\nfunction continueResumableUpload(location, authWrapper, url, blob, chunkSize, mappings, opt_status, opt_progressCallback) {\n    // TODO(andysoto): standardize on internal asserts\n    // assert(!(opt_status && opt_status.finalized));\n    var status = new ResumableUploadStatus(0, 0);\n    if (opt_status) {\n        status.current = opt_status.current;\n        status.total = opt_status.total;\n    } else {\n        status.current = 0;\n        status.total = blob.size();\n    }\n    if (blob.size() !== status.total) {\n        throw serverFileWrongSize();\n    }\n    var bytesLeft = status.total - status.current;\n    var bytesToUpload = bytesLeft;\n    if (chunkSize > 0) {\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\n    }\n    var startByte = status.current;\n    var endByte = startByte + bytesToUpload;\n    var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n    var headers = {\n        'X-Goog-Upload-Command': uploadCommand,\n        'X-Goog-Upload-Offset': status.current\n    };\n    var body = blob.slice(startByte, endByte);\n    if (body === null) {\n        throw cannotSliceBlob();\n    }\n    function handler(xhr, text) {\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\n        // the 'x-range-md5' header comes back with status code 308 responses.\n        // We'll only be able to bail out though, because you can't re-upload a\n        // range that you previously uploaded.\n        var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n        var newCurrent = status.current + bytesToUpload;\n        var size = blob.size();\n        var metadata;\n        if (uploadStatus === 'final') {\n            metadata = metadataHandler(authWrapper, mappings)(xhr, text);\n        } else {\n            metadata = null;\n        }\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n    }\n    var method = 'POST';\n    var timeout = authWrapper.maxUploadRetryTime();\n    var requestInfo = new RequestInfo(url, method, handler, timeout);\n    requestInfo.headers = headers;\n    requestInfo.body = body.uploadData();\n    requestInfo.progressCallback = opt_progressCallback || null;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\n// CONCATENATED MODULE: ./src/storage/implementation/observer.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * @struct\r\n */\nvar observer_Observer = function () {\n    function Observer(nextOrObserver, opt_error, opt_complete) {\n        var asFunctions = isFunction(nextOrObserver) || isDef(opt_error) || isDef(opt_complete);\n        if (asFunctions) {\n            this.next = nextOrObserver;\n            this.error = opt_error || null;\n            this.complete = opt_complete || null;\n        } else {\n            var observer = nextOrObserver;\n            this.next = observer.next || null;\n            this.error = observer.error || null;\n            this.complete = observer.complete || null;\n        }\n    }\n    return Observer;\n}();\n\n// CONCATENATED MODULE: ./src/storage/tasksnapshot.ts\nvar UploadTaskSnapshot = function () {\n    function UploadTaskSnapshot(bytesTransferred, totalBytes, state, metadata, task, ref) {\n        this.bytesTransferred = bytesTransferred;\n        this.totalBytes = totalBytes;\n        this.state = state;\n        this.metadata = metadata;\n        this.task = task;\n        this.ref = ref;\n    }\n    Object.defineProperty(UploadTaskSnapshot.prototype, \"downloadURL\", {\n        get: function get() {\n            if (this.metadata !== null) {\n                var urls = this.metadata['downloadURLs'];\n                if (urls != null && urls[0] != null) {\n                    return urls[0];\n                } else {\n                    return null;\n                }\n            } else {\n                return null;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return UploadTaskSnapshot;\n}();\n\n// CONCATENATED MODULE: ./src/storage/implementation/async.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * @fileoverview Method for invoking a callback asynchronously.\r\n */\n\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\nfunction async(f) {\n    return function () {\n        var argsToForward = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            argsToForward[_i] = arguments[_i];\n        }\n        promise_external_resolve(true).then(function () {\n            f.apply(null, argsToForward);\n        });\n    };\n}\n// CONCATENATED MODULE: ./src/storage/task.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * @fileoverview Defines types for interacting with blob transfer tasks.\r\n */\n\n\n\n\n\n\n\n\n\n\n\n\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n */\nvar task_UploadTask = function () {\n    /**\r\n     * @param ref The firebaseStorage.Reference object this task came\r\n     *     from, untyped to avoid cyclic dependencies.\r\n     * @param blob The blob to upload.\r\n     */\n    function UploadTask(ref, authWrapper, location, mappings, blob, metadata) {\n        if (metadata === void 0) {\n            metadata = null;\n        }\n        var _this = this;\n        this.transferred_ = 0;\n        this.needToFetchStatus_ = false;\n        this.needToFetchMetadata_ = false;\n        this.observers_ = [];\n        this.error_ = null;\n        this.uploadUrl_ = null;\n        this.request_ = null;\n        this.chunkMultiplier_ = 1;\n        this.resolve_ = null;\n        this.reject_ = null;\n        this.ref_ = ref;\n        this.authWrapper_ = authWrapper;\n        this.location_ = location;\n        this.blob_ = blob;\n        this.metadata_ = metadata;\n        this.mappings_ = mappings;\n        this.resumable_ = this.shouldDoResumable_(this.blob_);\n        this.state_ = InternalTaskState.RUNNING;\n        this.errorHandler_ = function (error) {\n            _this.request_ = null;\n            _this.chunkMultiplier_ = 1;\n            if (error.codeEquals(Code.CANCELED)) {\n                _this.needToFetchStatus_ = true;\n                _this.completeTransitions_();\n            } else {\n                _this.error_ = error;\n                _this.transition_(InternalTaskState.ERROR);\n            }\n        };\n        this.metadataErrorHandler_ = function (error) {\n            _this.request_ = null;\n            if (error.codeEquals(Code.CANCELED)) {\n                _this.completeTransitions_();\n            } else {\n                _this.error_ = error;\n                _this.transition_(InternalTaskState.ERROR);\n            }\n        };\n        this.promise_ = make(function (resolve, reject) {\n            _this.resolve_ = resolve;\n            _this.reject_ = reject;\n            _this.start_();\n        });\n        // Prevent uncaught rejections on the internal promise from bubbling out\n        // to the top level with a dummy handler.\n        this.promise_.then(null, function () {});\n    }\n    UploadTask.prototype.makeProgressCallback_ = function () {\n        var _this = this;\n        var sizeBefore = this.transferred_;\n        return function (loaded, total) {\n            _this.updateProgress_(sizeBefore + loaded);\n        };\n    };\n    UploadTask.prototype.shouldDoResumable_ = function (blob) {\n        return blob.size() > 256 * 1024;\n    };\n    UploadTask.prototype.start_ = function () {\n        if (this.state_ !== InternalTaskState.RUNNING) {\n            // This can happen if someone pauses us in a resume callback, for example.\n            return;\n        }\n        if (this.request_ !== null) {\n            return;\n        }\n        if (this.resumable_) {\n            if (this.uploadUrl_ === null) {\n                this.createResumable_();\n            } else {\n                if (this.needToFetchStatus_) {\n                    this.fetchStatus_();\n                } else {\n                    if (this.needToFetchMetadata_) {\n                        // Happens if we miss the metadata on upload completion.\n                        this.fetchMetadata_();\n                    } else {\n                        this.continueUpload_();\n                    }\n                }\n            }\n        } else {\n            this.oneShotUpload_();\n        }\n    };\n    UploadTask.prototype.resolveToken_ = function (callback) {\n        var _this = this;\n        this.authWrapper_.getAuthToken().then(function (authToken) {\n            switch (_this.state_) {\n                case InternalTaskState.RUNNING:\n                    callback(authToken);\n                    break;\n                case InternalTaskState.CANCELING:\n                    _this.transition_(InternalTaskState.CANCELED);\n                    break;\n                case InternalTaskState.PAUSING:\n                    _this.transition_(InternalTaskState.PAUSED);\n                    break;\n                default:\n            }\n        });\n    };\n    // TODO(andysoto): assert false\n    UploadTask.prototype.createResumable_ = function () {\n        var _this = this;\n        this.resolveToken_(function (authToken) {\n            var requestInfo = createResumableUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);\n            var createRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);\n            _this.request_ = createRequest;\n            createRequest.getPromise().then(function (url) {\n                _this.request_ = null;\n                _this.uploadUrl_ = url;\n                _this.needToFetchStatus_ = false;\n                _this.completeTransitions_();\n            }, _this.errorHandler_);\n        });\n    };\n    UploadTask.prototype.fetchStatus_ = function () {\n        var _this = this;\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\n        var url = this.uploadUrl_;\n        this.resolveToken_(function (authToken) {\n            var requestInfo = getResumableUploadStatus(_this.authWrapper_, _this.location_, url, _this.blob_);\n            var statusRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);\n            _this.request_ = statusRequest;\n            statusRequest.getPromise().then(function (status) {\n                status = status;\n                _this.request_ = null;\n                _this.updateProgress_(status.current);\n                _this.needToFetchStatus_ = false;\n                if (status.finalized) {\n                    _this.needToFetchMetadata_ = true;\n                }\n                _this.completeTransitions_();\n            }, _this.errorHandler_);\n        });\n    };\n    UploadTask.prototype.continueUpload_ = function () {\n        var _this = this;\n        var chunkSize = resumableUploadChunkSize * this.chunkMultiplier_;\n        var status = new ResumableUploadStatus(this.transferred_, this.blob_.size());\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\n        var url = this.uploadUrl_;\n        this.resolveToken_(function (authToken) {\n            var requestInfo;\n            try {\n                requestInfo = continueResumableUpload(_this.location_, _this.authWrapper_, url, _this.blob_, chunkSize, _this.mappings_, status, _this.makeProgressCallback_());\n            } catch (e) {\n                _this.error_ = e;\n                _this.transition_(InternalTaskState.ERROR);\n                return;\n            }\n            var uploadRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);\n            _this.request_ = uploadRequest;\n            uploadRequest.getPromise().then(function (newStatus) {\n                _this.increaseMultiplier_();\n                _this.request_ = null;\n                _this.updateProgress_(newStatus.current);\n                if (newStatus.finalized) {\n                    _this.metadata_ = newStatus.metadata;\n                    _this.transition_(InternalTaskState.SUCCESS);\n                } else {\n                    _this.completeTransitions_();\n                }\n            }, _this.errorHandler_);\n        });\n    };\n    UploadTask.prototype.increaseMultiplier_ = function () {\n        var currentSize = resumableUploadChunkSize * this.chunkMultiplier_;\n        // Max chunk size is 32M.\n        if (currentSize < 32 * 1024 * 1024) {\n            this.chunkMultiplier_ *= 2;\n        }\n    };\n    UploadTask.prototype.fetchMetadata_ = function () {\n        var _this = this;\n        this.resolveToken_(function (authToken) {\n            var requestInfo = getMetadata(_this.authWrapper_, _this.location_, _this.mappings_);\n            var metadataRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);\n            _this.request_ = metadataRequest;\n            metadataRequest.getPromise().then(function (metadata) {\n                _this.request_ = null;\n                _this.metadata_ = metadata;\n                _this.transition_(InternalTaskState.SUCCESS);\n            }, _this.metadataErrorHandler_);\n        });\n    };\n    UploadTask.prototype.oneShotUpload_ = function () {\n        var _this = this;\n        this.resolveToken_(function (authToken) {\n            var requestInfo = multipartUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);\n            var multipartRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);\n            _this.request_ = multipartRequest;\n            multipartRequest.getPromise().then(function (metadata) {\n                _this.request_ = null;\n                _this.metadata_ = metadata;\n                _this.updateProgress_(_this.blob_.size());\n                _this.transition_(InternalTaskState.SUCCESS);\n            }, _this.errorHandler_);\n        });\n    };\n    UploadTask.prototype.updateProgress_ = function (transferred) {\n        var old = this.transferred_;\n        this.transferred_ = transferred;\n        // A progress update can make the \"transferred\" value smaller (e.g. a\n        // partial upload not completed by server, after which the \"transferred\"\n        // value may reset to the value at the beginning of the request).\n        if (this.transferred_ !== old) {\n            this.notifyObservers_();\n        }\n    };\n    UploadTask.prototype.transition_ = function (state) {\n        if (this.state_ === state) {\n            return;\n        }\n        switch (state) {\n            case InternalTaskState.CANCELING:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING ||\n                //        this.state_ === InternalTaskState.PAUSING);\n                this.state_ = state;\n                if (this.request_ !== null) {\n                    this.request_.cancel();\n                }\n                break;\n            case InternalTaskState.PAUSING:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING);\n                this.state_ = state;\n                if (this.request_ !== null) {\n                    this.request_.cancel();\n                }\n                break;\n            case InternalTaskState.RUNNING:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.PAUSED ||\n                //        this.state_ === InternalTaskState.PAUSING);\n                var wasPaused = this.state_ === InternalTaskState.PAUSED;\n                this.state_ = state;\n                if (wasPaused) {\n                    this.notifyObservers_();\n                    this.start_();\n                }\n                break;\n            case InternalTaskState.PAUSED:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.PAUSING);\n                this.state_ = state;\n                this.notifyObservers_();\n                break;\n            case InternalTaskState.CANCELED:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.PAUSED ||\n                //        this.state_ === InternalTaskState.CANCELING);\n                this.error_ = error_canceled();\n                this.state_ = state;\n                this.notifyObservers_();\n                break;\n            case InternalTaskState.ERROR:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING ||\n                //        this.state_ === InternalTaskState.PAUSING ||\n                //        this.state_ === InternalTaskState.CANCELING);\n                this.state_ = state;\n                this.notifyObservers_();\n                break;\n            case InternalTaskState.SUCCESS:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING ||\n                //        this.state_ === InternalTaskState.PAUSING ||\n                //        this.state_ === InternalTaskState.CANCELING);\n                this.state_ = state;\n                this.notifyObservers_();\n                break;\n        }\n    };\n    UploadTask.prototype.completeTransitions_ = function () {\n        switch (this.state_) {\n            case InternalTaskState.PAUSING:\n                this.transition_(InternalTaskState.PAUSED);\n                break;\n            case InternalTaskState.CANCELING:\n                this.transition_(InternalTaskState.CANCELED);\n                break;\n            case InternalTaskState.RUNNING:\n                this.start_();\n                break;\n            default:\n                // TODO(andysoto): assert(false);\n                break;\n        }\n    };\n    Object.defineProperty(UploadTask.prototype, \"snapshot\", {\n        get: function get() {\n            var externalState = taskStateFromInternalTaskState(this.state_);\n            return new UploadTaskSnapshot(this.transferred_, this.blob_.size(), externalState, this.metadata_, this, this.ref_);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type The type of event to listen for.\r\n     */\n    UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {\n        if (nextOrObserver === void 0) {\n            nextOrObserver = undefined;\n        }\n        if (error === void 0) {\n            error = undefined;\n        }\n        if (completed === void 0) {\n            completed = undefined;\n        }\n        function typeValidator(_p) {\n            if (type !== TaskEvent.STATE_CHANGED) {\n                throw \"Expected one of the event types: [\" + TaskEvent.STATE_CHANGED + \"].\";\n            }\n        }\n        var nextOrObserverMessage = 'Expected a function or an Object with one of ' + '`next`, `error`, `complete` properties.';\n        var nextValidator = nullFunctionSpec(true).validator;\n        var observerValidator = looseObjectSpec(null, true).validator;\n        function nextOrObserverValidator(p) {\n            try {\n                nextValidator(p);\n                return;\n            } catch (e) {}\n            try {\n                observerValidator(p);\n                var anyDefined = isJustDef(p['next']) || isJustDef(p['error']) || isJustDef(p['complete']);\n                if (!anyDefined) {\n                    throw '';\n                }\n                return;\n            } catch (e) {\n                throw nextOrObserverMessage;\n            }\n        }\n        var specs = [stringSpec(typeValidator), looseObjectSpec(nextOrObserverValidator, true), nullFunctionSpec(true), nullFunctionSpec(true)];\n        validate('on', specs, arguments);\n        var self = this;\n        function makeBinder(specs) {\n            function binder(nextOrObserver, error, opt_complete) {\n                if (specs !== null) {\n                    validate('on', specs, arguments);\n                }\n                var observer = new observer_Observer(nextOrObserver, error, completed);\n                self.addObserver_(observer);\n                return function () {\n                    self.removeObserver_(observer);\n                };\n            }\n            return binder;\n        }\n        function binderNextOrObserverValidator(p) {\n            if (p === null) {\n                throw nextOrObserverMessage;\n            }\n            nextOrObserverValidator(p);\n        }\n        var binderSpecs = [looseObjectSpec(binderNextOrObserverValidator), nullFunctionSpec(true), nullFunctionSpec(true)];\n        var typeOnly = !(isJustDef(nextOrObserver) || isJustDef(error) || isJustDef(completed));\n        if (typeOnly) {\n            return makeBinder(binderSpecs);\n        } else {\n            return makeBinder(null)(nextOrObserver, error, completed);\n        }\n    };\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     *     The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected The rejection callback.\r\n     */\n    UploadTask.prototype.then = function (onFulfilled, onRejected) {\n        return this.promise_.then(onFulfilled, onRejected);\n    };\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\n    UploadTask.prototype.catch = function (onRejected) {\n        return this.then(null, onRejected);\n    };\n    /**\r\n     * Adds the given observer.\r\n     */\n    UploadTask.prototype.addObserver_ = function (observer) {\n        this.observers_.push(observer);\n        this.notifyObserver_(observer);\n    };\n    /**\r\n     * Removes the given observer.\r\n     */\n    UploadTask.prototype.removeObserver_ = function (observer) {\n        remove(this.observers_, observer);\n    };\n    UploadTask.prototype.notifyObservers_ = function () {\n        var _this = this;\n        this.finishPromise_();\n        var observers = array_clone(this.observers_);\n        observers.forEach(function (observer) {\n            _this.notifyObserver_(observer);\n        });\n    };\n    UploadTask.prototype.finishPromise_ = function () {\n        if (this.resolve_ !== null) {\n            var triggered = true;\n            switch (taskStateFromInternalTaskState(this.state_)) {\n                case TaskState.SUCCESS:\n                    async(this.resolve_.bind(null, this.snapshot))();\n                    break;\n                case TaskState.CANCELED:\n                case TaskState.ERROR:\n                    var toCall = this.reject_;\n                    async(toCall.bind(null, this.error_))();\n                    break;\n                default:\n                    triggered = false;\n                    break;\n            }\n            if (triggered) {\n                this.resolve_ = null;\n                this.reject_ = null;\n            }\n        }\n    };\n    UploadTask.prototype.notifyObserver_ = function (observer) {\n        var externalState = taskStateFromInternalTaskState(this.state_);\n        switch (externalState) {\n            case TaskState.RUNNING:\n            case TaskState.PAUSED:\n                if (observer.next !== null) {\n                    async(observer.next.bind(observer, this.snapshot))();\n                }\n                break;\n            case TaskState.SUCCESS:\n                if (observer.complete !== null) {\n                    async(observer.complete.bind(observer))();\n                }\n                break;\n            case TaskState.CANCELED:\n            case TaskState.ERROR:\n                if (observer.error !== null) {\n                    async(observer.error.bind(observer, this.error_))();\n                }\n                break;\n            default:\n                // TODO(andysoto): assert(false);\n                if (observer.error !== null) {\n                    async(observer.error.bind(observer, this.error_))();\n                }\n        }\n    };\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @return True if the operation took effect, false if ignored.\r\n     */\n    UploadTask.prototype.resume = function () {\n        validate('resume', [], arguments);\n        var valid = this.state_ === InternalTaskState.PAUSED || this.state_ === InternalTaskState.PAUSING;\n        if (valid) {\n            this.transition_(InternalTaskState.RUNNING);\n        }\n        return valid;\n    };\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @return True if the operation took effect, false if ignored.\r\n     */\n    UploadTask.prototype.pause = function () {\n        validate('pause', [], arguments);\n        var valid = this.state_ === InternalTaskState.RUNNING;\n        if (valid) {\n            this.transition_(InternalTaskState.PAUSING);\n        }\n        return valid;\n    };\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @return True if the operation took effect, false if ignored.\r\n     */\n    UploadTask.prototype.cancel = function () {\n        validate('cancel', [], arguments);\n        var valid = this.state_ === InternalTaskState.RUNNING || this.state_ === InternalTaskState.PAUSING;\n        if (valid) {\n            this.transition_(InternalTaskState.CANCELING);\n        }\n        return valid;\n    };\n    return UploadTask;\n}();\n\n// CONCATENATED MODULE: ./src/storage/reference.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * @fileoverview Defines the Firebase Storage Reference class.\r\n */\n\n\n\n\n\n\n\n\n\n\n\n\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @param location An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\nvar reference_Reference = function () {\n    function Reference(authWrapper, location) {\n        this.authWrapper = authWrapper;\n        if (location instanceof location_Location) {\n            this.location = location;\n        } else {\n            this.location = location_Location.makeFromUrl(location);\n        }\n    }\n    /**\r\n     * @return The URL for the bucket and path this object references,\r\n     *     in the form gs://<bucket>/<object-path>\r\n     * @override\r\n     */\n    Reference.prototype.toString = function () {\n        validate('toString', [], arguments);\n        return 'gs://' + this.location.bucket + '/' + this.location.path;\n    };\n    Reference.prototype.newRef = function (authWrapper, location) {\n        return new Reference(authWrapper, location);\n    };\n    Reference.prototype.mappings = function () {\n        return getMappings();\n    };\n    /**\r\n     * @return A reference to the object obtained by\r\n     *     appending childPath, removing any duplicate, beginning, or trailing\r\n     *     slashes.\r\n     */\n    Reference.prototype.child = function (childPath) {\n        validate('child', [stringSpec()], arguments);\n        var newPath = child(this.location.path, childPath);\n        var location = new location_Location(this.location.bucket, newPath);\n        return this.newRef(this.authWrapper, location);\n    };\n    Object.defineProperty(Reference.prototype, \"parent\", {\n        /**\r\n         * @return A reference to the parent of the\r\n         *     current object, or null if the current object is the root.\r\n         */\n        get: function get() {\n            var newPath = parent(this.location.path);\n            if (newPath === null) {\n                return null;\n            }\n            var location = new location_Location(this.location.bucket, newPath);\n            return this.newRef(this.authWrapper, location);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"root\", {\n        /**\r\n         * @return An reference to the root of this\r\n         *     object's bucket.\r\n         */\n        get: function get() {\n            var location = new location_Location(this.location.bucket, '');\n            return this.newRef(this.authWrapper, location);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"bucket\", {\n        get: function get() {\n            return this.location.bucket;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"fullPath\", {\n        get: function get() {\n            return this.location.path;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"name\", {\n        get: function get() {\n            return lastComponent(this.location.path);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"storage\", {\n        get: function get() {\n            return this.authWrapper.service();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\r\n     * Uploads a blob to this object's location.\r\n     * @param data The blob to upload.\r\n     * @return An UploadTask that lets you control and\r\n     *     observe the upload.\r\n     */\n    Reference.prototype.put = function (data, metadata) {\n        if (metadata === void 0) {\n            metadata = null;\n        }\n        validate('put', [uploadDataSpec(), metadataSpec(true)], arguments);\n        this.throwIfRoot_('put');\n        return new task_UploadTask(this, this.authWrapper, this.location, this.mappings(), new blob_FbsBlob(data), metadata);\n    };\n    /**\r\n     * Uploads a string to this object's location.\r\n     * @param string The string to upload.\r\n     * @param opt_format The format of the string to upload.\r\n     * @return An UploadTask that lets you control and\r\n     *     observe the upload.\r\n     */\n    Reference.prototype.putString = function (string, format, opt_metadata) {\n        if (format === void 0) {\n            format = StringFormat.RAW;\n        }\n        validate('putString', [stringSpec(), stringSpec(formatValidator, true), metadataSpec(true)], arguments);\n        this.throwIfRoot_('putString');\n        var data = dataFromString(format, string);\n        var metadata = clone(opt_metadata);\n        if (!isDef(metadata['contentType']) && isDef(data.contentType)) {\n            metadata['contentType'] = data.contentType;\n        }\n        return new task_UploadTask(this, this.authWrapper, this.location, this.mappings(), new blob_FbsBlob(data.data, true), metadata);\n    };\n    /**\r\n     * Deletes the object at this location.\r\n     * @return A promise that resolves if the deletion succeeds.\r\n     */\n    Reference.prototype.delete = function () {\n        validate('delete', [], arguments);\n        this.throwIfRoot_('delete');\n        var self = this;\n        return this.authWrapper.getAuthToken().then(function (authToken) {\n            var requestInfo = deleteObject(self.authWrapper, self.location);\n            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n        });\n    };\n    /**\r\n     *     A promise that resolves with the metadata for this object. If this\r\n     *     object doesn't exist or metadata cannot be retreived, the promise is\r\n     *     rejected.\r\n     */\n    Reference.prototype.getMetadata = function () {\n        validate('getMetadata', [], arguments);\n        this.throwIfRoot_('getMetadata');\n        var self = this;\n        return this.authWrapper.getAuthToken().then(function (authToken) {\n            var requestInfo = getMetadata(self.authWrapper, self.location, self.mappings());\n            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n        });\n    };\n    /**\r\n     * Updates the metadata for this object.\r\n     * @param metadata The new metadata for the object.\r\n     *     Only values that have been explicitly set will be changed. Explicitly\r\n     *     setting a value to null will remove the metadata.\r\n     * @return A promise that resolves\r\n     *     with the new metadata for this object.\r\n     *     @see firebaseStorage.Reference.prototype.getMetadata\r\n     */\n    Reference.prototype.updateMetadata = function (metadata) {\n        validate('updateMetadata', [metadataSpec()], arguments);\n        this.throwIfRoot_('updateMetadata');\n        var self = this;\n        return this.authWrapper.getAuthToken().then(function (authToken) {\n            var requestInfo = updateMetadata(self.authWrapper, self.location, metadata, self.mappings());\n            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n        });\n    };\n    /**\r\n     * @return A promise that resolves with the download\r\n     *     URL for this object.\r\n     */\n    Reference.prototype.getDownloadURL = function () {\n        validate('getDownloadURL', [], arguments);\n        this.throwIfRoot_('getDownloadURL');\n        return this.getMetadata().then(function (metadata) {\n            var url = metadata['downloadURLs'][0];\n            if (isDef(url)) {\n                return url;\n            } else {\n                throw noDownloadURL();\n            }\n        });\n    };\n    Reference.prototype.throwIfRoot_ = function (name) {\n        if (this.location.path === '') {\n            throw invalidRootOperation(name);\n        }\n    };\n    return Reference;\n}();\n\n// CONCATENATED MODULE: ./src/storage/implementation/failrequest.ts\n\n/**\r\n * A request whose promise always fails.\r\n * @struct\r\n * @template T\r\n */\nvar failrequest_FailRequest = function () {\n    function FailRequest(error) {\n        this.promise_ = promise_external_reject(error);\n    }\n    /** @inheritDoc */\n    FailRequest.prototype.getPromise = function () {\n        return this.promise_;\n    };\n    /** @inheritDoc */\n    FailRequest.prototype.cancel = function (appDelete) {\n        if (appDelete === void 0) {\n            appDelete = false;\n        }\n    };\n    return FailRequest;\n}();\n\n// CONCATENATED MODULE: ./src/storage/implementation/requestmap.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n/**\r\n * @struct\r\n */\nvar requestmap_RequestMap = function () {\n    function RequestMap() {\n        this.map_ = {};\n        this.id_ = minSafeInteger;\n    }\n    /**\r\n     * Registers the given request with this map.\r\n     * The request is unregistered when it completes.\r\n     * @param r The request to register.\r\n     */\n    RequestMap.prototype.addRequest = function (r) {\n        var id = this.id_;\n        this.id_++;\n        this.map_[id] = r;\n        var self = this;\n        function unmap() {\n            delete self.map_[id];\n        }\n        r.getPromise().then(unmap, unmap);\n    };\n    /**\r\n     * Cancels all registered requests.\r\n     */\n    RequestMap.prototype.clear = function () {\n        forEach(this.map_, function (key, val) {\n            if (val) {\n                val.cancel(true);\n            }\n        });\n        this.map_ = {};\n    };\n    return RequestMap;\n}();\n\n// CONCATENATED MODULE: ./src/storage/implementation/authwrapper.ts\n\n\n\n\n\n\n\n/**\r\n * @param app If null, getAuthToken always resolves with null.\r\n * @param service The storage service associated with this auth wrapper.\r\n *     Untyped to avoid circular type dependencies.\r\n * @struct\r\n */\nvar authwrapper_AuthWrapper = function () {\n    function AuthWrapper(app, maker, requestMaker, service, pool) {\n        this.bucket_ = null;\n        this.deleted_ = false;\n        this.app_ = app;\n        if (this.app_ !== null) {\n            var options = this.app_.options;\n            if (isDef(options)) {\n                this.bucket_ = AuthWrapper.extractBucket_(options);\n            }\n        }\n        this.storageRefMaker_ = maker;\n        this.requestMaker_ = requestMaker;\n        this.pool_ = pool;\n        this.service_ = service;\n        this.maxOperationRetryTime_ = defaultMaxOperationRetryTime;\n        this.maxUploadRetryTime_ = defaultMaxUploadRetryTime;\n        this.requestMap_ = new requestmap_RequestMap();\n    }\n    AuthWrapper.extractBucket_ = function (config) {\n        var bucketString = config[configOption] || null;\n        if (bucketString == null) {\n            return null;\n        }\n        var loc = location_Location.makeFromBucketSpec(bucketString);\n        return loc.bucket;\n    };\n    AuthWrapper.prototype.getAuthToken = function () {\n        // TODO(andysoto): remove ifDef checks after firebase-app implements stubs\n        // (b/28673818).\n        if (this.app_ !== null && isDef(this.app_.INTERNAL) && isDef(this.app_.INTERNAL.getToken)) {\n            return this.app_.INTERNAL.getToken().then(function (response) {\n                if (response !== null) {\n                    return response.accessToken;\n                } else {\n                    return null;\n                }\n            }, function (_error) {\n                return null;\n            });\n        } else {\n            return promise_external_resolve(null);\n        }\n    };\n    AuthWrapper.prototype.bucket = function () {\n        if (this.deleted_) {\n            throw appDeleted();\n        } else {\n            return this.bucket_;\n        }\n    };\n    /**\r\n     * The service associated with this auth wrapper. Untyped to avoid circular\r\n     * type dependencies.\r\n     */\n    AuthWrapper.prototype.service = function () {\n        return this.service_;\n    };\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this AuthWrapper\r\n     * at the given Location.\r\n     * @param loc The Location.\r\n     * @return Actually a firebaseStorage.Reference, typing not allowed\r\n     *     because of circular dependency problems.\r\n     */\n    AuthWrapper.prototype.makeStorageReference = function (loc) {\n        return this.storageRefMaker_(this, loc);\n    };\n    AuthWrapper.prototype.makeRequest = function (requestInfo, authToken) {\n        if (!this.deleted_) {\n            var request = this.requestMaker_(requestInfo, authToken, this.pool_);\n            this.requestMap_.addRequest(request);\n            return request;\n        } else {\n            return new failrequest_FailRequest(appDeleted());\n        }\n    };\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\n    AuthWrapper.prototype.deleteApp = function () {\n        this.deleted_ = true;\n        this.app_ = null;\n        this.requestMap_.clear();\n    };\n    AuthWrapper.prototype.maxUploadRetryTime = function () {\n        return this.maxUploadRetryTime_;\n    };\n    AuthWrapper.prototype.setMaxUploadRetryTime = function (time) {\n        this.maxUploadRetryTime_ = time;\n    };\n    AuthWrapper.prototype.maxOperationRetryTime = function () {\n        return this.maxOperationRetryTime_;\n    };\n    AuthWrapper.prototype.setMaxOperationRetryTime = function (time) {\n        this.maxOperationRetryTime_ = time;\n    };\n    return AuthWrapper;\n}();\n\n// CONCATENATED MODULE: ./src/storage/implementation/backoff.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\nfunction start(f, callback, timeout) {\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\n    // type instead of a bunch of functions with state shared in the closure)\n    var waitSeconds = 1;\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n    var timeoutId = null;\n    var hitTimeout = false;\n    var cancelState = 0;\n    function canceled() {\n        return cancelState === 2;\n    }\n    var triggeredCallback = false;\n    function triggerCallback() {\n        if (!triggeredCallback) {\n            triggeredCallback = true;\n            callback.apply(null, arguments);\n        }\n    }\n    function callWithDelay(millis) {\n        timeoutId = setTimeout(function () {\n            timeoutId = null;\n            f(handler, canceled());\n        }, millis);\n    }\n    function handler(success) {\n        var var_args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            var_args[_i - 1] = arguments[_i];\n        }\n        if (triggeredCallback) {\n            return;\n        }\n        if (success) {\n            triggerCallback.apply(null, arguments);\n            return;\n        }\n        var mustStop = canceled() || hitTimeout;\n        if (mustStop) {\n            triggerCallback.apply(null, arguments);\n            return;\n        }\n        if (waitSeconds < 64) {\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n            waitSeconds *= 2;\n        }\n        var waitMillis;\n        if (cancelState === 1) {\n            cancelState = 2;\n            waitMillis = 0;\n        } else {\n            waitMillis = (waitSeconds + Math.random()) * 1000;\n        }\n        callWithDelay(waitMillis);\n    }\n    var stopped = false;\n    function stop(wasTimeout) {\n        if (stopped) {\n            return;\n        }\n        stopped = true;\n        if (triggeredCallback) {\n            return;\n        }\n        if (timeoutId !== null) {\n            if (!wasTimeout) {\n                cancelState = 2;\n            }\n            clearTimeout(timeoutId);\n            callWithDelay(0);\n        } else {\n            if (!wasTimeout) {\n                cancelState = 1;\n            }\n        }\n    }\n    callWithDelay(0);\n    setTimeout(function () {\n        hitTimeout = true;\n        stop(true);\n    }, timeout);\n    return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\nfunction stop(id) {\n    id(false);\n}\n// CONCATENATED MODULE: ./src/storage/implementation/request.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * @fileoverview Defines methods used to actually send HTTP requests from\r\n * abstract representations.\r\n */\n\n\n\n\n\n\n\n\n/**\r\n * @struct\r\n * @template T\r\n */\nvar request_NetworkRequest = function () {\n    function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {\n        this.pendingXhr_ = null;\n        this.backoffId_ = null;\n        this.resolve_ = null;\n        this.reject_ = null;\n        this.canceled_ = false;\n        this.appDelete_ = false;\n        this.url_ = url;\n        this.method_ = method;\n        this.headers_ = headers;\n        this.body_ = body;\n        this.successCodes_ = successCodes.slice();\n        this.additionalRetryCodes_ = additionalRetryCodes.slice();\n        this.callback_ = callback;\n        this.errorCallback_ = errorCallback;\n        this.progressCallback_ = progressCallback;\n        this.timeout_ = timeout;\n        this.pool_ = pool;\n        var self = this;\n        this.promise_ = make(function (resolve, reject) {\n            self.resolve_ = resolve;\n            self.reject_ = reject;\n            self.start_();\n        });\n    }\n    /**\r\n     * Actually starts the retry loop.\r\n     */\n    NetworkRequest.prototype.start_ = function () {\n        var self = this;\n        function doTheRequest(backoffCallback, canceled) {\n            if (canceled) {\n                backoffCallback(false, new RequestEndStatus(false, null, true));\n                return;\n            }\n            var xhr = self.pool_.createXhrIo();\n            self.pendingXhr_ = xhr;\n            function progressListener(progressEvent) {\n                var loaded = progressEvent.loaded;\n                var total = progressEvent.lengthComputable ? progressEvent.total : -1;\n                if (self.progressCallback_ !== null) {\n                    self.progressCallback_(loaded, total);\n                }\n            }\n            if (self.progressCallback_ !== null) {\n                xhr.addUploadProgressListener(progressListener);\n            }\n            xhr.send(self.url_, self.method_, self.body_, self.headers_).then(function (xhr) {\n                if (self.progressCallback_ !== null) {\n                    xhr.removeUploadProgressListener(progressListener);\n                }\n                self.pendingXhr_ = null;\n                xhr = xhr;\n                var hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;\n                var status = xhr.getStatus();\n                if (!hitServer || self.isRetryStatusCode_(status)) {\n                    var wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n                    return;\n                }\n                var successCode = array_contains(self.successCodes_, status);\n                backoffCallback(true, new RequestEndStatus(successCode, xhr));\n            });\n        }\n        /**\r\n         * @param requestWentThrough True if the request eventually went\r\n         *     through, false if it hit the retry limit or was canceled.\r\n         */\n        function backoffDone(requestWentThrough, status) {\n            var resolve = self.resolve_;\n            var reject = self.reject_;\n            var xhr = status.xhr;\n            if (status.wasSuccessCode) {\n                try {\n                    var result = self.callback_(xhr, xhr.getResponseText());\n                    if (isJustDef(result)) {\n                        resolve(result);\n                    } else {\n                        resolve();\n                    }\n                } catch (e) {\n                    reject(e);\n                }\n            } else {\n                if (xhr !== null) {\n                    var err = unknown();\n                    err.setServerResponseProp(xhr.getResponseText());\n                    if (self.errorCallback_) {\n                        reject(self.errorCallback_(xhr, err));\n                    } else {\n                        reject(err);\n                    }\n                } else {\n                    if (status.canceled) {\n                        var err = self.appDelete_ ? appDeleted() : error_canceled();\n                        reject(err);\n                    } else {\n                        var err = retryLimitExceeded();\n                        reject(err);\n                    }\n                }\n            }\n        }\n        if (this.canceled_) {\n            backoffDone(false, new RequestEndStatus(false, null, true));\n        } else {\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n        }\n    };\n    /** @inheritDoc */\n    NetworkRequest.prototype.getPromise = function () {\n        return this.promise_;\n    };\n    /** @inheritDoc */\n    NetworkRequest.prototype.cancel = function (appDelete) {\n        this.canceled_ = true;\n        this.appDelete_ = appDelete || false;\n        if (this.backoffId_ !== null) {\n            stop(this.backoffId_);\n        }\n        if (this.pendingXhr_ !== null) {\n            this.pendingXhr_.abort();\n        }\n    };\n    NetworkRequest.prototype.isRetryStatusCode_ = function (status) {\n        // The codes for which to retry came from this page:\n        // https://cloud.google.com/storage/docs/exponential-backoff\n        var isFiveHundredCode = status >= 500 && status < 600;\n        var extraRetryCodes = [\n        // Request Timeout: web server didn't receive full request in time.\n        408,\n        // Too Many Requests: you're getting rate-limited, basically.\n        429];\n        var isExtraRetryCode = array_contains(extraRetryCodes, status);\n        var isRequestSpecificRetryCode = array_contains(this.additionalRetryCodes_, status);\n        return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n    };\n    return NetworkRequest;\n}();\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled Defaults to false.\r\n * @struct\r\n */\nvar RequestEndStatus = function () {\n    function RequestEndStatus(wasSuccessCode, xhr, opt_canceled) {\n        this.wasSuccessCode = wasSuccessCode;\n        this.xhr = xhr;\n        this.canceled = !!opt_canceled;\n    }\n    return RequestEndStatus;\n}();\n\nfunction addAuthHeader_(headers, authToken) {\n    if (authToken !== null && authToken.length > 0) {\n        headers['Authorization'] = 'Firebase ' + authToken;\n    }\n}\nfunction addVersionHeader_(headers) {\n    var number = typeof firebase !== 'undefined' ? firebase.SDK_VERSION : 'AppManager';\n    headers['X-Firebase-Storage-Version'] = 'webjs/' + number;\n}\n/**\r\n * @template T\r\n */\nfunction makeRequest(requestInfo, authToken, pool) {\n    var queryPart = makeQueryString(requestInfo.urlParams);\n    var url = requestInfo.url + queryPart;\n    var headers = clone(requestInfo.headers);\n    addAuthHeader_(headers, authToken);\n    addVersionHeader_(headers);\n    return new request_NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);\n}\n// CONCATENATED MODULE: ./src/storage/service.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n *\r\n * @struct\r\n */\nvar service_Service = function () {\n    function Service(app, pool, url) {\n        this.bucket_ = null;\n        function maker(authWrapper, loc) {\n            return new reference_Reference(authWrapper, loc);\n        }\n        this.authWrapper_ = new authwrapper_AuthWrapper(app, maker, makeRequest, this, pool);\n        this.app_ = app;\n        if (url != null) {\n            this.bucket_ = location_Location.makeFromBucketSpec(url);\n        } else {\n            var authWrapperBucket = this.authWrapper_.bucket();\n            if (authWrapperBucket != null) {\n                this.bucket_ = new location_Location(authWrapperBucket, '');\n            }\n        }\n        this.internals_ = new service_ServiceInternals(this);\n    }\n    /**\r\n     * Returns a firebaseStorage.Reference for the given path in the default\r\n     * bucket.\r\n     */\n    Service.prototype.ref = function (path) {\n        function validator(path) {\n            if (/^[A-Za-z]+:\\/\\//.test(path)) {\n                throw 'Expected child path but got a URL, use refFromURL instead.';\n            }\n        }\n        validate('ref', [stringSpec(validator, true)], arguments);\n        if (this.bucket_ == null) {\n            throw new Error('No Storage Bucket defined in Firebase Options.');\n        }\n        var ref = new reference_Reference(this.authWrapper_, this.bucket_);\n        if (path != null) {\n            return ref.child(path);\n        } else {\n            return ref;\n        }\n    };\n    /**\r\n     * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n     * which must be a gs:// or http[s]:// URL.\r\n     */\n    Service.prototype.refFromURL = function (url) {\n        function validator(p) {\n            if (!/^[A-Za-z]+:\\/\\//.test(p)) {\n                throw 'Expected full URL but got a child path, use ref instead.';\n            }\n            try {\n                location_Location.makeFromUrl(p);\n            } catch (e) {\n                throw 'Expected valid full URL but got an invalid one.';\n            }\n        }\n        validate('refFromURL', [stringSpec(validator, false)], arguments);\n        return new reference_Reference(this.authWrapper_, url);\n    };\n    Object.defineProperty(Service.prototype, \"maxUploadRetryTime\", {\n        get: function get() {\n            return this.authWrapper_.maxUploadRetryTime();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Service.prototype.setMaxUploadRetryTime = function (time) {\n        validate('setMaxUploadRetryTime', [nonNegativeNumberSpec()], arguments);\n        this.authWrapper_.setMaxUploadRetryTime(time);\n    };\n    Object.defineProperty(Service.prototype, \"maxOperationRetryTime\", {\n        get: function get() {\n            return this.authWrapper_.maxOperationRetryTime();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Service.prototype.setMaxOperationRetryTime = function (time) {\n        validate('setMaxOperationRetryTime', [nonNegativeNumberSpec()], arguments);\n        this.authWrapper_.setMaxOperationRetryTime(time);\n    };\n    Object.defineProperty(Service.prototype, \"app\", {\n        get: function get() {\n            return this.app_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Service.prototype, \"INTERNAL\", {\n        get: function get() {\n            return this.internals_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Service;\n}();\n\n/**\r\n * @struct\r\n */\nvar service_ServiceInternals = function () {\n    function ServiceInternals(service) {\n        this.service_ = service;\n    }\n    /**\r\n     * Called when the associated app is deleted.\r\n     * @see {!fbs.AuthWrapper.prototype.deleteApp}\r\n     */\n    ServiceInternals.prototype.delete = function () {\n        this.service_.authWrapper_.deleteApp();\n        return promise_external_resolve(undefined);\n    };\n    return ServiceInternals;\n}();\n\n// CONCATENATED MODULE: ./src/storage.ts\n/* harmony export (immutable) */ __webpack_exports__[\"registerStorage\"] = registerStorage;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__app__ = __webpack_require__(5);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\nvar STORAGE_TYPE = 'storage';\nfunction factory(app, unused, opt_url) {\n    return new service_Service(app, new xhriopool_XhrIoPool(), opt_url);\n}\nfunction registerStorage(instance) {\n    var namespaceExports = {\n        // no-inline\n        'TaskState': TaskState,\n        'TaskEvent': TaskEvent,\n        'StringFormat': StringFormat,\n        'Storage': service_Service,\n        'Reference': reference_Reference\n    };\n    instance.INTERNAL.registerService(STORAGE_TYPE, factory, namespaceExports, undefined,\n    // Allow multiple storage instances per app.\n    true);\n}\nregisterStorage(__WEBPACK_IMPORTED_MODULE_5__app__[\"default\"]);\n\n/***/ })\n\n},[22]);\n          } catch(error) {\n            throw new Error(\n              'Cannot instantiate firebase-storage.js - ' +\n              'be sure to load firebase-app.js first.'\n            )\n          }\n\n\n// WEBPACK FOOTER //\n// firebase-storage.js","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport {configOption} from './constants';\n\nexport class FirebaseStorageError implements Error {\n  private code_: string;\n  private message_: string;\n  private serverResponse_: string|null;\n  private name_: string;\n\n  constructor(code: Code, message: string) {\n    this.code_ = prependCode(code);\n    this.message_ = 'Firebase Storage: ' + message;\n    this.serverResponse_ = null;\n    this.name_ = 'FirebaseError';\n  }\n\n  codeProp(): string {\n    return this.code;\n  }\n\n  codeEquals(code: Code): boolean {\n    return prependCode(code) === this.codeProp();\n  }\n\n  serverResponseProp(): string|null {\n    return this.serverResponse_;\n  }\n\n  setServerResponseProp(serverResponse: string|null) {\n    this.serverResponse_ = serverResponse;\n  }\n\n  get name(): string {\n    return this.name_;\n  }\n\n  get code(): string {\n    return this.code_;\n  }\n\n  get message(): string {\n    return this.message_;\n  }\n\n  get serverResponse(): null|string {\n    return this.serverResponse_;\n  }\n}\n\nexport const errors = {};\n\n/**\n * @enum {string}\n */\nexport type Code = string;\nexport const Code = {\n  // Shared between all platforms\n  UNKNOWN: 'unknown',\n  OBJECT_NOT_FOUND: 'object-not-found',\n  BUCKET_NOT_FOUND: 'bucket-not-found',\n  PROJECT_NOT_FOUND: 'project-not-found',\n  QUOTA_EXCEEDED: 'quota-exceeded',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNAUTHORIZED: 'unauthorized',\n  RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',\n  INVALID_CHECKSUM: 'invalid-checksum',\n  CANCELED: 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME: 'invalid-event-name',\n  INVALID_URL: 'invalid-url',\n  INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET: 'no-default-bucket',\n  CANNOT_SLICE_BLOB: 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',\n  NO_DOWNLOAD_URL: 'no-download-url',\n  INVALID_ARGUMENT: 'invalid-argument',\n  INVALID_ARGUMENT_COUNT: 'invalid-argument-count',\n  APP_DELETED: 'app-deleted',\n  INVALID_ROOT_OPERATION: 'invalid-root-operation',\n  INVALID_FORMAT: 'invalid-format',\n  INTERNAL_ERROR: 'internal-error'\n};\n\nexport function prependCode(code: Code): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): FirebaseStorageError {\n  let message =\n      'An unknown error occurred, please check the error payload for ' +\n      'server response.';\n  return new FirebaseStorageError(Code.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n      Code.OBJECT_NOT_FOUND, 'Object \\'' + path + '\\' does not exist.');\n}\n\nexport function bucketNotFound(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n      Code.BUCKET_NOT_FOUND, 'Bucket \\'' + bucket + '\\' does not exist.');\n}\n\nexport function projectNotFound(project: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n      Code.PROJECT_NOT_FOUND, 'Project \\'' + project + '\\' does not exist.');\n}\n\nexport function quotaExceeded(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n      Code.QUOTA_EXCEEDED,\n      'Quota for bucket \\'' + bucket + '\\' exceeded, please view quota on ' +\n          'https://firebase.google.com/pricing/.');\n}\n\nexport function unauthenticated(): FirebaseStorageError {\n  let message =\n      'User is not authenticated, please authenticate using Firebase ' +\n      'Authentication and try again.';\n  return new FirebaseStorageError(Code.UNAUTHENTICATED, message);\n}\n\nexport function unauthorized(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n      Code.UNAUTHORIZED,\n      'User does not have permission to access \\'' + path + '\\'.');\n}\n\nexport function retryLimitExceeded(): FirebaseStorageError {\n  return new FirebaseStorageError(\n      Code.RETRY_LIMIT_EXCEEDED,\n      'Max retry time for operation exceeded, please try again.');\n}\n\nexport function invalidChecksum(\n    path: string, checksum: string, calculated: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n      Code.INVALID_CHECKSUM,\n      'Uploaded/downloaded object \\'' + path + '\\' has checksum \\'' + checksum +\n          '\\' which does not match \\'' + calculated +\n          '\\'. Please retry the upload/download.');\n}\n\nexport function canceled(): FirebaseStorageError {\n  return new FirebaseStorageError(Code.CANCELED, 'User canceled the upload/download.');\n}\n\nexport function invalidEventName(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n      Code.INVALID_EVENT_NAME, 'Invalid event name \\'' + name + '\\'.');\n}\n\nexport function invalidUrl(url: string): FirebaseStorageError {\n  return new FirebaseStorageError(Code.INVALID_URL, 'Invalid URL \\'' + url + '\\'.');\n}\n\nexport function invalidDefaultBucket(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n      Code.INVALID_DEFAULT_BUCKET,\n      'Invalid default bucket \\'' + bucket + '\\'.');\n}\n\nexport function noDefaultBucket(): FirebaseStorageError {\n  return new FirebaseStorageError(\n      Code.NO_DEFAULT_BUCKET,\n      'No default bucket ' +\n          'found. Did you set the \\'' + configOption +\n          '\\' property when initializing the app?');\n}\n\nexport function cannotSliceBlob(): FirebaseStorageError {\n  return new FirebaseStorageError(\n      Code.CANNOT_SLICE_BLOB,\n      'Cannot slice blob for upload. Please retry the upload.');\n}\n\nexport function serverFileWrongSize(): FirebaseStorageError {\n  return new FirebaseStorageError(\n      Code.SERVER_FILE_WRONG_SIZE,\n      'Server recorded incorrect upload file size, please retry the upload.');\n}\n\nexport function noDownloadURL(): FirebaseStorageError {\n  return new FirebaseStorageError(\n      Code.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\n}\n\nexport function invalidArgument(\n    index: number, fnName: string, message: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n      Code.INVALID_ARGUMENT,\n      'Invalid argument in `' + fnName + '` at index ' + index + ': ' +\n          message);\n}\n\nexport function invalidArgumentCount(\n    argMin: number, argMax: number, fnName: string, real: number): FirebaseStorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new FirebaseStorageError(\n      Code.INVALID_ARGUMENT_COUNT,\n      'Invalid argument count in `' + fnName + '`: Expected ' + countPart +\n          ' ' + plural + ', received ' + real + '.');\n}\n\nexport function appDeleted(): FirebaseStorageError {\n  return new FirebaseStorageError(Code.APP_DELETED, 'The Firebase app was deleted.');\n}\n\n/**\n * @param name The name of the operation that was invalid.\n */\nexport function invalidRootOperation(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n      Code.INVALID_ROOT_OPERATION,\n      'The operation \\'' + name +\n          '\\' cannot be performed on a root reference, create a non-root ' +\n          'reference using child, such as .child(\\'file.png\\').');\n}\n\n/**\n * @param format The format that was not valid.\n * @param message A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n      Code.INVALID_FORMAT,\n      'String does not match format \\'' + format + '\\': ' + message);\n}\n\n/**\n * @param message A message describing the internal error.\n */\nexport function internalError(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(Code.INTERNAL_ERROR, 'Internal error: ' + message);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/error.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as errorsExports from './error';\nimport {errors} from './error';\n\n/**\n * @enum {string}\n */\nexport type StringFormat = string;\nexport const StringFormat = {\n  RAW: 'raw',\n  BASE64: 'base64',\n  BASE64URL: 'base64url',\n  DATA_URL: 'data_url'\n};\n\nexport function formatValidator(stringFormat: string) {\n  switch (stringFormat) {\n    case StringFormat.RAW:\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n    case StringFormat.DATA_URL:\n      return;\n    default:\n      throw 'Expected one of the event types: [' + StringFormat.RAW + ', ' +\n          StringFormat.BASE64 + ', ' + StringFormat.BASE64URL + ', ' +\n          StringFormat.DATA_URL + '].';\n  }\n}\n\n/**\n * @struct\n */\nexport class StringData {\n  contentType: string|null;\n\n  constructor(public data: Uint8Array, opt_contentType?: string|null) {\n    this.contentType = opt_contentType || null;\n  }\n}\n\nexport function dataFromString(\n    format: StringFormat, string: string): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(string));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, string));\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(string), dataURLContentType_(string));\n  }\n\n  // assert(false);\n  throw errorsExports.unknown();\n}\n\nexport function utf8Bytes_(string: string): Uint8Array {\n  let b = [];\n  for (let i = 0; i < string.length; i++) {\n    let c = string.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) == 55296) {\n          // The start of a surrogate pair.\n          let valid = i < string.length - 1 &&\n              (string.charCodeAt(i + 1) & 64512) == 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            let hi = c;\n            let lo = string.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(\n                240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63,\n                128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) == 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(string: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(string);\n  } catch (e) {\n    throw errorsExports.invalidFormat(\n        StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, string: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      let hasMinus = string.indexOf('-') !== -1;\n      let hasUnder = string.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        let invalidChar = hasMinus ? '-' : '_';\n        throw errorsExports.invalidFormat(\n            format,\n            'Invalid character \\'' + invalidChar +\n                '\\' found: is it base64url encoded?');\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      let hasPlus = string.indexOf('+') !== -1;\n      let hasSlash = string.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        let invalidChar = hasPlus ? '+' : '/';\n        throw errorsExports.invalidFormat(\n            format,\n            'Invalid character \\'' + invalidChar +\n                '\\' found: is it base64 encoded?');\n      }\n      string = string.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n  }\n  let bytes;\n  try {\n    bytes = atob(string);\n  } catch (e) {\n    throw errorsExports.invalidFormat(format, 'Invalid character found');\n  }\n  let array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\n/**\n * @struct\n */\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string|null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    let matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw errorsExports.invalidFormat(\n          StringFormat.DATA_URL,\n          'Must be formatted \\'data:[<mediatype>][;base64],<data>');\n    }\n    let middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ?\n          middle.substring(0, middle.length - ';base64'.length) :\n          middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(string: string): Uint8Array {\n  let parts = new DataURLParts(string);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(string: string): string|null {\n  let parts = new DataURLParts(string);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/string.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * Enum for task events.\n * @enum {string}\n */\nexport type TaskEvent = string;\nexport const TaskEvent = {\n  /** Triggered whenever the task changes or progress is updated. */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n * @enum {string}\n */\nexport type InternalTaskState = string;\nexport const InternalTaskState = {\n  RUNNING: 'running',\n  PAUSING: 'pausing',\n  PAUSED: 'paused',\n  SUCCESS: 'success',\n  CANCELING: 'canceling',\n  CANCELED: 'canceled',\n  ERROR: 'error'\n};\n\n/**\n * External (API-surfaced) enum for task state.\n * @enum {string}\n */\nexport type TaskState = string;\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(state: InternalTaskState):\n    TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/taskenums.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Contains methods for working with objects.\n */\nexport function contains(\n    obj: Object, prop: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nexport function forEach<T>(\n    obj: {[key: string]: T},\n    f: (p1: string, p2: T) => void) {\n  for (let key in obj) {\n    if (contains(obj, key)) {\n      f(key, obj[key]);\n    }\n  }\n}\n\nexport function clone<T>(obj?: {[key: string]: any}|null): T {\n  if (obj == null) {\n    return {} as T;\n  }\n\n  let c: {[name: string]: any} = {};\n  forEach(obj, function(key, val) {\n    c[key] = val;\n  });\n  return c as T;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/object.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Implements the promise abstraction interface for external\n * (public SDK) packaging, which just passes through to the firebase-app impl.\n */\n\n/**\n * @template T\n * @param {function((function(T): void),\n *                  (function(!Error): void))} resolver\n */\n\nimport { PromiseImpl } from \"../../utils/promise\";\n\nexport function make<T>(resolver: (p1: (p1: T) => void, \n                        p2: (p1: Error) => void) => void): Promise<T> {\n  return new PromiseImpl(resolver);\n}\n\n/**\n * @template T\n */\nexport function resolve<T>(value: T): Promise<T> {\n  return (PromiseImpl.resolve(value) as Promise<T>);\n}\n\nexport function reject<T>(error: Error): Promise<T> {\n  return (PromiseImpl.reject(error) as Promise<T>);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/promise_external.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @return False if the object is undefined or null, true otherwise.\n */\nexport function isDef(p: any): boolean {\n  return p != null;\n}\n\nexport function isJustDef(p: any): boolean {\n  return p !== void 0;\n}\n\nexport function isFunction(p: any): boolean {\n  return typeof p === 'function';\n}\n\nexport function isObject(p: any): boolean {\n  return typeof p === 'object';\n}\n\nexport function isNonNullObject(p: any): boolean {\n  return isObject(p) && p !== null;\n}\n\nexport function isNonArrayObject(p: any): boolean {\n  return isObject(p) && !Array.isArray(p);\n}\n\nexport function isString(p: any): boolean {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNumber(p: any): boolean {\n  return typeof p === 'number' || p instanceof Number;\n}\n\nexport function isNativeBlob(p: any): boolean {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/type.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as type from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(s: string): {[name: string]: any}|null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (type.isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/json.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string|null {\n  if (path.length == 0) {\n    return null;\n  }\n  let index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  let newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  let canonicalChildPath = childPath.split('/')\n                               .filter(function(component) {\n                                 return component.length > 0;\n                               })\n                               .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  let index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/path.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport * as constants from './constants';\nimport * as object from './object';\n\nexport function makeNormalUrl(urlPart: string): string {\n  return constants.domainBase + constants.apiBaseUrl + urlPart;\n}\n\nexport function makeDownloadUrl(urlPart: string): string {\n  return constants.downloadBase + constants.apiBaseUrl + urlPart;\n}\n\nexport function makeUploadUrl(urlPart: string): string {\n  return constants.domainBase + constants.apiUploadBaseUrl + urlPart;\n}\n\nexport function makeQueryString(params: { [key: string]: string }): string {\n  let encode = encodeURIComponent;\n  let queryPart = '?';\n  object.forEach(params, function(key, val) {\n    let nextPart = encode(key) + '=' + encode(val);\n    queryPart = queryPart + nextPart + '&';\n  });\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/url.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport {Metadata} from '../metadata';\n\nimport {AuthWrapper} from './authwrapper';\nimport * as json from './json';\nimport {Location} from './location';\nimport * as path from './path';\nimport * as type from './type';\nimport * as UrlUtils from './url';\n\nexport function noXform_(\n    metadata: Metadata, value: any): any {\n  return value;\n}\n\n/**\n * @struct\n */\nexport class Mapping {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2: any) => any;\n\n  constructor(\n      public server: string, opt_local?: string|null, opt_writable?: boolean,\n      opt_xform?: (p1: Metadata, p2: any) => any |\n          null) {\n    this.local = opt_local || server;\n    this.writable = !!opt_writable;\n    this.xform = opt_xform || noXform_;\n  }\n}\ntype Mappings = Mapping[];\n\nexport {Mappings};\n\nlet mappings_: Mappings|null = null;\n\nexport function xformPath(fullPath: any): string {\n  let valid = type.isString(fullPath);\n  if (!valid || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    fullPath = (fullPath as string);\n    return path.lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  let mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n\n  function mappingsXformPath(\n      metadata: Metadata, fullPath: any): string {\n    return xformPath(fullPath);\n  }\n  let nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n      metadata: Metadata, size: any): number|null|undefined {\n    if (type.isDef(size)) {\n      return +(size as number);\n    } else {\n      return size;\n    }\n  }\n  let sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n\n  /**\n   * Transforms a comma-separated string of tokens into a list of download\n   * URLs.\n   */\n  function xformTokens(\n      metadata: Metadata, tokens: any): string[] {\n    let valid = type.isString(tokens) && tokens.length > 0;\n    if (!valid) {\n      // This can happen if objects are uploaded through GCS and retrieved\n      // through list, so we don't want to throw an Error.\n      return [];\n    }\n    let encode = encodeURIComponent;\n    let tokensList = tokens.split(',');\n    let urls = tokensList.map(function(token: string) {\n      let bucket: string = metadata['bucket'] as string;\n      let path: string = metadata['fullPath'] as string;\n      let urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n      let base = UrlUtils.makeDownloadUrl(urlPart);\n      let queryString = UrlUtils.makeQueryString({'alt': 'media', 'token': token});\n      return base + queryString;\n    });\n    return urls;\n  }\n  mappings.push(\n      new Mapping('downloadTokens', 'downloadURLs', false, xformTokens));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, authWrapper: AuthWrapper) {\n  function generateRef() {\n    let bucket: string = metadata['bucket'] as string;\n    let path: string = metadata['fullPath'] as string;\n    let loc = new Location(bucket, path);\n    return authWrapper.makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', {get: generateRef});\n}\n\nexport function fromResource(\n    authWrapper: AuthWrapper, resource: {[name: string]: any},\n    mappings: Mappings): Metadata {\n  let metadata: Metadata = {} as Metadata;\n  metadata['type']  = 'file';\n  let len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    let mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n  addRef(metadata, authWrapper);\n  return metadata;\n}\n\nexport function fromResourceString(\n    authWrapper: AuthWrapper, resourceString: string,\n    mappings: Mappings): Metadata|null {\n  let obj = json.jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  let resource = (obj as Metadata);\n  return fromResource(authWrapper, resource, mappings);\n}\n\nexport function toResourceString(\n    metadata: Metadata, mappings: Mappings): string {\n  let resource: {\n    [prop: string]: any\n  } = {};\n  let len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    let mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n\nexport function metadataValidator(p: any) {\n  let validType = p && type.isObject(p);\n  if (!validType) {\n    throw 'Expected Metadata object.';\n  }\n  for (let key in p) {\n    let val = p[key];\n    if (key === 'customMetadata') {\n      if (!type.isObject(val)) {\n        throw 'Expected object for \\'customMetadata\\' mapping.';\n      }\n    } else {\n      if (type.isNonNullObject(val)) {\n        throw 'Mapping for \\'' + key + '\\' cannot be an object.';\n      }\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/metadata.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as errorsExports from './error';\nimport {errors} from './error';\nimport * as MetadataUtils from './metadata';\nimport * as type from './type';\n\n/**\n * @param name Name of the function.\n * @param specs Argument specs.\n * @param passed The actual arguments passed to the function.\n * @throws {fbs.Error} If the arguments are invalid.\n */\nexport function validate(name: string, specs: ArgSpec[], passed: IArguments) {\n  let minArgs = specs.length;\n  let maxArgs = specs.length;\n  for (let i = 0; i < specs.length; i++) {\n    if (specs[i].optional) {\n      minArgs = i;\n      break;\n    }\n  }\n  let validLength = minArgs <= passed.length && passed.length <= maxArgs;\n  if (!validLength) {\n    throw errorsExports.invalidArgumentCount(\n        minArgs, maxArgs, name, passed.length);\n  }\n  for (let i = 0; i < passed.length; i++) {\n    try {\n      specs[i].validator(passed[i]);\n    } catch (e) {\n      if (e instanceof Error) {\n        throw errorsExports.invalidArgument(i, name, e.message);\n      } else {\n        throw errorsExports.invalidArgument(i, name, e);\n      }\n    }\n  }\n}\n\n/**\n * @struct\n */\nexport class ArgSpec {\n  validator: (p1: any) => void;\n  optional: boolean;\n\n  constructor(\n      validator: (p1: any) => void,\n      opt_optional?: boolean) {\n    let self = this;\n    this.validator = function(p: any) {\n      if (self.optional && !type.isJustDef(p)) {\n        return;\n      }\n      validator(p);\n    };\n    this.optional = !!opt_optional;\n  }\n}\n\nexport function and_(\n    v1: (p1: any) => void,\n    v2: Function): (p1: any) => void {\n  return function(p) {\n    v1(p);\n    v2(p);\n  };\n}\n\nexport function stringSpec(\n    opt_validator?: (p1: any) => void | null,\n    opt_optional?: boolean): ArgSpec {\n  function stringValidator(p: any) {\n    if (!type.isString(p)) {\n      throw 'Expected string.';\n    }\n  }\n  let validator;\n  if (opt_validator) {\n    validator = and_(stringValidator, opt_validator);\n  } else {\n    validator = stringValidator;\n  }\n  return new ArgSpec(validator, opt_optional);\n}\n\nexport function uploadDataSpec(): ArgSpec {\n  function validator(p: any) {\n    let valid = p instanceof Uint8Array || p instanceof ArrayBuffer ||\n        type.isNativeBlobDefined() && p instanceof Blob;\n    if (!valid) {\n      throw 'Expected Blob or File.';\n    }\n  }\n  return new ArgSpec(validator);\n}\n\nexport function metadataSpec(opt_optional?: boolean): ArgSpec {\n  return new ArgSpec(MetadataUtils.metadataValidator, opt_optional);\n}\n\nexport function nonNegativeNumberSpec(): ArgSpec {\n  function validator(p: any) {\n    let valid = type.isNumber(p) && p >= 0;\n    if (!valid) {\n      throw 'Expected a number 0 or greater.';\n    }\n  }\n  return new ArgSpec(validator);\n}\n\nexport function looseObjectSpec(\n    opt_validator?: ((p1: any) => void) | null,\n    opt_optional?: boolean): ArgSpec {\n  function validator(p: any) {\n    let isLooseObject = (p === null) || (type.isDef(p) && p instanceof Object);\n    if (!isLooseObject) {\n      throw 'Expected an Object.';\n    }\n    if (opt_validator !== undefined && opt_validator !== null) {\n      opt_validator(p);\n    }\n  }\n  return new ArgSpec(validator, opt_optional);\n}\n\nexport function nullFunctionSpec(opt_optional?: boolean): ArgSpec {\n  function validator(p: any) {\n    let valid = p === null || type.isFunction(p);\n    if (!valid) {\n      throw 'Expected a Function.';\n    }\n  }\n  return new ArgSpec(validator, opt_optional);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/args.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport * as array from './array';\nimport * as type from './type';\n\ndeclare var IBlobBuilder;\ndeclare var BlobBuilder;\ndeclare var WebKitBlobBuilder;\n\nfunction getBlobBuilder(): (typeof IBlobBuilder)|undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param var_args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...var_args: (string|Blob|ArrayBuffer)[]): Blob {\n  let BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    let bb = new BlobBuilder();\n    for (let i = 0; i < var_args.length; i++) {\n      bb.append(var_args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (type.isNativeBlobDefined()) {\n      return new Blob(var_args);\n    } else {\n      throw Error('This browser doesn\\'t seem to support creating Blobs');\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob|null {\n  if ((blob as any).webkitSlice) {\n    return (blob as any).webkitSlice(start, end);\n  } else if ((blob as any).mozSlice) {\n    return (blob as any).mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/fs.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * Returns true if the object is contained in the array (compared with ===).\n * @template T\n */\nexport function contains<T>(array: T[], elem: T): boolean {\n  return array.indexOf(elem) !== -1;\n}\n\n/**\n * Returns a shallow copy of the array or array-like object (e.g. arguments).\n * @template T\n */\nexport function clone<T>(arraylike: T[]): T[] {\n  return Array.prototype.slice.call(arraylike);\n}\n\n/**\n * Removes the given element from the given array, if it is contained.\n * Directly modifies the passed-in array.\n * @template T\n */\nexport function remove<T>(array: T[], elem: T) {\n  const i = array.indexOf(elem);\n  if (i !== -1) {\n    array.splice(i, 1);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/array.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport {Metadata} from '../metadata';\n\nimport * as array from './array';\nimport {AuthWrapper} from './authwrapper';\nimport {FbsBlob} from './blob';\nimport * as errorsExports from './error';\nimport {FirebaseStorageError} from './error';\nimport {errors} from './error';\nimport {Location} from './location';\nimport * as MetadataUtils from './metadata';\nimport * as object from './object';\nimport {RequestInfo} from './requestinfo';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport {XhrIo} from './xhrio';\n\n/**\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean) {\n  if (!cndn) {\n    throw errorsExports.unknown();\n  }\n}\n\nexport function metadataHandler(\n    authWrapper: AuthWrapper,\n    mappings: MetadataUtils.Mappings): (p1: XhrIo, p2: string) => Metadata {\n  function handler(xhr: XhrIo, text: string): Metadata {\n    let metadata = MetadataUtils.fromResourceString(authWrapper, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(location: Location): (\n    p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  function errorHandler(xhr: XhrIo, err: FirebaseStorageError): FirebaseStorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      newErr = errorsExports.unauthenticated();\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = errorsExports.quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = errorsExports.unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.setServerResponseProp(err.serverResponseProp());\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(location: Location): (\n    p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  let shared = sharedErrorHandler(location);\n\n  function errorHandler(xhr: XhrIo, err: FirebaseStorageError): FirebaseStorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = errorsExports.objectNotFound(location.path);\n    }\n    newErr.setServerResponseProp(err.serverResponseProp());\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n    authWrapper: AuthWrapper, location: Location,\n    mappings: MetadataUtils.Mappings): RequestInfo<Metadata> {\n  let urlPart = location.fullServerUrl();\n  let url = UrlUtils.makeNormalUrl(urlPart);\n  let method = 'GET';\n  let timeout = authWrapper.maxOperationRetryTime();\n  let requestInfo = new RequestInfo(\n      url, method, metadataHandler(authWrapper, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n    authWrapper: AuthWrapper, location: Location, metadata: Metadata,\n    mappings: MetadataUtils.Mappings): RequestInfo<Metadata> {\n  let urlPart = location.fullServerUrl();\n  let url = UrlUtils.makeNormalUrl(urlPart);\n  let method = 'PATCH';\n  let body = MetadataUtils.toResourceString(metadata, mappings);\n  let headers = {'Content-Type': 'application/json; charset=utf-8'};\n  let timeout = authWrapper.maxOperationRetryTime();\n  let requestInfo = new RequestInfo(\n      url, method, metadataHandler(authWrapper, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n    authWrapper: AuthWrapper, location: Location): RequestInfo<void> {\n  let urlPart = location.fullServerUrl();\n  let url = UrlUtils.makeNormalUrl(urlPart);\n  let method = 'DELETE';\n  let timeout = authWrapper.maxOperationRetryTime();\n\n  function handler(xhr: XhrIo, text: string) {}\n  let requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n    metadata: Metadata|null, blob: FbsBlob|null): string {\n  return metadata && metadata['contentType'] || blob && blob.type() ||\n      'application/octet-stream';\n}\n\nexport function metadataForUpload_(\n    location: Location, blob: FbsBlob, opt_metadata?: Metadata|null): Metadata {\n  let metadata = object.clone<Metadata>(opt_metadata);\n  metadata['fullPath'] = location.path;\n  metadata['size'] = blob.size();\n  if (!metadata['contentType']) {\n    metadata['contentType'] = determineContentType_(null, blob);\n  }\n  return metadata;\n}\n\nexport function multipartUpload(\n    authWrapper: AuthWrapper, location: Location, mappings: MetadataUtils.Mappings,\n    blob: FbsBlob, opt_metadata?: Metadata|null): RequestInfo<Metadata> {\n  let urlPart = location.bucketOnlyServerUrl();\n  let headers: { [prop: string]: string } = {'X-Goog-Upload-Protocol': 'multipart'};\n\n  function genBoundary() {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  let boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  let metadata = metadataForUpload_(location, blob, opt_metadata);\n  let metadataString = MetadataUtils.toResourceString(metadata, mappings);\n  let preBlobPart = '--' + boundary + '\\r\\n' +\n      'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString +\n      '\\r\\n--' + boundary + '\\r\\n' +\n      'Content-Type: ' + metadata['contentType'] + '\\r\\n\\r\\n';\n  let postBlobPart = '\\r\\n--' + boundary + '--';\n  let body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw errorsExports.cannotSliceBlob();\n  }\n  let urlParams = {'name': metadata['fullPath']};\n  let url = UrlUtils.makeUploadUrl(urlPart);\n  let method = 'POST';\n  let timeout = authWrapper.maxUploadRetryTime();\n  let requestInfo = new RequestInfo(\n      url, method, metadataHandler(authWrapper, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n * @struct\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata|null;\n\n  constructor(\n      public current: number,\n      public total: number,\n      finalized?: boolean,\n      metadata?: Metadata|null) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(xhr: XhrIo, opt_allowed?: string[]): string {\n  let status;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  let allowed = opt_allowed || ['active'];\n  handlerCheck(array.contains(allowed, status));\n  return (status as string);\n}\n\nexport function createResumableUpload(\n    authWrapper: AuthWrapper, location: Location, mappings: MetadataUtils.Mappings,\n    blob: FbsBlob, opt_metadata?: Metadata|null): RequestInfo<string> {\n  let urlPart = location.bucketOnlyServerUrl();\n  let metadata = metadataForUpload_(location, blob, opt_metadata);\n  let urlParams = {'name': metadata['fullPath']};\n  let url = UrlUtils.makeUploadUrl(urlPart);\n  let method = 'POST';\n  let headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadata['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  let body = MetadataUtils.toResourceString(metadata, mappings);\n  let timeout = authWrapper.maxUploadRetryTime();\n\n  function handler(xhr: XhrIo, text: string): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(type.isString(url));\n    return (url as string);\n  }\n  let requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n    authWrapper: AuthWrapper, location: Location, url: string,\n    blob: FbsBlob): RequestInfo<ResumableUploadStatus> {\n  let headers = {'X-Goog-Upload-Command': 'query'};\n\n  function handler(xhr: XhrIo, text: string): ResumableUploadStatus {\n    let status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    let size = parseInt(sizeString, 10);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  let method = 'POST';\n  let timeout = authWrapper.maxUploadRetryTime();\n  let requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const resumableUploadChunkSize: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param opt_status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n    location: Location, authWrapper: AuthWrapper, url: string, blob: FbsBlob,\n    chunkSize: number, mappings: MetadataUtils.Mappings,\n    opt_status?: ResumableUploadStatus|null,\n    opt_progressCallback?: ((p1: number, p2: number) => void) | null): RequestInfo<ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  let status = new ResumableUploadStatus(0, 0);\n  if (opt_status) {\n    status.current = opt_status.current;\n    status.total = opt_status.total;\n  } else {\n    status.current = 0;\n    status.total = blob.size();\n  }\n  if (blob.size() !== status.total) {\n    throw errorsExports.serverFileWrongSize();\n  }\n  let bytesLeft = status.total - status.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  let startByte = status.current;\n  let endByte = startByte + bytesToUpload;\n  let uploadCommand =\n      bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  let headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': status.current\n  };\n  let body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw errorsExports.cannotSliceBlob();\n  }\n\n  function handler(xhr: XhrIo, text: string): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    let uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    let newCurrent = status.current + bytesToUpload;\n    let size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(authWrapper, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n        newCurrent, size, uploadStatus === 'final', metadata);\n  }\n  let method = 'POST';\n  let timeout = authWrapper.maxUploadRetryTime();\n  let requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = opt_progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/requests.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Method for invoking a callback asynchronously.\n */\nimport * as promiseimpl from './promise_external';\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\nexport function async(f: Function): Function {\n  return function(...argsToForward: any[]) {\n    promiseimpl.resolve(true).then(function() {\n      f.apply(null, argsToForward);\n    });\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/async.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport {id};\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n    f: (p1: (success: boolean, ...rest: any[]) => void,\n        canceled: boolean) => void,\n    callback: Function, timeout: number): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  let timeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled() {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback() {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, arguments);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    timeoutId = setTimeout(function() {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success: boolean, ...var_args: any[]):void {\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.apply(null, arguments);\n      return;\n    }\n    let mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.apply(null, arguments);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(function() {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id) {\n  id(false);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/backoff.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\nimport * as array from './array';\nimport * as backoff from './backoff';\nimport * as errorsExports from './error';\nimport {FirebaseStorageError} from './error';\nimport {errors} from './error';\nimport * as object from './object';\nimport * as promiseimpl from './promise_external';\nimport {RequestInfo} from './requestinfo';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport * as XhrIoExports from './xhrio';\nimport {Headers, XhrIo} from './xhrio';\nimport {XhrIoPool} from './xhriopool';\nimport { FirebaseNamespace } from \"../../app/firebase_app\";\n\ndeclare var firebase: FirebaseNamespace;\n\n/**\n * @template T\n */\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * @struct\n * @template T\n */\nclass NetworkRequest<T> implements Request<T> {\n  private url_: string;\n  private method_: string;\n  private headers_: Headers;\n  private body_: string|Blob|Uint8Array|null;\n  private successCodes_: number[];\n  private additionalRetryCodes_: number[];\n  private pendingXhr_: XhrIo|null = null;\n  private backoffId_: backoff.id|null = null;\n  private resolve_: Function|null = null;\n  private reject_: Function|null = null;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private callback_: (p1: XhrIo, p2: string) => T;\n  private errorCallback_: ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError) | null;\n  private progressCallback_:\n      ((p1: number, p2: number) => void) | null;\n  private timeout_: number;\n  private pool_: XhrIoPool;\n  promise_: Promise<T>;\n\n  constructor(\n      url: string, method: string, headers: Headers,\n      body: string|Blob|Uint8Array|null, successCodes: number[],\n      additionalRetryCodes: number[],\n      callback: (p1: XhrIo, p2: string) => T,\n      errorCallback: ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError) | null, timeout: number,\n      progressCallback: ((p1: number, p2: number) => void) | null,\n      pool: XhrIoPool) {\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    let self = this;\n    this.promise_ = promiseimpl.make(function(resolve, reject) {\n      self.resolve_ = resolve;\n      self.reject_ = reject;\n      self.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_() {\n    let self = this;\n\n    function doTheRequest(\n        backoffCallback: (p1: boolean, ...p2: any[]) => void,\n        canceled: boolean) {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      let xhr = self.pool_.createXhrIo();\n      self.pendingXhr_ = xhr;\n\n      function progressListener(progressEvent: ProgressEvent) {\n        let loaded = progressEvent.loaded;\n        let total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        xhr.addUploadProgressListener(progressListener);\n      }\n      xhr.send(self.url_, self.method_, self.body_, self.headers_)\n          .then(function(xhr: XhrIo) {\n            if (self.progressCallback_ !== null) {\n              xhr.removeUploadProgressListener(progressListener);\n            }\n            self.pendingXhr_ = null;\n            xhr = (xhr as XhrIo);\n            let hitServer =\n                xhr.getErrorCode() === XhrIoExports.ErrorCode.NO_ERROR;\n            let status = xhr.getStatus();\n            if (!hitServer || self.isRetryStatusCode_(status)) {\n              let wasCanceled =\n                  xhr.getErrorCode() === XhrIoExports.ErrorCode.ABORT;\n              backoffCallback(\n                  false, new RequestEndStatus(false, null, wasCanceled));\n              return;\n            }\n            let successCode = array.contains(self.successCodes_, status);\n            backoffCallback(true, new RequestEndStatus(successCode, xhr));\n          });\n    }\n\n    /**\n     * @param requestWentThrough True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    function backoffDone(\n        requestWentThrough: boolean, status: RequestEndStatus) {\n      let resolve = self.resolve_ as Function;\n      let reject = self.reject_ as Function;\n      let xhr = status.xhr as XhrIo;\n      if (status.wasSuccessCode) {\n        try {\n          let result = self.callback_(xhr, xhr.getResponseText());\n          if (type.isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (xhr !== null) {\n          let err = errorsExports.unknown();\n          err.setServerResponseProp(xhr.getResponseText());\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(xhr, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            let err = self.appDelete_ ? errorsExports.appDeleted() :\n                                        errorsExports.canceled();\n            reject(err);\n          } else {\n            let err = errorsExports.retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = backoff.start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise() {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      backoff.stop(this.backoffId_);\n    }\n    if (this.pendingXhr_ !== null) {\n      this.pendingXhr_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    let isFiveHundredCode = status >= 500 && status < 600;\n    let extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    let isExtraRetryCode = array.contains(extraRetryCodes, status);\n    let isRequestSpecificRetryCode =\n        array.contains(this.additionalRetryCodes_, status);\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled Defaults to false.\n * @struct\n */\nexport class RequestEndStatus {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n      public wasSuccessCode: boolean, public xhr: XhrIo|null,\n      opt_canceled?: boolean) {\n    this.canceled = !!opt_canceled;\n  }\n}\n\nexport function addAuthHeader_(headers: Headers, authToken: string|null) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(headers: Headers) {\n  let number = typeof firebase !== 'undefined' ? firebase.SDK_VERSION : 'AppManager';\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + number;\n}\n\n/**\n * @template T\n */\nexport function makeRequest<T>(\n    requestInfo: RequestInfo<T>, authToken: string|null,\n    pool: XhrIoPool): Request<T> {\n  let queryPart = UrlUtils.makeQueryString(requestInfo.urlParams);\n  let url = requestInfo.url + queryPart;\n  let headers = object.clone<Headers>(requestInfo.headers);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers);\n  return new NetworkRequest<T>(\n      url, requestInfo.method, headers, requestInfo.body,\n      requestInfo.successCodes, requestInfo.additionalRetryCodes,\n      requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout,\n      requestInfo.progressCallback, pool);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/request.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport {StringFormat} from './storage/implementation/string';\nimport {TaskEvent} from './storage/implementation/taskenums';\nimport {TaskState} from './storage/implementation/taskenums';\nimport {XhrIoPool} from './storage/implementation/xhriopool';\nimport {Reference} from './storage/reference';\nimport {Service} from './storage/service';\nimport firebase from './app';\nimport { \n  FirebaseApp, \n  FirebaseServiceFactory \n} from \"./app/firebase_app\";\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(app: FirebaseApp, unused: any, opt_url?: string): Service {\n  return new Service(app, new XhrIoPool(), opt_url);\n}\n\nexport function registerStorage(instance) {\n  let namespaceExports = {\n    // no-inline\n    'TaskState': TaskState,\n    'TaskEvent': TaskEvent,\n    'StringFormat': StringFormat,\n    'Storage': Service,\n    'Reference': Reference\n  };\n  instance.INTERNAL.registerService(\n      STORAGE_TYPE, \n      (factory as FirebaseServiceFactory),\n      namespaceExports, \n      undefined,\n      // Allow multiple storage instances per app.\n      true);\n}\n\nregisterStorage(firebase);\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain and scheme for API calls.\n */\nexport const domainBase: string = 'https://firebasestorage.googleapis.com';\n\n/**\n * Domain and scheme for object downloads.\n */\nexport const downloadBase: string = 'https://firebasestorage.googleapis.com';\n\n/**\n * Base URL for non-upload calls to the API.\n */\nexport const apiBaseUrl: string = '/v0';\n\n/**\n * Base URL for upload calls to the API.\n */\nexport const apiUploadBaseUrl: string = '/v0';\n\nexport function setDomainBase(domainBase: string) {\n  domainBase = domainBase;\n}\n\nexport const configOption: string = 'storageBucket';\n\n/**\n * 1 minute\n */\nexport const shortMaxOperationRetryTime: number = 1 * 60 * 1000;\n\n/**\n * 2 minutes\n */\nexport const defaultMaxOperationRetryTime: number = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n */\nexport const defaultMaxUploadRetryTime: number = 10 * 60 * 100;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const minSafeInteger: number = -9007199254740991;\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/constants.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n */\n\nexport type Headers = {[name: string]: (string|number)};\n\nexport interface XhrIo {\n  send(\n      url: string, method: string, opt_body?: ArrayBufferView|Blob|string|null,\n      opt_headers?: Headers): Promise<XhrIo>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponseText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string|null;\n\n  addUploadProgressListener(listener: (p1: Event) => void): void;\n\n  removeUploadProgressListener(listener: (p1: Event) => void): void;\n}\n\n/**\n * @enum{number}\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/xhrio.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as errorsExports from './error';\nimport * as object from './object';\nimport * as promiseimpl from './promise_external';\nimport * as type from './type';\nimport * as XhrIoExports from './xhrio';\nimport {Headers, XhrIo} from './xhrio';\n\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nexport class NetworkXhrIo implements XhrIo {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: XhrIoExports.ErrorCode;\n  private sendPromise_: Promise<XhrIo>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = XhrIoExports.ErrorCode.NO_ERROR;\n    this.sendPromise_ = promiseimpl.make((resolve, reject) => {\n      this.xhr_.addEventListener('abort', (event) => {\n        this.errorCode_ = XhrIoExports.ErrorCode.ABORT;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('error', (event) => {\n        this.errorCode_ = XhrIoExports.ErrorCode.NETWORK_ERROR;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('load', (event) => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n      url: string, method: string, opt_body?: ArrayBufferView|Blob|string|null,\n      opt_headers?: Headers): Promise<XhrIo> {\n    if (this.sent_) {\n      throw errorsExports.internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (type.isDef(opt_headers)) {\n      const headers = (opt_headers as Headers);\n      object.forEach(headers, (key, val) => {\n        this.xhr_.setRequestHeader(key, val.toString());\n      });\n    }\n    if (type.isDef(opt_body)) {\n      this.xhr_.send(opt_body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): XhrIoExports.ErrorCode {\n    if (!this.sent_) {\n      throw errorsExports.internalError(\n          'cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw errorsExports.internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw errorsExports.internalError(\n          'cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort() {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string|null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: Event) => void) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: Event) => void) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/xhrio_network.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Replacement for goog.net.XhrIoPool that works with fbs.XhrIo.\n */\nimport {XhrIo} from './xhrio';\nimport {NetworkXhrIo} from './xhrio_network';\n\n/**\n * Factory-like class for creating XhrIo instances.\n */\nexport class XhrIoPool {\n  createXhrIo(): XhrIo {\n    return new NetworkXhrIo();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/xhriopool.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\nimport * as errorsExports from './error';\nimport {errors} from './error';\n\n/**\n * @struct\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  fullServerUrl(): string {\n    let encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    let encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw errorsExports.invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string): Location {\n    let location = null;\n    let bucketDomain = '([A-Za-z0-9.\\\\-]+)';\n\n    function gsModify(loc: Location) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    let gsPath = '(/(.*))?$';\n    let path = '(/([^?#]*).*)?$';\n    let gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    let gsIndices = {bucket: 1, path: 3};\n\n    function httpModify(loc: Location) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    let version = 'v[A-Za-z0-9_]+';\n    let httpRegex = new RegExp(\n        '^https?://firebasestorage\\\\.googleapis\\\\.com/' + version + '/b/' +\n            bucketDomain + '/o' + path,\n        'i');\n    let httpIndices = {bucket: 1, path: 3};\n    let groups = [\n      {regex: gsRegex, indices: gsIndices, postModify: gsModify},\n      {regex: httpRegex, indices: httpIndices, postModify: httpModify}\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      let group = groups[i];\n      let captures = group.regex.exec(url);\n      if (captures) {\n        let bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw errorsExports.invalidUrl(url);\n    }\n    return location;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/location.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport * as fs from './fs';\nimport * as string from './string';\nimport {StringFormat} from './string';\nimport * as type from './type';\n\n/**\n * @param opt_elideCopy If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n */\nexport class FbsBlob {\n  private data_: Blob|Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob|Uint8Array|ArrayBuffer, opt_elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (type.isNativeBlob(data)) {\n      this.data_ = (data as Blob);\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (opt_elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (opt_elideCopy) {\n        this.data_ = (data as Uint8Array);\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set((data as Uint8Array));\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob|null {\n    if (type.isNativeBlob(this.data_)) {\n      let realBlob = (this.data_ as Blob);\n      let sliced = fs.sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      let slice =\n          new Uint8Array((this.data_ as Uint8Array).buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...var_args: (string|FbsBlob)[]): FbsBlob|null {\n    if (type.isNativeBlobDefined()) {\n      var blobby: (Blob|Uint8Array|string)[] = var_args.map(function(val: string|FbsBlob): Blob|Uint8Array|string {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(fs.getBlob.apply(null, blobby));\n    } else {\n      let uint8Arrays: Uint8Array[] = var_args.map(function(val: string|FbsBlob): Uint8Array {\n        if (type.isString(val)) {\n          return string.dataFromString(StringFormat.RAW, val as string).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return ((val as FbsBlob).data_ as Uint8Array);\n        }\n      });\n      let finalLength = 0;\n      uint8Arrays.forEach(function(array: Uint8Array): void {\n        finalLength += array.byteLength;\n      });\n      let merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach(function(array: Uint8Array) {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob|Uint8Array {\n    return this.data_;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/blob.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport {FirebaseStorageError} from './error';\nimport {Headers, XhrIo} from './xhrio';\n\nexport type UrlParams = {[name: string]: string};\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob|string|Uint8Array|null = null;\n\n  errorHandler: ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError) | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback:\n      ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n      public url: string,\n      public method: string,\n      /**\n       * Returns the value with which to resolve the request's promise. Only called\n       * if the request is successful. Throw from this function to reject the\n       * returned Request's promise with the thrown error.\n       * Note: The XhrIo passed to this function may be reused after this callback\n       * returns. Do not keep a reference to it in any way.\n       */\n      public handler: (p1: XhrIo, p2: string) => T,\n      public timeout: number) {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/requestinfo.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as type from './type';\n\ntype NextFn<T> = (value: T) => void;\ntype ErrorFn = (error: Error) => void;\ntype CompleteFn = () => void;\ntype Unsubscribe = () => void;\n\ntype Subscribe<T> =\n    (next: NextFn<T> | {[name: string]: string|null},\n     error?: ErrorFn,\n     complete?: CompleteFn) => Unsubscribe;\n\nexport {NextFn, ErrorFn, CompleteFn, Unsubscribe, Subscribe};\n\n/**\n * @struct\n */\nexport class Observer<T> {\n  next: NextFn<T> | null;\n  error: ErrorFn | null;\n  complete: CompleteFn | null;\n\n  constructor(\n      nextOrObserver: NextFn<T> | {[name: string]: string|null} | null,\n      opt_error?: ErrorFn | null,\n      opt_complete?: CompleteFn | null) {\n    let asFunctions = type.isFunction(nextOrObserver) ||\n        type.isDef(opt_error) || type.isDef(opt_complete);\n    if (asFunctions) {\n      this.next = nextOrObserver as (NextFn<T> | null);\n      this.error = opt_error || null;\n      this.complete = opt_complete || null;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T> | null;\n        error?: ErrorFn | null;\n        complete?: CompleteFn | null;\n      };\n      this.next = observer.next || null;\n      this.error = observer.error || null;\n      this.complete = observer.complete || null;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/observer.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport {TaskState} from './implementation/taskenums';\nimport * as type from './implementation/type';\nimport {Metadata} from './metadata';\nimport {Reference} from './reference';\nimport {UploadTask} from './task';\n\nexport class UploadTaskSnapshot {\n  constructor(readonly bytesTransferred: number, readonly totalBytes: number,\n      readonly state: TaskState, readonly metadata: Metadata|null, \n      readonly task: UploadTask, readonly ref: Reference) {}\n\n  get downloadURL(): string|null {\n    if (this.metadata !== null) {\n      let urls = this.metadata['downloadURLs'];\n      if (urls != null && urls[0] != null) {\n        return urls[0];\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/tasksnapshot.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport {AuthWrapper} from './implementation/authwrapper';\nimport {FbsBlob} from './implementation/blob';\nimport {FirebaseStorageError} from './implementation/error';\nimport {InternalTaskState} from './implementation/taskenums';\nimport {Metadata} from './metadata';\nimport {NextFn, ErrorFn, CompleteFn, Unsubscribe, Observer} from './implementation/observer';\nimport {Request} from './implementation/request';\nimport * as RequestExports from './implementation/request';\nimport {Subscribe} from './implementation/observer';\nimport {TaskEvent, TaskState} from './implementation/taskenums';\nimport {UploadTaskSnapshot} from './tasksnapshot';\nimport * as fbsArgs from './implementation/args';\nimport {ArgSpec} from './implementation/args';\nimport * as fbsArray from './implementation/array';\nimport {async as fbsAsync} from './implementation/async';\nimport {errors as fbsErrors} from './implementation/error';\nimport * as errors from './implementation/error';\nimport {Location} from './implementation/location';\nimport * as fbsMetadata from './implementation/metadata';\nimport * as fbsPromiseimpl from './implementation/promise_external';\nimport {RequestInfo} from './implementation/requestinfo';\nimport * as fbsRequests from './implementation/requests';\nimport * as fbsTaskEnums from './implementation/taskenums';\nimport * as typeUtils from './implementation/type';\nimport {Reference} from './reference';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n */\nexport class UploadTask {\n  private ref_: Reference;\n  private authWrapper_: AuthWrapper;\n  private location_: Location;\n  private blob_: FbsBlob;\n  private metadata_: Metadata|null;\n  private mappings_: fbsMetadata.Mappings;\n  private transferred_: number = 0;\n  private needToFetchStatus_: boolean = false;\n  private needToFetchMetadata_: boolean = false;\n  private observers_: Observer<UploadTaskSnapshot>[] = [];\n  private resumable_: boolean;\n  private state_: InternalTaskState;\n  private error_: Error|null = null;\n  private uploadUrl_: string|null = null;\n  private request_: Request<any>|null = null;\n  private chunkMultiplier_: number = 1;\n  private errorHandler_: (p1: FirebaseStorageError) => void;\n  private metadataErrorHandler_: (p1: FirebaseStorageError) => void;\n  private resolve_:\n      ((p1: UploadTaskSnapshot) => void) | null = null;\n  private reject_: ((p1: Error) => void) | null = null;\n  private promise_: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob The blob to upload.\n   */\n  constructor(\n      ref: Reference, authWrapper: AuthWrapper, location: Location,\n      mappings: fbsMetadata.Mappings, blob: FbsBlob, metadata: Metadata|null = null) {\n    this.ref_ = ref;\n    this.authWrapper_ = authWrapper;\n    this.location_ = location;\n    this.blob_ = blob;\n    this.metadata_ = metadata;\n    this.mappings_ = mappings;\n    this.resumable_ = this.shouldDoResumable_(this.blob_);\n    this.state_ = InternalTaskState.RUNNING;\n    this.errorHandler_ = (error) => {\n      this.request_ = null;\n      this.chunkMultiplier_ = 1;\n      if (error.codeEquals(errors.Code.CANCELED)) {\n        this.needToFetchStatus_ = true;\n        this.completeTransitions_();\n      } else {\n        this.error_ = error;\n        this.transition_(InternalTaskState.ERROR);\n      }\n    };\n    this.metadataErrorHandler_ = (error) => {\n      this.request_ = null;\n      if (error.codeEquals(errors.Code.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this.error_ = error;\n        this.transition_(InternalTaskState.ERROR);\n      }\n    };\n    this.promise_ = fbsPromiseimpl.make((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      this.start_();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this.promise_.then(null, () => {});\n  }\n\n  private makeProgressCallback_():\n      (p1: number, p2: number) => void {\n    const sizeBefore = this.transferred_;\n    return (loaded, total) => {\n      this.updateProgress_(sizeBefore + loaded);\n    };\n  }\n\n  private shouldDoResumable_(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private start_() {\n    if (this.state_ !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this.request_ !== null) {\n      return;\n    }\n    if (this.resumable_) {\n      if (this.uploadUrl_ === null) {\n        this.createResumable_();\n      } else {\n        if (this.needToFetchStatus_) {\n          this.fetchStatus_();\n        } else {\n          if (this.needToFetchMetadata_) {\n            // Happens if we miss the metadata on upload completion.\n            this.fetchMetadata_();\n          } else {\n            this.continueUpload_();\n          }\n        }\n      }\n    } else {\n      this.oneShotUpload_();\n    }\n  }\n\n  private resolveToken_(callback: (p1: string|null) => void) {\n    this.authWrapper_.getAuthToken().then((authToken) => {\n      switch (this.state_) {\n        case InternalTaskState.RUNNING:\n          callback(authToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this.transition_(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this.transition_(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private createResumable_() {\n    this.resolveToken_((authToken) => {\n      const requestInfo = fbsRequests.createResumableUpload(\n          this.authWrapper_, this.location_, this.mappings_, this.blob_,\n          this.metadata_);\n      const createRequest = this.authWrapper_.makeRequest(requestInfo, authToken);\n      this.request_ = createRequest;\n      createRequest.getPromise().then(\n          (url: string) => {\n            this.request_ = null;\n            this.uploadUrl_ = url;\n            this.needToFetchStatus_ = false;\n            this.completeTransitions_();\n          },\n          this.errorHandler_);\n    });\n  }\n\n  private fetchStatus_() {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = (this.uploadUrl_ as string);\n    this.resolveToken_((authToken) => {\n      const requestInfo = fbsRequests.getResumableUploadStatus(\n          this.authWrapper_, this.location_, url, this.blob_);\n      const statusRequest = this.authWrapper_.makeRequest(requestInfo, authToken);\n      this.request_ = statusRequest;\n      statusRequest.getPromise().then(\n          (status) => {\n            status = (status as fbsRequests.ResumableUploadStatus);\n            this.request_ = null;\n            this.updateProgress_(status.current);\n            this.needToFetchStatus_ = false;\n            if (status.finalized) {\n              this.needToFetchMetadata_ = true;\n            }\n            this.completeTransitions_();\n          },\n          this.errorHandler_);\n    });\n  }\n\n  private continueUpload_() {\n    const chunkSize =\n        fbsRequests.resumableUploadChunkSize * this.chunkMultiplier_;\n    const status = new fbsRequests.ResumableUploadStatus(\n        this.transferred_, this.blob_.size());\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = (this.uploadUrl_ as string);\n    this.resolveToken_((authToken) => {\n    let requestInfo;\n      try {\n        requestInfo = fbsRequests.continueResumableUpload(\n            this.location_, this.authWrapper_, url, this.blob_, chunkSize,\n            this.mappings_, status, this.makeProgressCallback_());\n      } catch (e) {\n        this.error_ = e;\n        this.transition_(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this.authWrapper_.makeRequest(requestInfo, authToken);\n      this.request_ = uploadRequest;\n      uploadRequest.getPromise().then(\n          (newStatus: fbsRequests.ResumableUploadStatus) => {\n            this.increaseMultiplier_();\n            this.request_ = null;\n            this.updateProgress_(newStatus.current);\n            if (newStatus.finalized) {\n              this.metadata_ = newStatus.metadata;\n              this.transition_(InternalTaskState.SUCCESS);\n            } else {\n              this.completeTransitions_();\n            }\n          },\n          this.errorHandler_);\n    });\n  }\n\n  private increaseMultiplier_() {\n    const currentSize =\n        fbsRequests.resumableUploadChunkSize * this.chunkMultiplier_;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this.chunkMultiplier_ *= 2;\n    }\n  }\n\n  private fetchMetadata_() {\n    this.resolveToken_((authToken) => {\n      const requestInfo = fbsRequests.getMetadata(\n          this.authWrapper_, this.location_, this.mappings_);\n      const metadataRequest = this.authWrapper_.makeRequest(requestInfo, authToken);\n      this.request_ = metadataRequest;\n      metadataRequest.getPromise().then(\n          (metadata) => {\n            this.request_ = null;\n            this.metadata_ = metadata;\n            this.transition_(InternalTaskState.SUCCESS);\n          },\n          this.metadataErrorHandler_);\n    });\n  }\n\n  private oneShotUpload_() {\n    this.resolveToken_((authToken) => {\n      const requestInfo = fbsRequests.multipartUpload(\n          this.authWrapper_, this.location_, this.mappings_, this.blob_,\n          this.metadata_);\n      const multipartRequest = this.authWrapper_.makeRequest(requestInfo, authToken);\n      this.request_ = multipartRequest;\n      multipartRequest.getPromise().then(\n          (metadata) => {\n            this.request_ = null;\n            this.metadata_ = metadata;\n            this.updateProgress_(this.blob_.size());\n            this.transition_(InternalTaskState.SUCCESS);\n          },\n          this.errorHandler_);\n    });\n  }\n\n  private updateProgress_(transferred: number) {\n    const old = this.transferred_;\n    this.transferred_ = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this.transferred_ !== old) {\n      this.notifyObservers_();\n    }\n  }\n\n  private transition_(state: InternalTaskState) {\n    if (this.state_ === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this.state_ = state;\n        if (this.request_ !== null) {\n          this.request_.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this.state_ = state;\n        if (this.request_ !== null) {\n          this.request_.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this.state_ === InternalTaskState.PAUSED;\n        this.state_ = state;\n        if (wasPaused) {\n          this.notifyObservers_();\n          this.start_();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this.state_ = state;\n        this.notifyObservers_();\n        break;\n      case InternalTaskState.CANCELED:\n\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this.error_ = errors.canceled();\n        this.state_ = state;\n        this.notifyObservers_();\n        break;\n      case InternalTaskState.ERROR:\n\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this.state_ = state;\n        this.notifyObservers_();\n        break;\n      case InternalTaskState.SUCCESS:\n\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this.state_ = state;\n        this.notifyObservers_();\n        break;\n    }\n  }\n\n  private completeTransitions_() {\n    switch (this.state_) {\n      case InternalTaskState.PAUSING:\n        this.transition_(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this.transition_(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this.start_();\n        break;\n      default:\n\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  get snapshot(): UploadTaskSnapshot {\n    const externalState =\n        fbsTaskEnums.taskStateFromInternalTaskState(this.state_);\n    return new UploadTaskSnapshot(\n        this.transferred_, this.blob_.size(), externalState, this.metadata_,\n        this, this.ref_);\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type The type of event to listen for.\n   */\n  on(type: TaskEvent, nextOrObserver = undefined, error = undefined,\n     completed = undefined): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    function typeValidator(_p: any) {\n      if (type !== TaskEvent.STATE_CHANGED) {\n        throw `Expected one of the event types: [${TaskEvent.STATE_CHANGED}].`;\n      }\n    }\n    const nextOrObserverMessage =\n        'Expected a function or an Object with one of ' +\n        '`next`, `error`, `complete` properties.';\n    const nextValidator = fbsArgs.nullFunctionSpec(true).validator;\n    const observerValidator = fbsArgs.looseObjectSpec(null, true).validator;\n\n    function nextOrObserverValidator(p: any) {\n      try {\n        nextValidator(p);\n        return;\n      } catch (e) {\n      }\n      try {\n        observerValidator(p);\n        const anyDefined = typeUtils.isJustDef(p['next']) || typeUtils.isJustDef(p['error']) ||\n            typeUtils.isJustDef(p['complete']);\n        if (!anyDefined) {\n          throw '';\n        }\n        return;\n      } catch (e) {\n        throw nextOrObserverMessage;\n      }\n    }\n    const specs = [\n      fbsArgs.stringSpec(typeValidator),\n      fbsArgs.looseObjectSpec(nextOrObserverValidator, true),\n      fbsArgs.nullFunctionSpec(true), fbsArgs.nullFunctionSpec(true)\n    ];\n    fbsArgs.validate('on', specs, arguments);\n    const self = this;\n\n    function makeBinder(specs: ArgSpec[]|null): Subscribe<UploadTaskSnapshot> {\n      function binder(\n          nextOrObserver: NextFn<UploadTaskSnapshot> | {[name: string]: string|null} | null,\n          error?: ErrorFn | null,\n          opt_complete?: CompleteFn | null) {\n        if (specs !== null) {\n          fbsArgs.validate('on', specs, arguments);\n        }\n        const observer = new Observer(nextOrObserver, error, completed);\n        self.addObserver_(observer);\n        return () => {\n          self.removeObserver_(observer);\n        };\n      }\n      return binder;\n    }\n\n    function binderNextOrObserverValidator(p: any) {\n      if (p === null) {\n        throw nextOrObserverMessage;\n      }\n      nextOrObserverValidator(p);\n    }\n    const binderSpecs = [\n      fbsArgs.looseObjectSpec(binderNextOrObserverValidator),\n      fbsArgs.nullFunctionSpec(true), fbsArgs.nullFunctionSpec(true)\n    ];\n    const typeOnly =\n        !(typeUtils.isJustDef(nextOrObserver) || typeUtils.isJustDef(error) ||\n          typeUtils.isJustDef(completed));\n    if (typeOnly) {\n      return makeBinder(binderSpecs);\n    } else {\n      return makeBinder(null)(nextOrObserver, error, completed);\n    }\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   *     The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected The rejection callback.\n   */\n  then<U>(onFulfilled?: ((value: UploadTaskSnapshot) => U | PromiseLike<U>) | null, onRejected?: ((error: any) => U | PromiseLike<U>) | null): Promise<U> {\n      return this.promise_.then<U>(\n        (onFulfilled as (value: UploadTaskSnapshot) => U | PromiseLike<U>),\n        (onRejected as ((error: any) => PromiseLike<U>) | null));\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(onRejected: (p1: Error) => T | PromiseLike<T>): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private addObserver_(observer: Observer<UploadTaskSnapshot>) {\n    this.observers_.push(observer);\n    this.notifyObserver_(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private removeObserver_(observer: Observer<UploadTaskSnapshot>) {\n    fbsArray.remove(this.observers_, observer);\n  }\n\n  private notifyObservers_() {\n    this.finishPromise_();\n    const observers = fbsArray.clone(this.observers_);\n    observers.forEach((observer) => {\n      this.notifyObserver_(observer);\n    });\n  }\n\n  private finishPromise_() {\n    if (this.resolve_ !== null) {\n      let triggered = true;\n      switch (fbsTaskEnums.taskStateFromInternalTaskState(this.state_)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this.resolve_.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = (this.reject_ as ((p1: Error) => void));\n          fbsAsync(toCall.bind(null, (this.error_ as Error)))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this.resolve_ = null;\n        this.reject_ = null;\n      }\n    }\n  }\n\n  private notifyObserver_(observer: Observer<UploadTaskSnapshot>) {\n    const externalState =\n        fbsTaskEnums.taskStateFromInternalTaskState(this.state_);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next !== null) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete !== null) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error !== null) {\n          fbsAsync(observer.error.bind(observer, (this.error_ as Error)))();\n        }\n        break;\n      default:\n\n        // TODO(andysoto): assert(false);\n        if (observer.error !== null) {\n          fbsAsync(observer.error.bind(observer, (this.error_ as Error)))();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @return True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    fbsArgs.validate('resume', [], arguments);\n    const valid = this.state_ === InternalTaskState.PAUSED ||\n        this.state_ === InternalTaskState.PAUSING;\n    if (valid) {\n      this.transition_(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @return True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    fbsArgs.validate('pause', [], arguments);\n    const valid = this.state_ === InternalTaskState.RUNNING;\n    if (valid) {\n      this.transition_(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @return True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    fbsArgs.validate('cancel', [], arguments);\n    const valid = this.state_ === InternalTaskState.RUNNING ||\n        this.state_ === InternalTaskState.PAUSING;\n    if (valid) {\n      this.transition_(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/task.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Defines the Firebase Storage Reference class.\n */\nimport * as args from './implementation/args';\nimport {AuthWrapper} from './implementation/authwrapper';\nimport {FbsBlob} from './implementation/blob';\nimport * as errorsExports from './implementation/error';\nimport {errors} from './implementation/error';\nimport {Location} from './implementation/location';\nimport * as metadata from './implementation/metadata';\nimport * as object from './implementation/object';\nimport * as path from './implementation/path';\nimport * as requests from './implementation/requests';\nimport * as fbsString from './implementation/string';\nimport {StringFormat} from './implementation/string';\nimport * as type from './implementation/type';\nimport {Metadata} from './metadata';\nimport {Service} from './service';\nimport {UploadTask} from './task';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @param location An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  protected location: Location;\n\n  constructor(protected authWrapper: AuthWrapper, location: string|Location) {\n    if (location instanceof Location) {\n      this.location = location;\n    } else {\n      this.location = Location.makeFromUrl(location);\n    }\n  }\n\n  /**\n   * @return The URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    args.validate('toString', [], arguments);\n    return 'gs://' + this.location.bucket + '/' + this.location.path;\n  }\n\n  protected newRef(authWrapper: AuthWrapper, location: Location): Reference {\n    return new Reference(authWrapper, location);\n  }\n\n  protected mappings(): metadata.Mappings {\n    return metadata.getMappings();\n  }\n\n  /**\n   * @return A reference to the object obtained by\n   *     appending childPath, removing any duplicate, beginning, or trailing\n   *     slashes.\n   */\n  child(childPath: string): Reference {\n    args.validate('child', [args.stringSpec()], arguments);\n    let newPath = path.child(this.location.path, childPath);\n    let location = new Location(this.location.bucket, newPath);\n    return this.newRef(this.authWrapper, location);\n  }\n\n  /**\n   * @return A reference to the parent of the\n   *     current object, or null if the current object is the root.\n   */\n  get parent(): Reference|null {\n    let newPath = path.parent(this.location.path);\n    if (newPath === null) {\n      return null;\n    }\n    let location = new Location(this.location.bucket, newPath);\n    return this.newRef(this.authWrapper, location);\n  }\n\n  /**\n   * @return An reference to the root of this\n   *     object's bucket.\n   */\n  get root(): Reference {\n    let location = new Location(this.location.bucket, '');\n    return this.newRef(this.authWrapper, location);\n  }\n\n  get bucket(): string {\n    return this.location.bucket;\n  }\n\n  get fullPath(): string {\n    return this.location.path;\n  }\n\n  get name(): string {\n    return path.lastComponent(this.location.path);\n  }\n\n  get storage(): Service {\n    return this.authWrapper.service();\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data The blob to upload.\n   * @return An UploadTask that lets you control and\n   *     observe the upload.\n   */\n  put(data: Blob|Uint8Array|ArrayBuffer, metadata: Metadata|null = null): UploadTask {\n    args.validate(\n        'put', [args.uploadDataSpec(), args.metadataSpec(true)], arguments);\n    this.throwIfRoot_('put');\n    return new UploadTask(\n        this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data),\n        metadata);\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param string The string to upload.\n   * @param opt_format The format of the string to upload.\n   * @return An UploadTask that lets you control and\n   *     observe the upload.\n   */\n  putString(string: string, format: StringFormat = StringFormat.RAW, opt_metadata?: Metadata):\n      UploadTask {\n    args.validate(\n        'putString',\n        [\n          args.stringSpec(), args.stringSpec(fbsString.formatValidator, true),\n          args.metadataSpec(true)\n        ],\n        arguments);\n    this.throwIfRoot_('putString');\n    let data = fbsString.dataFromString(format, string);\n    let metadata = object.clone<Metadata>(opt_metadata);\n    if (!type.isDef(metadata['contentType']) && type.isDef(data.contentType)) {\n      metadata['contentType'] = data.contentType;\n    }\n    return new UploadTask(\n        this, this.authWrapper, this.location, this.mappings(),\n        new FbsBlob(data.data, true), metadata);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @return A promise that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    args.validate('delete', [], arguments);\n    this.throwIfRoot_('delete');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.deleteObject(self.authWrapper, self.location);\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   *     A promise that resolves with the metadata for this object. If this\n   *     object doesn't exist or metadata cannot be retreived, the promise is\n   *     rejected.\n   */\n  getMetadata(): Promise<Metadata> {\n    args.validate('getMetadata', [], arguments);\n    this.throwIfRoot_('getMetadata');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.getMetadata(\n          self.authWrapper, self.location, self.mappings());\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata The new metadata for the object.\n   *     Only values that have been explicitly set will be changed. Explicitly\n   *     setting a value to null will remove the metadata.\n   * @return A promise that resolves\n   *     with the new metadata for this object.\n   *     @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(metadata: Metadata): Promise<Metadata> {\n    args.validate('updateMetadata', [args.metadataSpec()], arguments);\n    this.throwIfRoot_('updateMetadata');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.updateMetadata(\n          self.authWrapper, self.location, metadata, self.mappings());\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   * @return A promise that resolves with the download\n   *     URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    args.validate('getDownloadURL', [], arguments);\n    this.throwIfRoot_('getDownloadURL');\n    return this.getMetadata().then(function(metadata) {\n      let url = (metadata['downloadURLs'] as string[])[0];\n      if (type.isDef(url)) {\n        return url;\n      } else {\n        throw errorsExports.noDownloadURL();\n      }\n    });\n  }\n\n  private throwIfRoot_(name: string) {\n    if (this.location.path === '') {\n      throw errorsExports.invalidRootOperation(name);\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/reference.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport {FirebaseStorageError} from './error';\nimport * as promiseimpl from './promise_external';\nimport * as RequestExports from './request';\nimport {Request} from './request';\n\n/**\n * A request whose promise always fails.\n * @struct\n * @template T\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: FirebaseStorageError) {\n    this.promise_ = promiseimpl.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise() {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete = false) {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/failrequest.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as object from './object';\nimport * as RequestExports from './request';\nimport {Request} from './request';\nimport * as constants from './constants';\n\n/**\n * @struct\n */\nexport class RequestMap {\n  private map_: {[key: number]: Request<any>} = {};\n  private id_: number;\n\n  constructor() {\n    this.id_ = constants.minSafeInteger;\n  }\n\n  /**\n   * Registers the given request with this map.\n   * The request is unregistered when it completes.\n   * @param r The request to register.\n   */\n  addRequest(r: Request<any>) {\n    let id = this.id_;\n    this.id_++;\n    this.map_[id] = r;\n    let self = this;\n\n    function unmap() {\n      delete self.map_[id];\n    }\n    r.getPromise().then(unmap, unmap);\n  }\n\n  /**\n   * Cancels all registered requests.\n   */\n  clear() {\n    object.forEach(this.map_, (key: string, val: Request<any>) => {\n      if (val) {\n        val.cancel(true);\n      }\n    });\n    this.map_ = {};\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/requestmap.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport {Reference} from '../reference';\nimport {Service} from '../service';\nimport * as constants from './constants';\nimport * as errorsExports from './error';\nimport {errors} from './error';\nimport {FailRequest} from './failrequest';\nimport {Location} from './location';\nimport * as promiseimpl from './promise_external';\nimport {Request} from './request';\nimport {RequestInfo} from './requestinfo';\nimport {requestMaker} from './requestmaker';\nimport {RequestMap} from './requestmap';\nimport * as type from './type';\nimport {XhrIoPool} from './xhriopool';\nimport { FirebaseApp, FirebaseAuthTokenData } from \"../../app/firebase_app\";\n\n/**\n * @param app If null, getAuthToken always resolves with null.\n * @param service The storage service associated with this auth wrapper.\n *     Untyped to avoid circular type dependencies.\n * @struct\n */\nexport class AuthWrapper {\n  private app_: FirebaseApp|null;\n  private bucket_: string|null = null;\n\n  /**\n  maker\n     */\n  private storageRefMaker_:\n      (p1: AuthWrapper, p2: Location) => Reference;\n  private requestMaker_: requestMaker;\n  private pool_: XhrIoPool;\n  private service_: Service;\n  private maxOperationRetryTime_: number;\n  private maxUploadRetryTime_: number;\n  private requestMap_: RequestMap;\n  private deleted_: boolean = false;\n\n  constructor(\n      app: FirebaseApp|null,\n      maker: (p1: AuthWrapper, p2: Location) => Reference,\n      requestMaker: requestMaker, service: Service,\n      pool: XhrIoPool) {\n    this.app_ = app;\n    if (this.app_ !== null) {\n      let options = this.app_.options;\n      if (type.isDef(options)) {\n        this.bucket_ = AuthWrapper.extractBucket_(options);\n      }\n    }\n    this.storageRefMaker_ = maker;\n    this.requestMaker_ = requestMaker;\n    this.pool_ = pool;\n    this.service_ = service;\n    this.maxOperationRetryTime_ = constants.defaultMaxOperationRetryTime;\n    this.maxUploadRetryTime_ = constants.defaultMaxUploadRetryTime;\n    this.requestMap_ = new RequestMap();\n  }\n\n  private static extractBucket_(config: {[prop: string]: any}): string|null {\n    let bucketString = config[constants.configOption] || null;\n    if (bucketString == null) {\n      return null;\n    }\n    let loc: Location = Location.makeFromBucketSpec(bucketString);\n    return loc.bucket;\n  }\n\n  getAuthToken(): Promise<string|null> {\n    // TODO(andysoto): remove ifDef checks after firebase-app implements stubs\n    // (b/28673818).\n    if (this.app_ !== null && type.isDef(this.app_.INTERNAL) &&\n        type.isDef(this.app_.INTERNAL.getToken)) {\n      return this.app_.INTERNAL.getToken().then(\n          function(response: FirebaseAuthTokenData|null): string|null {\n            if (response !== null) {\n              return response.accessToken;\n            } else {\n              return null;\n            }\n          },\n          function(_error) {\n            return null;\n          });\n    } else {\n      return (promiseimpl.resolve(null) as Promise<string|null>);\n    }\n  }\n\n  bucket(): string|null {\n    if (this.deleted_) {\n      throw errorsExports.appDeleted();\n    } else {\n      return this.bucket_;\n    }\n  }\n\n  /**\n   * The service associated with this auth wrapper. Untyped to avoid circular\n   * type dependencies.\n   */\n  service(): Service {\n    return this.service_;\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this AuthWrapper\n   * at the given Location.\n   * @param loc The Location.\n   * @return Actually a firebaseStorage.Reference, typing not allowed\n   *     because of circular dependency problems.\n   */\n  makeStorageReference(loc: Location): Reference {\n    return this.storageRefMaker_(this, loc);\n  }\n\n  makeRequest<T>(requestInfo: RequestInfo<T>, authToken: string|null): Request<T> {\n    if (!this.deleted_) {\n      let request = this.requestMaker_(\n          requestInfo, authToken, this.pool_);\n      this.requestMap_.addRequest(request);\n      return request;\n    } else {\n      return new FailRequest(errorsExports.appDeleted());\n    }\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  deleteApp() {\n    this.deleted_ = true;\n    this.app_ = null;\n    this.requestMap_.clear();\n  }\n\n  maxUploadRetryTime(): number {\n    return this.maxUploadRetryTime_;\n  }\n\n  setMaxUploadRetryTime(time: number) {\n    this.maxUploadRetryTime_ = time;\n  }\n\n  maxOperationRetryTime(): number {\n    return this.maxOperationRetryTime_;\n  }\n\n  setMaxOperationRetryTime(time: number) {\n    this.maxOperationRetryTime_ = time;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/implementation/authwrapper.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as args from './implementation/args';\nimport {AuthWrapper} from './implementation/authwrapper';\nimport {Location} from './implementation/location';\nimport * as fbsPromiseImpl from './implementation/promise_external';\nimport * as RequestExports from './implementation/request';\nimport {Request} from './implementation/request';\nimport {XhrIoPool} from './implementation/xhriopool';\nimport {Reference} from './reference';\nimport { FirebaseApp } from \"../app/firebase_app\";\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n *\n * @struct\n */\nexport class Service {\n  authWrapper_: AuthWrapper;\n  private app_: FirebaseApp;\n  private bucket_: Location|null = null;\n  private internals_: ServiceInternals;\n\n  constructor(app: FirebaseApp, pool: XhrIoPool, url?: string) {\n    function maker(authWrapper: AuthWrapper, loc: Location) {\n      return new Reference(authWrapper, loc);\n    }\n    this.authWrapper_ =\n        new AuthWrapper(app, maker, RequestExports.makeRequest, this, pool);\n    this.app_ = app;\n    if (url != null) {\n      this.bucket_ = Location.makeFromBucketSpec(url);\n    } else {\n      const authWrapperBucket = this.authWrapper_.bucket();\n      if (authWrapperBucket != null) {\n        this.bucket_ = new Location(authWrapperBucket, '');\n      }\n    }\n    this.internals_ = new ServiceInternals(this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): Reference {\n    function validator(path: string) {\n      if (/^[A-Za-z]+:\\/\\//.test(path)) {\n        throw 'Expected child path but got a URL, use refFromURL instead.';\n      }\n    }\n    args.validate('ref', [args.stringSpec(validator, true)], arguments);\n    if (this.bucket_ == null) {\n      throw new Error('No Storage Bucket defined in Firebase Options.');\n    }\n\n    let ref = new Reference(this.authWrapper_, this.bucket_);\n    if (path != null) {\n      return ref.child(path);\n    } else {\n      return ref;\n    }\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): Reference {\n    function validator(p: string) {\n      if (!/^[A-Za-z]+:\\/\\//.test(p)) {\n        throw 'Expected full URL but got a child path, use ref instead.';\n      }\n      try {\n        Location.makeFromUrl(p);\n      } catch (e) {\n        throw 'Expected valid full URL but got an invalid one.';\n      }\n    }\n    args.validate('refFromURL', [args.stringSpec(validator, false)], arguments);\n    return new Reference(this.authWrapper_, url);\n  }\n\n  get maxUploadRetryTime(): number {\n    return this.authWrapper_.maxUploadRetryTime();\n  }\n\n  setMaxUploadRetryTime(time: number) {\n    args.validate(\n        'setMaxUploadRetryTime', [args.nonNegativeNumberSpec()], arguments);\n    this.authWrapper_.setMaxUploadRetryTime(time);\n  }\n\n  get maxOperationRetryTime(): number {\n    return this.authWrapper_.maxOperationRetryTime();\n  }\n\n  setMaxOperationRetryTime(time: number) {\n    args.validate(\n        'setMaxOperationRetryTime', [args.nonNegativeNumberSpec()], arguments);\n    this.authWrapper_.setMaxOperationRetryTime(time);\n  }\n\n  get app(): FirebaseApp {\n    return this.app_;\n  }\n\n  get INTERNAL(): ServiceInternals {\n    return this.internals_;\n  }\n}\n\n/**\n * @struct\n */\nexport class ServiceInternals {\n  service_: Service;\n\n  constructor(service: Service) {\n    this.service_ = service;\n  }\n\n  /**\n   * Called when the associated app is deleted.\n   * @see {!fbs.AuthWrapper.prototype.deleteApp}\n   */\n  delete(): Promise<void> {\n    this.service_.authWrapper_.deleteApp();\n    return fbsPromiseImpl.resolve<void>(undefined);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage/service.ts"],"sourceRoot":""}