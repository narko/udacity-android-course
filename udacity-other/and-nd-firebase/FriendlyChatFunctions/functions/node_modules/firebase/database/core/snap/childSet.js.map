{"version":3,"sources":["database/src/database/core/snap/childSet.ts"],"names":["LOG_2","Math","log","Base12Num","length","logBase2","num","parseInt","bitMask","bits","Array","join","count","current_","mask","bits_","prototype","nextBitIsOne","result","buildChildSet","childList","cmp","keyFn","mapSortFn","sort","buildBalancedTree","low","high","namedNode","key","node","BLACK","middle","left","right","buildFrom12Array","base12","root","index","buildPennant","chunkSize","color","childTree","attachPennant","pennant","i","isOne","pow","RED"],"mappings":"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","file":"childSet.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { LLRBNode } from '../util/SortedMap';\nimport { SortedMap } from '../util/SortedMap';\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\n/**\n * @constructor\n */\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  /**\n   * @param {number} length\n   */\n  constructor(length: number) {\n    const logBase2 = (num: number) => parseInt((Math.log(num) / LOG_2 as any), 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @template K, V\n * @param {Array.<!NamedNode>} childList Unsorted list of children\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\n *                                                        type is not NamedNode\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\n * @return {SortedMap.<K, V>}\n */\nexport const buildChildSet = function<K,V>(childList: NamedNode[],\n                                           cmp: (a: NamedNode, b: NamedNode) => number,\n                                           keyFn?: (a: NamedNode) => K,\n                                           mapSortFn?: (a: K, b: K) => number): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function(low: number, high: number): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length == 0) {\n      return null;\n    } else if (length == 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode as any as K;\n      return new LLRBNode(key, namedNode.node as any as V, LLRBNode.BLACK, null, null);\n    } else {\n      const middle = parseInt((length / 2 as any), 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode as any as K;\n      return new LLRBNode(key, namedNode.node as any as V, LLRBNode.BLACK, left, right);\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : namedNode as any as K;\n      attachPennant(new LLRBNode(key, namedNode.node as any as V, color, null, childTree));\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};"]}