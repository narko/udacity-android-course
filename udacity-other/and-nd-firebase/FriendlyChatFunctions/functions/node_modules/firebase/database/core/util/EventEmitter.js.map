{"version":3,"sources":["database/src/database/core/util/EventEmitter.ts","database/core/util/EventEmitter.js"],"names":["EventEmitter","allowedEvents_","listeners_","Array","isArray","length","prototype","trigger","eventType","var_args","_i","arguments","listeners","slice","i","callback","apply","context","on","validateEventType_","push","eventData","getInitialEvent","off","splice","find","et"],"mappings":";;;;;;;AAgBA;;AAEA;;;;AAIA,IAAAA,eAAA,YAAA;AAGE;;;AAGA,aAAAA,YAAA,CAAoBC,cAApB,EAAiD;AAA7B,aAAAA,cAAA,GAAAA,cAAA;AALZ,aAAAC,UAAA,GAA+F,EAA/F;AAMN,4BAAOC,MAAMC,OAAN,CAAcH,cAAd,KAAiCA,eAAeI,MAAf,GAAwB,CAAhE,EACE,4BADF;AAED;AAWD;;;;;AAKUL,iBAAAM,SAAA,CAAAC,OAAA,GAAV,UAAkBC,SAAlB,EAAmC;AAAE,YAAAC,WAAA,EAAA;ACX/B,aDW+B,IAAAC,KAAA,CCX/B,EDW+BA,KAAAC,UAAAN,MCX/B,EDW+BK,ICX/B,EDWiD;AAAlBD,qBAAAC,KAAA,CAAA,IAAAC,UAAAD,EAAA,CAAA;ACT9B;ADUL,YAAIP,MAAMC,OAAN,CAAc,KAAKF,UAAL,CAAgBM,SAAhB,CAAd,CAAJ,EAA+C;AAC7C;AACA,gBAAMI,YACD,KAAKV,UAAL,CAAgBM,SAAhB,EAA0BK,KAA1B,EADL;AAIA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,UAAUP,MAA9B,EAAsCS,GAAtC,EAA2C;AACzCF,0BAAUE,CAAV,EAAaC,QAAb,CAAsBC,KAAtB,CAA4BJ,UAAUE,CAAV,EAAaG,OAAzC,EAAkDR,QAAlD;AACD;AACF;AACF,KAXS;AAaVT,iBAAAM,SAAA,CAAAY,EAAA,GAAA,UAAGV,SAAH,EAAsBO,QAAtB,EAAkDE,OAAlD,EAA8D;AAC5D,aAAKE,kBAAL,CAAwBX,SAAxB;AACA,aAAKN,UAAL,CAAgBM,SAAhB,IAA6B,KAAKN,UAAL,CAAgBM,SAAhB,KAA8B,EAA3D;AACA,aAAKN,UAAL,CAAgBM,SAAhB,EAA2BY,IAA3B,CAAgC,EAACL,UAAQA,QAAT,EAAWE,SAAOA,OAAlB,EAAhC;AAEA,YAAMI,YAAY,KAAKC,eAAL,CAAqBd,SAArB,CAAlB;AACA,YAAIa,SAAJ,EAAe;AACbN,qBAASC,KAAT,CAAeC,OAAf,EAAwBI,SAAxB;AACD;AACF,KATD;AAWArB,iBAAAM,SAAA,CAAAiB,GAAA,GAAA,UAAIf,SAAJ,EAAuBO,QAAvB,EAAmDE,OAAnD,EAA+D;AAC7D,aAAKE,kBAAL,CAAwBX,SAAxB;AACA,YAAMI,YAAY,KAAKV,UAAL,CAAgBM,SAAhB,KAA8B,EAAhD;AACA,aAAK,IAAIM,IAAI,CAAb,EAAgBA,IAAIF,UAAUP,MAA9B,EAAsCS,GAAtC,EAA2C;AACzC,gBAAIF,UAAUE,CAAV,EAAaC,QAAb,KAA0BA,QAA1B,KAAuC,CAACE,OAAD,IAAYA,YAAYL,UAAUE,CAAV,EAAaG,OAA5E,CAAJ,EAA0F;AACxFL,0BAAUY,MAAV,CAAiBV,CAAjB,EAAoB,CAApB;AACA;AACD;AACF;AACF,KATD;AAWQd,iBAAAM,SAAA,CAAAa,kBAAA,GAAR,UAA2BX,SAA3B,EAA4C;AAC1C,4BAAO,KAAKP,cAAL,CAAoBwB,IAApB,CAAyB,UAAUC,EAAV,EAAY;AACxC,mBAAOA,OAAOlB,SAAd;AACD,SAFI,CAAP,EAGE,oBAAoBA,SAHtB;AAKD,KANO;AAOV,WAAAR,YAAA;AAnEA,CAAA,EAAA,C,CAtBA;;;;;;;;;;;;;;;QCyESA,Y,GAAAA,Y","file":"EventEmitter.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: { [eventType: string]: Array<{ callback(...args: any[]): void, context: any }> } = {};\n\n  /**\n   * @param {!Array.<string>} allowedEvents_\n   */\n  constructor(private allowedEvents_: Array<string>) {\n    assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array');\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @param {!string} eventType\n   * @return {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): any[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   * @param {!string} eventType\n   * @param {...*} var_args\n   */\n  protected trigger(eventType: string, ...var_args: any[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [\n        ...this.listeners_[eventType]\n      ];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, var_args);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: any) => void, context: any) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({callback, context});\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: any) => void, context: any) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(this.allowedEvents_.find(function (et) {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { assert } from '../../../utils/assert';\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nvar EventEmitter = (function () {\n    /**\n     * @param {!Array.<string>} allowedEvents_\n     */\n    function EventEmitter(allowedEvents_) {\n        this.allowedEvents_ = allowedEvents_;\n        this.listeners_ = {};\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n    }\n    /**\n     * To be called by derived classes to trigger events.\n     * @param {!string} eventType\n     * @param {...*} var_args\n     */\n    EventEmitter.prototype.trigger = function (eventType) {\n        var var_args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            var_args[_i - 1] = arguments[_i];\n        }\n        if (Array.isArray(this.listeners_[eventType])) {\n            // Clone the list, since callbacks could add/remove listeners.\n            var listeners = this.listeners_[eventType].slice();\n            for (var i = 0; i < listeners.length; i++) {\n                listeners[i].callback.apply(listeners[i].context, var_args);\n            }\n        }\n    };\n    EventEmitter.prototype.on = function (eventType, callback, context) {\n        this.validateEventType_(eventType);\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\n        this.listeners_[eventType].push({ callback: callback, context: context });\n        var eventData = this.getInitialEvent(eventType);\n        if (eventData) {\n            callback.apply(context, eventData);\n        }\n    };\n    EventEmitter.prototype.off = function (eventType, callback, context) {\n        this.validateEventType_(eventType);\n        var listeners = this.listeners_[eventType] || [];\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n                listeners.splice(i, 1);\n                return;\n            }\n        }\n    };\n    EventEmitter.prototype.validateEventType_ = function (eventType) {\n        assert(this.allowedEvents_.find(function (et) {\n            return et === eventType;\n        }), 'Unknown event: ' + eventType);\n    };\n    return EventEmitter;\n}());\nexport { EventEmitter };\n\n\n"]}