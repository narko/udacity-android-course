{"version":3,"sources":["database/src/database/core/view/ViewCache.ts","database/core/view/ViewCache.js"],"names":["ViewCache","eventCache_","serverCache_","prototype","updateEventSnap","eventSnap","complete","filtered","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","isFullyInitialized","getNode","getServerCache","getCompleteServerSnap","Empty","EMPTY_NODE"],"mappings":";;;;;;;AAgBA;;AACA;;AAGA;;;;;;;AApBA;;;;;;;;;;;;;;;AA2BA,IAAAA,YAAA,YAAA;AACE;;;;;AAKA,WAAAA,SAAA,CAA6BC,WAA7B,EAC6BC,YAD7B,EACoD;AADvB,SAAAD,WAAA,GAAAA,WAAA;AACA,SAAAC,YAAA,GAAAA,YAAA;AAC5B;AAWD;;;;;;AAMAF,YAAAG,SAAA,CAAAC,eAAA,GAAA,UAAgBC,SAAhB,EAAiCC,QAAjC,EAAoDC,QAApD,EAAqE;AACnE,WAAO,IAAIP,SAAJ,CAAc,yBAAcK,SAAd,EAAyBC,QAAzB,EAAmCC,QAAnC,CAAd,EAA4D,KAAKL,YAAjE,CAAP;AACD,GAFD;AAIA;;;;;;AAMAF,YAAAG,SAAA,CAAAK,gBAAA,GAAA,UAAiBC,UAAjB,EAAmCH,QAAnC,EAAsDC,QAAtD,EAAuE;AACrE,WAAO,IAAIP,SAAJ,CAAc,KAAKC,WAAnB,EAAgC,yBAAcQ,UAAd,EAA0BH,QAA1B,EAAoCC,QAApC,CAAhC,CAAP;AACD,GAFD;AAIA;;;AAGAP,YAAAG,SAAA,CAAAO,aAAA,GAAA,YAAA;AACE,WAAO,KAAKT,WAAZ;AACD,GAFD;AAIA;;;AAGAD,YAAAG,SAAA,CAAAQ,oBAAA,GAAA,YAAA;AACE,WAAQ,KAAKV,WAAL,CAAiBW,kBAAjB,EAAD,GAA0C,KAAKX,WAAL,CAAiBY,OAAjB,EAA1C,GAAuE,IAA9E;AACD,GAFD;AAIA;;;AAGAb,YAAAG,SAAA,CAAAW,cAAA,GAAA,YAAA;AACE,WAAO,KAAKZ,YAAZ;AACD,GAFD;AAIA;;;AAGAF,YAAAG,SAAA,CAAAY,qBAAA,GAAA,YAAA;AACE,WAAO,KAAKb,YAAL,CAAkBU,kBAAlB,KAAyC,KAAKV,YAAL,CAAkBW,OAAlB,EAAzC,GAAuE,IAA9E;AACD,GAFD;AAGF,SAAAb,SAAA;AAlEA,CAAA,EAAA;QCmDSA,S,GAAAA,S;ADzCP;;;;;AAIOA,UAAAgB,KAAA,GAAQ,IAAIhB,SAAJ,CACb,yBAAc,2BAAaiB,UAA3B,EAAuC,qBAAqB,KAA5D,EAAmE,aAAa,KAAhF,CADa,EAEb,yBAAc,2BAAaA,UAA3B,EAAuC,qBAAqB,KAA5D,EAAmE,aAAa,KAAhF,CAFa,CAAR","file":"ViewCache.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { Node } from '../snap/Node';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nexport class ViewCache {\n  /**\n   *\n   * @param {!CacheNode} eventCache_\n   * @param {!CacheNode} serverCache_\n   */\n  constructor(private readonly eventCache_: CacheNode,\n              private readonly serverCache_: CacheNode) {\n  }\n\n  /**\n   * @const\n   * @type {ViewCache}\n   */\n  static Empty = new ViewCache(\n    new CacheNode(ChildrenNode.EMPTY_NODE, /*fullyInitialized=*/false, /*filtered=*/false),\n    new CacheNode(ChildrenNode.EMPTY_NODE, /*fullyInitialized=*/false, /*filtered=*/false)\n  );\n\n  /**\n   * @param {!Node} eventSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateEventSnap(eventSnap: Node, complete: boolean, filtered: boolean): ViewCache {\n    return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\n  }\n\n  /**\n   * @param {!Node} serverSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateServerSnap(serverSnap: Node, complete: boolean, filtered: boolean): ViewCache {\n    return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getEventCache(): CacheNode {\n    return this.eventCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteEventSnap(): Node | null {\n    return (this.eventCache_.isFullyInitialized()) ? this.eventCache_.getNode() : null;\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getServerCache(): CacheNode {\n    return this.serverCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteServerSnap(): Node | null {\n    return this.serverCache_.isFullyInitialized() ? this.serverCache_.getNode() : null;\n  }\n}\n\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nvar ViewCache = (function () {\n    /**\n     *\n     * @param {!CacheNode} eventCache_\n     * @param {!CacheNode} serverCache_\n     */\n    function ViewCache(eventCache_, serverCache_) {\n        this.eventCache_ = eventCache_;\n        this.serverCache_ = serverCache_;\n    }\n    /**\n     * @param {!Node} eventSnap\n     * @param {boolean} complete\n     * @param {boolean} filtered\n     * @return {!ViewCache}\n     */\n    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\n        return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\n    };\n    /**\n     * @param {!Node} serverSnap\n     * @param {boolean} complete\n     * @param {boolean} filtered\n     * @return {!ViewCache}\n     */\n    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\n        return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\n    };\n    /**\n     * @return {!CacheNode}\n     */\n    ViewCache.prototype.getEventCache = function () {\n        return this.eventCache_;\n    };\n    /**\n     * @return {?Node}\n     */\n    ViewCache.prototype.getCompleteEventSnap = function () {\n        return (this.eventCache_.isFullyInitialized()) ? this.eventCache_.getNode() : null;\n    };\n    /**\n     * @return {!CacheNode}\n     */\n    ViewCache.prototype.getServerCache = function () {\n        return this.serverCache_;\n    };\n    /**\n     * @return {?Node}\n     */\n    ViewCache.prototype.getCompleteServerSnap = function () {\n        return this.serverCache_.isFullyInitialized() ? this.serverCache_.getNode() : null;\n    };\n    return ViewCache;\n}());\nexport { ViewCache };\n/**\n * @const\n * @type {ViewCache}\n */\nViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, /*fullyInitialized=*/ false, /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, /*fullyInitialized=*/ false, /*filtered=*/ false));\n\n\n"]}