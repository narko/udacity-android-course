{"version":3,"sources":["src/database/core/WriteTree.ts","database/core/WriteTree.js"],"names":["WriteTree","visibleWrites_","Empty","allWrites_","lastWriteId_","prototype","childWrites","path","WriteTreeRef","addOverwrite","snap","writeId","visible","undefined","push","addWrite","addMerge","changedChildren","children","addWrites","getWrite","i","length","record","removeWrite","_this","idx","findIndex","s","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","contains","resetTree_","childName","child","getCompleteWriteData","getCompleteNode","calcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","shadowingNode","subMerge","childCompoundWrite","isEmpty","hasCompleteWrite","layeredCache","EMPTY_NODE","apply","merge","filter","write","indexOf","mergeAtPath","layerTree_","calcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","isLeafNode","forEachChild","childSnap","updateImmediateChild","merge_1","childNode","node","getCompleteChildren","forEach","namedNode","name","calcEventCacheAfterServerOverwrite","childPath","existingEventSnap","existingServerSnap","childMerge","getChild","calcCompleteChild","childKey","isCompleteForChild","getNode","getImmediateChild","shadowingWrite","calcIndexedSlice","completeServerData","startPost","count","reverse","index","toIterate","withIndex","nodes","cmp","getCompare","iter","getReverseIteratorFrom","getIteratorFrom","next","getNext","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","writePath","relativePath","getFront","deepNode","popFront","writeTree","treePath_","writeTree_","existingServerCache"],"mappings":"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","file":"WriteTree.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { findKey, forEach, safeGet } from '../../utils/obj';\nimport { assert, assertionError } from '../../utils/assert';\nimport { Path } from './util/Path';\nimport { CompoundWrite } from './CompoundWrite';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { NamedNode, Node } from './snap/Node';\nimport { CacheNode } from './view/CacheNode';\nimport { Index } from './snap/indexes/Index';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nexport class WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   *\n   * @type {!CompoundWrite}\n   * @private\n   */\n  private visibleWrites_: CompoundWrite = CompoundWrite.Empty;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   *\n   * @type {!Array.<!WriteRecord>}\n   * @private\n   */\n  private allWrites_: WriteRecord[] = [];\n\n  private lastWriteId_ = -1;\n\n  /**\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n   *\n   * @param {!Path} path\n   * @return {!WriteTreeRef}\n   */\n  childWrites(path: Path): WriteTreeRef {\n    return new WriteTreeRef(path, this);\n  }\n\n  /**\n   * Record a new overwrite from user code.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} writeId\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n   */\n  addOverwrite(path: Path, snap: Node, writeId: number, visible?: boolean) {\n    assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\n    if (visible === undefined) {\n      visible = true;\n    }\n    this.allWrites_.push({path: path, snap: snap, writeId: writeId, visible: visible});\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * Record a new merge from user code.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   */\n  addMerge(path: Path, changedChildren: { [k: string]: Node }, writeId: number) {\n    assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\n    this.allWrites_.push({path: path, children: changedChildren, writeId: writeId, visible: true});\n\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  }\n\n\n  /**\n   * @param {!number} writeId\n   * @return {?WriteRecord}\n   */\n  getWrite(writeId: number): WriteRecord | null {\n    for (let i = 0; i < this.allWrites_.length; i++) {\n      const record = this.allWrites_[i];\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n   *\n   * @param {!number} writeId\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n   * events as a result).\n   */\n  removeWrite(writeId: number): boolean {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n    const idx = this.allWrites_.findIndex(function (s) { return s.writeId === writeId; });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n\n    let i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      const currentWrite = this.allWrites_[i];\n      if (currentWrite.visible) {\n        if (i >= idx && this.recordContainsPath_(currentWrite, writeToRemove.path)) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\n      } else {\n        const children = writeToRemove.children;\n        forEach(children, (childName: string) => {\n          this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\n        });\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n   * No server data is considered.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteWriteData(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n   * writes), attempt to calculate a complete snapshot for the given path\n   *\n   * @param {!Path} treePath\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(treePath: Path, completeServerCache: Node | null, writeIdsToExclude?: number[],\n                         includeHiddenWrites?: boolean): Node | null {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      const shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        const subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (completeServerCache == null && !subMerge.hasCompleteWrite(Path.Empty)) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (!includeHiddenWrites && completeServerCache == null && !merge.hasCompleteWrite(Path.Empty)) {\n          return null;\n        } else {\n          const filter = function (write: WriteRecord) {\n            return (write.visible || includeHiddenWrites) &&\n              (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) &&\n              (write.path.contains(treePath) || treePath.contains(write.path));\n          };\n          const mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  }\n\n  /**\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n   * Used when creating new views, to pre-fill their complete event children snapshot.\n   *\n   * @param {!Path} treePath\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(treePath: Path, completeServerChildren: ChildrenNode | null) {\n    let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n    const topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\n          completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n        });\n      }\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n        const node = merge.childCompoundWrite(new Path(childName)).apply(childNode);\n        completeChildren = completeChildren.updateImmediateChild(childName, node);\n      });\n      // Add any complete children we have from the set\n      merge.getCompleteChildren().forEach(function (namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(function (namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n      });\n      return completeChildren;\n    }\n  }\n\n  /**\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\n   * applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events\n   *\n   * Either existingEventSnap or existingServerSnap must exist\n   *\n   * @param {!Path} treePath\n   * @param {!Path} childPath\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(treePath: Path, childPath: Path, existingEventSnap: Node | null,\n                                     existingServerSnap: Node | null): Node | null {\n    assert(existingEventSnap || existingServerSnap,\n      'Either existingEventSnap or existingServerSnap must exist');\n    const path = treePath.child(childPath);\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      const childMerge = this.visibleWrites_.childCompoundWrite(path);\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!Path} treePath\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerSnap\n   * @return {?Node}\n   */\n  calcCompleteChild(treePath: Path, childKey: string, existingServerSnap: CacheNode): Node | null {\n    const path = treePath.child(childKey);\n    const shadowingNode = this.visibleWrites_.getCompleteNode(path);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        const childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window.\n   *\n   * @param {!Path} treePath\n   * @param {?Node} completeServerData\n   * @param {!NamedNode} startPost\n   * @param {!number} count\n   * @param {boolean} reverse\n   * @param {!Index} index\n   * @return {!Array.<!NamedNode>}\n   */\n  calcIndexedSlice(treePath: Path, completeServerData: Node | null, startPost: NamedNode, count: number,\n                   reverse: boolean, index: Index): NamedNode[] {\n    let toIterate: Node;\n    const merge = this.visibleWrites_.childCompoundWrite(treePath);\n    const shadowingNode = merge.getCompleteNode(Path.Empty);\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      const nodes = [];\n      const cmp = index.getCompare();\n      const iter = reverse ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index) :\n          (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n      let next = iter.getNext();\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n        next = iter.getNext();\n      }\n      return nodes;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * @param {!WriteRecord} writeRecord\n   * @param {!Path} path\n   * @return {boolean}\n   * @private\n   */\n  private recordContainsPath_(writeRecord: WriteRecord, path: Path): boolean {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      // findKey can return undefined, so use !! to coerce to boolean\n      return !!findKey(writeRecord.children, function (childSnap: Node, childName: string) {\n        return writeRecord.path.child(childName).contains(path);\n      });\n    }\n  }\n\n  /**\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n   * @private\n   */\n  private resetTree_() {\n    this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_,\n      Path.Empty);\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  }\n\n  /**\n   * The default filter used when constructing the tree. Keep everything that's visible.\n   *\n   * @param {!WriteRecord} write\n   * @return {boolean}\n   * @private\n   */\n  private static DefaultFilter_(write: WriteRecord) {\n    return write.visible;\n  }\n\n  /**\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n   * event data at that path.\n   *\n   * @param {!Array.<!WriteRecord>} writes\n   * @param {!function(!WriteRecord):boolean} filter\n   * @param {!Path} treeRoot\n   * @return {!CompoundWrite}\n   * @private\n   */\n  private static layerTree_(writes: WriteRecord[], filter: (w: WriteRecord) => boolean, treeRoot: Path): CompoundWrite {\n    let compoundWrite = CompoundWrite.Empty;\n    for (let i = 0; i < writes.length; ++i) {\n      const write = writes[i];\n      // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n      if (filter(write)) {\n        const writePath = write.path;\n        let relativePath;\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(relativePath, write.children);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\n            } else {\n              const child = safeGet(write.children, relativePath.getFront());\n              if (child) {\n                // There exists a child in this node that matches the root path\n                const deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else {\n          throw assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n    return compoundWrite;\n  }\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nexport class WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   *\n   * @type {!Path}\n   * @private\n   * @const\n   */\n  private readonly treePath_: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   *\n   * @type {!WriteTree}\n   * @private\n   * @const\n   */\n  private readonly writeTree_: WriteTree;\n\n  /**\n   * @param {!Path} path\n   * @param {!WriteTree} writeTree\n   */\n  constructor(path: Path, writeTree: WriteTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n\n  /**\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n   * can lead to a more expensive calculation.\n   *\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(completeServerCache: Node | null, writeIdsToExclude?: number[],\n                         includeHiddenWrites?: boolean): Node | null {\n    return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude,\n      includeHiddenWrites);\n  }\n\n  /**\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n   * mix of the given server data and write data.\n   *\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(completeServerChildren: ChildrenNode | null): ChildrenNode {\n    return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren) as ChildrenNode;\n  }\n\n  /**\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n   * if anything, needs to be applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events should be raised\n   *\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n   *\n   * @param {!Path} path\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(path: Path, existingEventSnap: Node | null,\n                                     existingServerSnap: Node | null): Node | null {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window\n   *\n   * @param {?Node} completeServerData\n   * @param {!NamedNode} startPost\n   * @param {!number} count\n   * @param {boolean} reverse\n   * @param {!Index} index\n   * @return {!Array.<!NamedNode>}\n   */\n  calcIndexedSlice(completeServerData: Node | null, startPost: NamedNode, count: number,\n                   reverse: boolean, index: Index): NamedNode[] {\n    return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerCache\n   * @return {?Node}\n   */\n  calcCompleteChild(childKey: string, existingServerCache: CacheNode): Node | null {\n    return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\n  }\n\n  /**\n   * Return a WriteTreeRef for a child.\n   *\n   * @param {string} childName\n   * @return {!WriteTreeRef}\n   */\n  child(childName: string): WriteTreeRef {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { findKey, forEach, safeGet } from '../../utils/obj';\nimport { assert, assertionError } from '../../utils/assert';\nimport { Path } from './util/Path';\nimport { CompoundWrite } from './CompoundWrite';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { ChildrenNode } from './snap/ChildrenNode';\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nvar WriteTree = (function () {\n    function WriteTree() {\n        /**\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\n         * applyLocally=false or writes that are completely shadowed by other writes.\n         *\n         * @type {!CompoundWrite}\n         * @private\n         */\n        this.visibleWrites_ = CompoundWrite.Empty;\n        /**\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n         * used by transactions).\n         *\n         * @type {!Array.<!WriteRecord>}\n         * @private\n         */\n        this.allWrites_ = [];\n        this.lastWriteId_ = -1;\n    }\n    /**\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n     *\n     * @param {!Path} path\n     * @return {!WriteTreeRef}\n     */\n    WriteTree.prototype.childWrites = function (path) {\n        return new WriteTreeRef(path, this);\n    };\n    /**\n     * Record a new overwrite from user code.\n     *\n     * @param {!Path} path\n     * @param {!Node} snap\n     * @param {!number} writeId\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n     */\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\n        assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\n        if (visible === undefined) {\n            visible = true;\n        }\n        this.allWrites_.push({ path: path, snap: snap, writeId: writeId, visible: visible });\n        if (visible) {\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n        }\n        this.lastWriteId_ = writeId;\n    };\n    /**\n     * Record a new merge from user code.\n     *\n     * @param {!Path} path\n     * @param {!Object.<string, !Node>} changedChildren\n     * @param {!number} writeId\n     */\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\n        assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\n        this.allWrites_.push({ path: path, children: changedChildren, writeId: writeId, visible: true });\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n        this.lastWriteId_ = writeId;\n    };\n    /**\n     * @param {!number} writeId\n     * @return {?WriteRecord}\n     */\n    WriteTree.prototype.getWrite = function (writeId) {\n        for (var i = 0; i < this.allWrites_.length; i++) {\n            var record = this.allWrites_[i];\n            if (record.writeId === writeId) {\n                return record;\n            }\n        }\n        return null;\n    };\n    /**\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n     *\n     * @param {!number} writeId\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n     * events as a result).\n     */\n    WriteTree.prototype.removeWrite = function (writeId) {\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n        // out of order.\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n        var _this = this;\n        var idx = this.allWrites_.findIndex(function (s) { return s.writeId === writeId; });\n        assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n        var writeToRemove = this.allWrites_[idx];\n        this.allWrites_.splice(idx, 1);\n        var removedWriteWasVisible = writeToRemove.visible;\n        var removedWriteOverlapsWithOtherWrites = false;\n        var i = this.allWrites_.length - 1;\n        while (removedWriteWasVisible && i >= 0) {\n            var currentWrite = this.allWrites_[i];\n            if (currentWrite.visible) {\n                if (i >= idx && this.recordContainsPath_(currentWrite, writeToRemove.path)) {\n                    // The removed write was completely shadowed by a subsequent write.\n                    removedWriteWasVisible = false;\n                }\n                else if (writeToRemove.path.contains(currentWrite.path)) {\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\n                    removedWriteOverlapsWithOtherWrites = true;\n                }\n            }\n            i--;\n        }\n        if (!removedWriteWasVisible) {\n            return false;\n        }\n        else if (removedWriteOverlapsWithOtherWrites) {\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\n            this.resetTree_();\n            return true;\n        }\n        else {\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n            if (writeToRemove.snap) {\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\n            }\n            else {\n                var children = writeToRemove.children;\n                forEach(children, function (childName) {\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\n                });\n            }\n            return true;\n        }\n    };\n    /**\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n     * No server data is considered.\n     *\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    WriteTree.prototype.getCompleteWriteData = function (path) {\n        return this.visibleWrites_.getCompleteNode(path);\n    };\n    /**\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n     * writes), attempt to calculate a complete snapshot for the given path\n     *\n     * @param {!Path} treePath\n     * @param {?Node} completeServerCache\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n     * @return {?Node}\n     */\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n        if (!writeIdsToExclude && !includeHiddenWrites) {\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n            if (shadowingNode != null) {\n                return shadowingNode;\n            }\n            else {\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n                if (subMerge.isEmpty()) {\n                    return completeServerCache;\n                }\n                else if (completeServerCache == null && !subMerge.hasCompleteWrite(Path.Empty)) {\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n                    return null;\n                }\n                else {\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n                    return subMerge.apply(layeredCache);\n                }\n            }\n        }\n        else {\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\n            if (!includeHiddenWrites && merge.isEmpty()) {\n                return completeServerCache;\n            }\n            else {\n                // If the server cache is null, and we don't have a complete cache, we need to return null\n                if (!includeHiddenWrites && completeServerCache == null && !merge.hasCompleteWrite(Path.Empty)) {\n                    return null;\n                }\n                else {\n                    var filter = function (write) {\n                        return (write.visible || includeHiddenWrites) &&\n                            (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) &&\n                            (write.path.contains(treePath) || treePath.contains(write.path));\n                    };\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n                    return mergeAtPath.apply(layeredCache);\n                }\n            }\n        }\n    };\n    /**\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n     * Used when creating new views, to pre-fill their complete event children snapshot.\n     *\n     * @param {!Path} treePath\n     * @param {?ChildrenNode} completeServerChildren\n     * @return {!ChildrenNode}\n     */\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\n        var completeChildren = ChildrenNode.EMPTY_NODE;\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n        if (topLevelSet) {\n            if (!topLevelSet.isLeafNode()) {\n                // we're shadowing everything. Return the children.\n                topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n                });\n            }\n            return completeChildren;\n        }\n        else if (completeServerChildren) {\n            // Layer any children we have on top of this\n            // We know we don't have a top-level set, so just enumerate existing children\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\n            completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n                var node = merge_1.childCompoundWrite(new Path(childName)).apply(childNode);\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\n            });\n            // Add any complete children we have from the set\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n            });\n            return completeChildren;\n        }\n        else {\n            // We don't have anything to layer on top of. Layer on any children we have\n            // Note that we can return an empty snap if we have a defined delete\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\n            merge.getCompleteChildren().forEach(function (namedNode) {\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n            });\n            return completeChildren;\n        }\n    };\n    /**\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\n     * applied to the event cache.\n     *\n     * Possibilities:\n     *\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n     *\n     * 2. Some write is completely shadowing. No events to be raised\n     *\n     * 3. Is partially shadowed. Events\n     *\n     * Either existingEventSnap or existingServerSnap must exist\n     *\n     * @param {!Path} treePath\n     * @param {!Path} childPath\n     * @param {?Node} existingEventSnap\n     * @param {?Node} existingServerSnap\n     * @return {?Node}\n     */\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\n        assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n        var path = treePath.child(childPath);\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\n            // At this point we can probably guarantee that we're in case 2, meaning no events\n            // May need to check visibility while doing the findRootMostValueAndPath call\n            return null;\n        }\n        else {\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\n            if (childMerge.isEmpty()) {\n                // We're not shadowing at all. Case 1\n                return existingServerSnap.getChild(childPath);\n            }\n            else {\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n                // However this is tricky to find out, since user updates don't necessary change the server\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n                // only check if the updates change the serverNode.\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n                return childMerge.apply(existingServerSnap.getChild(childPath));\n            }\n        }\n    };\n    /**\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\n     * complete child for this ChildKey.\n     *\n     * @param {!Path} treePath\n     * @param {!string} childKey\n     * @param {!CacheNode} existingServerSnap\n     * @return {?Node}\n     */\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\n        var path = treePath.child(childKey);\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\n        if (shadowingNode != null) {\n            return shadowingNode;\n        }\n        else {\n            if (existingServerSnap.isCompleteForChild(childKey)) {\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\n            }\n            else {\n                return null;\n            }\n        }\n    };\n    /**\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n     * a higher path, this will return the child of that write relative to the write and this path.\n     * Returns null if there is no write at this path.\n     *\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    WriteTree.prototype.shadowingWrite = function (path) {\n        return this.visibleWrites_.getCompleteNode(path);\n    };\n    /**\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n     * the window, but may now be in the window.\n     *\n     * @param {!Path} treePath\n     * @param {?Node} completeServerData\n     * @param {!NamedNode} startPost\n     * @param {!number} count\n     * @param {boolean} reverse\n     * @param {!Index} index\n     * @return {!Array.<!NamedNode>}\n     */\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\n        var toIterate;\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\n        var shadowingNode = merge.getCompleteNode(Path.Empty);\n        if (shadowingNode != null) {\n            toIterate = shadowingNode;\n        }\n        else if (completeServerData != null) {\n            toIterate = merge.apply(completeServerData);\n        }\n        else {\n            // no children to iterate on\n            return [];\n        }\n        toIterate = toIterate.withIndex(index);\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n            var nodes = [];\n            var cmp = index.getCompare();\n            var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) :\n                toIterate.getIteratorFrom(startPost, index);\n            var next = iter.getNext();\n            while (next && nodes.length < count) {\n                if (cmp(next, startPost) !== 0) {\n                    nodes.push(next);\n                }\n                next = iter.getNext();\n            }\n            return nodes;\n        }\n        else {\n            return [];\n        }\n    };\n    /**\n     * @param {!WriteRecord} writeRecord\n     * @param {!Path} path\n     * @return {boolean}\n     * @private\n     */\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\n        if (writeRecord.snap) {\n            return writeRecord.path.contains(path);\n        }\n        else {\n            // findKey can return undefined, so use !! to coerce to boolean\n            return !!findKey(writeRecord.children, function (childSnap, childName) {\n                return writeRecord.path.child(childName).contains(path);\n            });\n        }\n    };\n    /**\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n     * @private\n     */\n    WriteTree.prototype.resetTree_ = function () {\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\n        if (this.allWrites_.length > 0) {\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n        }\n        else {\n            this.lastWriteId_ = -1;\n        }\n    };\n    /**\n     * The default filter used when constructing the tree. Keep everything that's visible.\n     *\n     * @param {!WriteRecord} write\n     * @return {boolean}\n     * @private\n     */\n    WriteTree.DefaultFilter_ = function (write) {\n        return write.visible;\n    };\n    /**\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n     * event data at that path.\n     *\n     * @param {!Array.<!WriteRecord>} writes\n     * @param {!function(!WriteRecord):boolean} filter\n     * @param {!Path} treeRoot\n     * @return {!CompoundWrite}\n     * @private\n     */\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\n        var compoundWrite = CompoundWrite.Empty;\n        for (var i = 0; i < writes.length; ++i) {\n            var write = writes[i];\n            // Theory, a later set will either:\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n            if (filter(write)) {\n                var writePath = write.path;\n                var relativePath = void 0;\n                if (write.snap) {\n                    if (treeRoot.contains(writePath)) {\n                        relativePath = Path.relativePath(treeRoot, writePath);\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n                    }\n                    else if (writePath.contains(treeRoot)) {\n                        relativePath = Path.relativePath(writePath, treeRoot);\n                        compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\n                    }\n                    else {\n                        // There is no overlap between root path and write path, ignore write\n                    }\n                }\n                else if (write.children) {\n                    if (treeRoot.contains(writePath)) {\n                        relativePath = Path.relativePath(treeRoot, writePath);\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\n                    }\n                    else if (writePath.contains(treeRoot)) {\n                        relativePath = Path.relativePath(writePath, treeRoot);\n                        if (relativePath.isEmpty()) {\n                            compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\n                        }\n                        else {\n                            var child = safeGet(write.children, relativePath.getFront());\n                            if (child) {\n                                // There exists a child in this node that matches the root path\n                                var deepNode = child.getChild(relativePath.popFront());\n                                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n                            }\n                        }\n                    }\n                    else {\n                        // There is no overlap between root path and write path, ignore write\n                    }\n                }\n                else {\n                    throw assertionError('WriteRecord should have .snap or .children');\n                }\n            }\n        }\n        return compoundWrite;\n    };\n    return WriteTree;\n}());\nexport { WriteTree };\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nvar WriteTreeRef = (function () {\n    /**\n     * @param {!Path} path\n     * @param {!WriteTree} writeTree\n     */\n    function WriteTreeRef(path, writeTree) {\n        this.treePath_ = path;\n        this.writeTree_ = writeTree;\n    }\n    /**\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n     * can lead to a more expensive calculation.\n     *\n     * @param {?Node} completeServerCache\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n    };\n    /**\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n     * mix of the given server data and write data.\n     *\n     * @param {?ChildrenNode} completeServerChildren\n     * @return {!ChildrenNode}\n     */\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\n    };\n    /**\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n     * if anything, needs to be applied to the event cache.\n     *\n     * Possibilities:\n     *\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n     *\n     * 2. Some write is completely shadowing. No events to be raised\n     *\n     * 3. Is partially shadowed. Events should be raised\n     *\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n     *\n     * @param {!Path} path\n     * @param {?Node} existingEventSnap\n     * @param {?Node} existingServerSnap\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\n    };\n    /**\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n     * a higher path, this will return the child of that write relative to the write and this path.\n     * Returns null if there is no write at this path.\n     *\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n    };\n    /**\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n     * the window, but may now be in the window\n     *\n     * @param {?Node} completeServerData\n     * @param {!NamedNode} startPost\n     * @param {!number} count\n     * @param {boolean} reverse\n     * @param {!Index} index\n     * @return {!Array.<!NamedNode>}\n     */\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\n    };\n    /**\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\n     * complete child for this ChildKey.\n     *\n     * @param {!string} childKey\n     * @param {!CacheNode} existingServerCache\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\n    };\n    /**\n     * Return a WriteTreeRef for a child.\n     *\n     * @param {string} childName\n     * @return {!WriteTreeRef}\n     */\n    WriteTreeRef.prototype.child = function (childName) {\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n    };\n    return WriteTreeRef;\n}());\nexport { WriteTreeRef };\n\n\n"]}