{"version":3,"sources":["database/src/database/core/operation/Merge.ts","database/core/operation/Merge.js"],"names":["Merge","source","path","children","type","MERGE","prototype","operationForChild","childName","isEmpty","childTree","subtree","value","Empty","getFront","popFront","toString"],"mappings":";;;;;;;AAgBA;;AACA;;AACA;;AACA;;AAIA;;;;;;;AAvBA;;;;;;;;;;;;;;;AA8BA,IAAAA,QAAA,YAAA;AAIE,aAAAA,KAAA,EAAY,iBAAyBC,MAArC;AACY,qBAAyBC,IADrC;AAEY,qBAAyBC,QAFrC,EAEkE;AAF7B,aAAAF,MAAA,GAAAA,MAAA;AACA,aAAAC,IAAA,GAAAA,IAAA;AACA,aAAAC,QAAA,GAAAA,QAAA;AALrC;AACA,aAAAC,IAAA,GAAO,yBAAcC,KAArB;AAKC;AAED;;;AAGAL,UAAAM,SAAA,CAAAC,iBAAA,GAAA,UAAkBC,SAAlB,EAAmC;AACjC,YAAI,KAAKN,IAAL,CAAUO,OAAV,EAAJ,EAAyB;AACvB,gBAAMC,YAAY,KAAKP,QAAL,CAAcQ,OAAd,CAAsB,eAASH,SAAT,CAAtB,CAAlB;AACA,gBAAIE,UAAUD,OAAV,EAAJ,EAAyB;AACvB;AACA,uBAAO,IAAP;AACD,aAHD,MAGO,IAAIC,UAAUE,KAAd,EAAqB;AAC1B;AACA,uBAAO,yBAAc,KAAKX,MAAnB,EAA2B,WAAKY,KAAhC,EAAuCH,UAAUE,KAAjD,CAAP;AACD,aAHM,MAGA;AACL;AACA,uBAAO,IAAIZ,KAAJ,CAAU,KAAKC,MAAf,EAAuB,WAAKY,KAA5B,EAAmCH,SAAnC,CAAP;AACD;AACF,SAZD,MAYO;AACL,gCAAO,KAAKR,IAAL,CAAUY,QAAV,OAAyBN,SAAhC,EACE,iEADF;AAEA,mBAAO,IAAIR,KAAJ,CAAU,KAAKC,MAAf,EAAuB,KAAKC,IAAL,CAAUa,QAAV,EAAvB,EAA6C,KAAKZ,QAAlD,CAAP;AACD;AACF,KAlBD;AAoBA;;;AAGAH,UAAAM,SAAA,CAAAU,QAAA,GAAA,YAAA;AACE,eAAO,eAAe,KAAKd,IAApB,GAA2B,IAA3B,GAAkC,KAAKD,MAAL,CAAYe,QAAZ,EAAlC,GAA2D,UAA3D,GAAwE,KAAKb,QAAL,CAAca,QAAd,EAAxE,GAAmG,GAA1G;AACD,KAFD;AAGF,WAAAhB,KAAA;AAtCA,CAAA,EAAA;QCsCSA,K,GAAAA,K","file":"Merge.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from \"./Overwrite\";\nimport { Path } from \"../util/Path\";\nimport { assert } from \"../../../utils/assert\";\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(/**@inheritDoc */ public source: OperationSource,\n              /**@inheritDoc */ public path: Path,\n              /**@inheritDoc */ public children: ImmutableTree<Node>) {\n  }\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): Operation {\n    if (this.path.isEmpty()) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      assert(this.path.getFront() === childName,\n        'Can\\'t get a merge for a child not on the path of the operation');\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  }\n}","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { OperationType } from './Operation';\nimport { Overwrite } from \"./Overwrite\";\nimport { Path } from \"../util/Path\";\nimport { assert } from \"../../../utils/assert\";\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nvar Merge = (function () {\n    function Merge(/**@inheritDoc */ source, \n        /**@inheritDoc */ path, \n        /**@inheritDoc */ children) {\n        this.source = source;\n        this.path = path;\n        this.children = children;\n        /** @inheritDoc */\n        this.type = OperationType.MERGE;\n    }\n    /**\n     * @inheritDoc\n     */\n    Merge.prototype.operationForChild = function (childName) {\n        if (this.path.isEmpty()) {\n            var childTree = this.children.subtree(new Path(childName));\n            if (childTree.isEmpty()) {\n                // This child is unaffected\n                return null;\n            }\n            else if (childTree.value) {\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n                return new Overwrite(this.source, Path.Empty, childTree.value);\n            }\n            else {\n                // This is a merge at a deeper level\n                return new Merge(this.source, Path.Empty, childTree);\n            }\n        }\n        else {\n            assert(this.path.getFront() === childName, 'Can\\'t get a merge for a child not on the path of the operation');\n            return new Merge(this.source, this.path.popFront(), this.children);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    Merge.prototype.toString = function () {\n        return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n    };\n    return Merge;\n}());\nexport { Merge };\n\n\n"]}