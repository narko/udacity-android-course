{"version":3,"sources":["database/src/database/core/view/Change.ts","database/core/view/Change.js"],"names":["Change","type","snapshotNode","childName","oldSnap","prevName","valueChange","snapshot","VALUE","childAddedChange","childKey","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED"],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;AAkBA;;;;;;;;;AASA,IAAAA,SAAA,YAAA;AACE,aAAAA,MAAA,CAAmBC,IAAnB,EACmBC,YADnB,EAEmBC,SAFnB,EAGmBC,OAHnB,EAImBC,QAJnB,EAIoC;AAJjB,aAAAJ,IAAA,GAAAA,IAAA;AACA,aAAAC,YAAA,GAAAA,YAAA;AACA,aAAAC,SAAA,GAAAA,SAAA;AACA,aAAAC,OAAA,GAAAA,OAAA;AACA,aAAAC,QAAA,GAAAA,QAAA;AAClB;AAAA;AAED;;;;AAIOL,WAAAM,WAAA,GAAP,UAAmBC,QAAnB,EAAiC;AAC/B,eAAO,IAAIP,MAAJ,CAAWA,OAAOQ,KAAlB,EAAyBD,QAAzB,CAAP;AACD,KAFM;AAEN;AAED;;;;;AAKOP,WAAAS,gBAAA,GAAP,UAAwBC,QAAxB,EAA0CH,QAA1C,EAAwD;AACtD,eAAO,IAAIP,MAAJ,CAAWA,OAAOW,WAAlB,EAA+BJ,QAA/B,EAAyCG,QAAzC,CAAP;AACD,KAFM;AAEN;AAED;;;;;AAKOV,WAAAY,kBAAA,GAAP,UAA0BF,QAA1B,EAA4CH,QAA5C,EAA0D;AACxD,eAAO,IAAIP,MAAJ,CAAWA,OAAOa,aAAlB,EAAiCN,QAAjC,EAA2CG,QAA3C,CAAP;AACD,KAFM;AAEN;AAED;;;;;;AAMOV,WAAAc,kBAAA,GAAP,UAA0BJ,QAA1B,EAA4CK,WAA5C,EAA+DC,WAA/D,EAAgF;AAC9E,eAAO,IAAIhB,MAAJ,CAAWA,OAAOiB,aAAlB,EAAiCF,WAAjC,EAA8CL,QAA9C,EAAwDM,WAAxD,CAAP;AACD,KAFM;AAEN;AAED;;;;;AAKOhB,WAAAkB,gBAAA,GAAP,UAAwBR,QAAxB,EAA0CH,QAA1C,EAAwD;AACtD,eAAO,IAAIP,MAAJ,CAAWA,OAAOmB,WAAlB,EAA+BZ,QAA/B,EAAyCG,QAAzC,CAAP;AACD,KAFM;AAEN;AAiBH,WAAAV,MAAA;AApEA,CAAA,EAAA;QCqDSA,M,GAAAA,M;ADAP;AACA;;AACOA,OAAAW,WAAA,GAAc,aAAd;AAEP;AACOX,OAAAa,aAAA,GAAgB,eAAhB;AAEP;AACOb,OAAAiB,aAAA,GAAgB,eAAhB;AAEP;AACOjB,OAAAmB,WAAA,GAAc,aAAd;AAEP;AACOnB,OAAAQ,KAAA,GAAQ,OAAR","file":"Change.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(public type: string,\n              public snapshotNode: Node,\n              public childName?: string,\n              public oldSnap?: Node,\n              public prevName?: string) {\n  };\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  };\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  };\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  };\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(childKey: string, newSnapshot: Node, oldSnapshot: Node): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  };\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  };\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nvar Change = (function () {\n    function Change(type, snapshotNode, childName, oldSnap, prevName) {\n        this.type = type;\n        this.snapshotNode = snapshotNode;\n        this.childName = childName;\n        this.oldSnap = oldSnap;\n        this.prevName = prevName;\n    }\n    ;\n    /**\n     * @param {!Node} snapshot\n     * @return {!Change}\n     */\n    Change.valueChange = function (snapshot) {\n        return new Change(Change.VALUE, snapshot);\n    };\n    ;\n    /**\n     * @param {string} childKey\n     * @param {!Node} snapshot\n     * @return {!Change}\n     */\n    Change.childAddedChange = function (childKey, snapshot) {\n        return new Change(Change.CHILD_ADDED, snapshot, childKey);\n    };\n    ;\n    /**\n     * @param {string} childKey\n     * @param {!Node} snapshot\n     * @return {!Change}\n     */\n    Change.childRemovedChange = function (childKey, snapshot) {\n        return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n    };\n    ;\n    /**\n     * @param {string} childKey\n     * @param {!Node} newSnapshot\n     * @param {!Node} oldSnapshot\n     * @return {!Change}\n     */\n    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\n        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n    };\n    ;\n    /**\n     * @param {string} childKey\n     * @param {!Node} snapshot\n     * @return {!Change}\n     */\n    Change.childMovedChange = function (childKey, snapshot) {\n        return new Change(Change.CHILD_MOVED, snapshot, childKey);\n    };\n    ;\n    return Change;\n}());\nexport { Change };\n//event types\n/** Event type for a child added */\nChange.CHILD_ADDED = 'child_added';\n/** Event type for a child removed */\nChange.CHILD_REMOVED = 'child_removed';\n/** Event type for a child changed */\nChange.CHILD_CHANGED = 'child_changed';\n/** Event type for a child moved */\nChange.CHILD_MOVED = 'child_moved';\n/** Event type for a value change */\nChange.VALUE = 'value';\n\n\n"]}