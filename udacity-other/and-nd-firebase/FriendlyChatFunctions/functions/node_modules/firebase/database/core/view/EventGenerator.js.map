{"version":3,"sources":["database/src/database/core/view/EventGenerator.ts","database/core/view/EventGenerator.js"],"names":["EventGenerator","query_","index_","getQueryParams","getIndex","prototype","generateEventsForChanges","changes","eventCache","eventRegistrations","_this","events","moves","forEach","change","type","CHILD_CHANGED","indexedValueChanged","oldSnap","snapshotNode","push","childMovedChange","childName","generateEventsForType_","CHILD_REMOVED","CHILD_ADDED","CHILD_MOVED","VALUE","eventType","registrations","filteredChanges","filter","sort","compareChanges_","bind","materializedChange","materializeSingleChange_","registration","respondsTo","createEvent","prevName","getPredecessorChildName","a","b","aWrapped","bWrapped","compare"],"mappings":"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","file":"EventGenerator.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change } from './Change';\nimport { assertionError } from '../../../utils/assert';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nexport class EventGenerator {\n  private index_: Index;\n\n  /**\n   *\n   * @param {!Query} query_\n   */\n  constructor(private query_: Query) {\n    /**\n     * @private\n     * @type {!Index}\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges(changes: Change[], eventCache: Node, eventRegistrations: EventRegistration[]): Event[] {\n    const events: Event[] = [];\n    const moves: Change[] = [];\n\n    changes.forEach((change) => {\n      if (change.type === Change.CHILD_CHANGED &&\n        this.index_.indexedValueChanged(change.oldSnap as Node, change.snapshotNode)) {\n        moves.push(Change.childMovedChange(change.childName as string, change.snapshotNode));\n      }\n    });\n\n    this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\n\n    return events;\n  }\n\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n  private generateEventsForType_(events: Event[], eventType: string, changes: Change[],\n                                 registrations: EventRegistration[], eventCache: Node) {\n    const filteredChanges = changes.filter((change) => change.type === eventType);\n\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach((change) => {\n      const materializedChange = this.materializeSingleChange_(change, eventCache);\n      registrations.forEach((registration) => {\n        if (registration.respondsTo(change.type)) {\n          events.push(registration.createEvent(materializedChange, this.query_));\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n  private materializeSingleChange_(change: Change, eventCache: Node): Change {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(/** @type {!string} */ (change.childName), change.snapshotNode,\n        this.index_);\n      return change;\n    }\n  }\n\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n  private compareChanges_(a: Change, b: Change) {\n    if (a.childName == null || b.childName == null) {\n      throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { NamedNode } from '../snap/Node';\nimport { Change } from './Change';\nimport { assertionError } from '../../../utils/assert';\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nvar EventGenerator = (function () {\n    /**\n     *\n     * @param {!Query} query_\n     */\n    function EventGenerator(query_) {\n        this.query_ = query_;\n        /**\n         * @private\n         * @type {!Index}\n         */\n        this.index_ = this.query_.getQueryParams().getIndex();\n    }\n    /**\n     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n     *\n     * Notes:\n     *  - child_moved events will be synthesized at this time for any child_changed events that affect\n     *    our index.\n     *  - prevName will be calculated based on the index ordering.\n     *\n     * @param {!Array.<!Change>} changes\n     * @param {!Node} eventCache\n     * @param {!Array.<!EventRegistration>} eventRegistrations\n     * @return {!Array.<!Event>}\n     */\n    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\n        var _this = this;\n        var events = [];\n        var moves = [];\n        changes.forEach(function (change) {\n            if (change.type === Change.CHILD_CHANGED &&\n                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n                moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\n            }\n        });\n        this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\n        this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\n        this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\n        this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\n        this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\n        return events;\n    };\n    /**\n     * Given changes of a single change type, generate the corresponding events.\n     *\n     * @param {!Array.<!Event>} events\n     * @param {!string} eventType\n     * @param {!Array.<!Change>} changes\n     * @param {!Array.<!EventRegistration>} registrations\n     * @param {!Node} eventCache\n     * @private\n     */\n    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\n        var _this = this;\n        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });\n        filteredChanges.sort(this.compareChanges_.bind(this));\n        filteredChanges.forEach(function (change) {\n            var materializedChange = _this.materializeSingleChange_(change, eventCache);\n            registrations.forEach(function (registration) {\n                if (registration.respondsTo(change.type)) {\n                    events.push(registration.createEvent(materializedChange, _this.query_));\n                }\n            });\n        });\n    };\n    /**\n     * @param {!Change} change\n     * @param {!Node} eventCache\n     * @return {!Change}\n     * @private\n     */\n    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\n        if (change.type === 'value' || change.type === 'child_removed') {\n            return change;\n        }\n        else {\n            change.prevName = eventCache.getPredecessorChildName(/** @type {!string} */ (change.childName), change.snapshotNode, this.index_);\n            return change;\n        }\n    };\n    /**\n     * @param {!Change} a\n     * @param {!Change} b\n     * @return {number}\n     * @private\n     */\n    EventGenerator.prototype.compareChanges_ = function (a, b) {\n        if (a.childName == null || b.childName == null) {\n            throw assertionError('Should only compare child_ events.');\n        }\n        var aWrapped = new NamedNode(a.childName, a.snapshotNode);\n        var bWrapped = new NamedNode(b.childName, b.snapshotNode);\n        return this.index_.compare(aWrapped, bWrapped);\n    };\n    return EventGenerator;\n}());\nexport { EventGenerator };\n\n\n"]}