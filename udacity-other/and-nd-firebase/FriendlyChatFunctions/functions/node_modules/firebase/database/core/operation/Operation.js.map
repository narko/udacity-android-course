{"version":3,"sources":["database/src/database/core/operation/Operation.ts","database/core/operation/Operation.js"],"names":["OperationType","OperationSource","fromUser","fromServer","queryId","tagged","User","Server","forServerTaggedQuery"],"mappings":";;;;;;;AAgBA;;AAGA;;;;AAIA,IAAYA,iDAAZ,C,CAvBA;;;;;;;;;;;;;;;;AAuBA,CAAA,UAAYA,aAAZ,EAAyB;AACvBA,gBAAAA,cAAA,WAAA,IAAA,CAAA,IAAA,WAAA;AACAA,gBAAAA,cAAA,OAAA,IAAA,CAAA,IAAA,OAAA;AACAA,gBAAAA,cAAA,gBAAA,IAAA,CAAA,IAAA,gBAAA;AACAA,gBAAAA,cAAA,iBAAA,IAAA,CAAA,IAAA,iBAAA;AACD,CALD,EAAYA,0BAAAA,aAAA,GAAAA,gBAAa,EAAb,CAAZ;AAiCA;;;;;;;AAOA,IAAAC,kBAAA,YAAA;AACE,WAAAA,eAAA,CAAmBC,QAAnB,EACmBC,UADnB,EAEmBC,OAFnB,EAGmBC,MAHnB,EAGkC;AAHf,SAAAH,QAAA,GAAAA,QAAA;AACA,SAAAC,UAAA,GAAAA,UAAA;AACA,SAAAC,OAAA,GAAAA,OAAA;AACA,SAAAC,MAAA,GAAAA,MAAA;AACjB,wBAAO,CAACA,MAAD,IAAWF,UAAlB,EAA8B,qCAA9B;AACD;AAoBH,SAAAF,eAAA;AA1BA,CAAA,EAAA;QCnBSA,e,GAAAA,e;AD0BP;;;;;AAIOA,gBAAAK,IAAA,GAAO,IAAIL,eAAJ,EAAoB,aAAa,IAAjC,EAAuC,KAAvC,EAA8C,IAA9C,EAAoD,WAAW,KAA/D,CAAP;AAEP;;;;AAIOA,gBAAAM,MAAA,GAAS,IAAIN,eAAJ,CAAoB,KAApB,EAA2B,eAAe,IAA1C,EAAgD,IAAhD,EAAsD,WAAW,KAAjE,CAAT;AAEP;;;;AAIOA,gBAAAO,oBAAA,GAAuB,UAASJ,OAAT,EAAwB;AACpD,SAAO,IAAIH,eAAJ,CAAoB,KAApB,EAA2B,eAAe,IAA1C,EAAgDG,OAAhD,EAAyD,WAAW,IAApE,CAAP;AACD,CAFM","file":"Operation.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from \"../../../utils/assert\";\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  /**\n   * @type {!OperationSource}\n   */\n  source: OperationSource;\n\n  /**\n   * @type {!OperationType}\n   */\n  type: OperationType;\n\n  /**\n   * @type {!Path}\n   */\n  path: Path;\n\n  /**\n   * @param {string} childName\n   * @return {?Operation}\n   */\n  operationForChild(childName: string): Operation | null;\n}\n\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nexport class OperationSource {\n  constructor(public fromUser: boolean,\n              public fromServer: boolean,\n              public queryId: string | null,\n              public tagged: boolean) {\n    assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static User = new OperationSource(/*fromUser=*/true, false, null, /*tagged=*/false);\n\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static Server = new OperationSource(false, /*fromServer=*/true, null, /*tagged=*/false);\n\n  /**\n   * @param {string} queryId\n   * @return {!OperationSource}\n   */\n  static forServerTaggedQuery = function(queryId: string): OperationSource {\n    return new OperationSource(false, /*fromServer=*/true, queryId, /*tagged=*/true);\n  };\n}","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { assert } from \"../../../utils/assert\";\n/**\n *\n * @enum\n */\nexport var OperationType;\n(function (OperationType) {\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nvar OperationSource = (function () {\n    function OperationSource(fromUser, fromServer, queryId, tagged) {\n        this.fromUser = fromUser;\n        this.fromServer = fromServer;\n        this.queryId = queryId;\n        this.tagged = tagged;\n        assert(!tagged || fromServer, 'Tagged queries must be from server.');\n    }\n    return OperationSource;\n}());\nexport { OperationSource };\n/**\n * @const\n * @type {!OperationSource}\n */\nOperationSource.User = new OperationSource(/*fromUser=*/ true, false, null, /*tagged=*/ false);\n/**\n * @const\n * @type {!OperationSource}\n */\nOperationSource.Server = new OperationSource(false, /*fromServer=*/ true, null, /*tagged=*/ false);\n/**\n * @param {string} queryId\n * @return {!OperationSource}\n */\nOperationSource.forServerTaggedQuery = function (queryId) {\n    return new OperationSource(false, /*fromServer=*/ true, queryId, /*tagged=*/ true);\n};\n\n\n"]}