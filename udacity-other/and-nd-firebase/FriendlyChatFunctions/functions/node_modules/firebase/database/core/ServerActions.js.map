{"version":3,"sources":["src/database/core/ServerActions.ts","database/core/ServerActions.js"],"names":["ServerActions","prototype","put","pathString","data","onComplete","hash","merge","refreshAuthToken","token","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats"],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;AAkBA;;;;;;AAMA,IAAAA,gBAAA,YAAA;AAAA,WAAAA,aAAA,GAAA,CAkEC;AA/CC;;;;;;AAMAA,gBAAAC,SAAA,CAAAC,GAAA,GAAA,UAAIC,UAAJ,EAAwBC,IAAxB,EAAmCC,UAAnC,EAAgFC,IAAhF,EAA6F,CAAK,CAAlG;AAEA;;;;;;AAMAN,gBAAAC,SAAA,CAAAM,KAAA,GAAA,UAAMJ,UAAN,EAA0BC,IAA1B,EAAqCC,UAArC,EAAwFC,IAAxF,EAAqG,CAAK,CAA1G;AAEA;;;;AAIAN,gBAAAC,SAAA,CAAAO,gBAAA,GAAA,UAAiBC,KAAjB,EAA8B,CAAK,CAAnC;AAEA;;;;;AAKAT,gBAAAC,SAAA,CAAAS,eAAA,GAAA,UAAgBP,UAAhB,EAAoCC,IAApC,EAA+CC,UAA/C,EAA0F,CAAK,CAA/F;AAEA;;;;;AAKAL,gBAAAC,SAAA,CAAAU,iBAAA,GAAA,UAAkBR,UAAlB,EAAsCC,IAAtC,EAAiDC,UAAjD,EAA4F,CAAK,CAAjG;AAEA;;;;AAIAL,gBAAAC,SAAA,CAAAW,kBAAA,GAAA,UAAmBT,UAAnB,EAAuCE,UAAvC,EAAkF,CAAK,CAAvF;AAEA;;;AAGAL,gBAAAC,SAAA,CAAAY,WAAA,GAAA,UAAYC,KAAZ,EAAuC,CAAK,CAA5C;AAEF,SAAAd,aAAA;AAlEA,CAAA,EAAA;QC0CSA,a,GAAAA,a","file":"ServerActions.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Query } from '../api/Query';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n\n  /**\n   * @param {!Query} query\n   * @param {function():string} currentHashFn\n   * @param {?number} tag\n   * @param {function(string, *)} onComplete\n   */\n  abstract listen(query: Query, currentHashFn: () => string, tag: number | null,\n                  onComplete: (a: string, b: any) => void): void;\n\n  /**\n   * Remove a listen.\n   *\n   * @param {!Query} query\n   * @param {?number} tag\n   */\n  abstract unlisten(query: Query, tag: number | null): void;\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   * @param {string=} hash\n   */\n  put(pathString: string, data: any, onComplete?: (a: string, b: string) => void, hash?: string) { }\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, ?string)} onComplete\n   * @param {string=} hash\n   */\n  merge(pathString: string, data: any, onComplete: (a: string, b: string | null) => void, hash?: string) { }\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param {string} token The authentication token\n   */\n  refreshAuthToken(token: string) { }\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectPut(pathString: string, data: any, onComplete?: (a: string, b: string) => void) { }\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectMerge(pathString: string, data: any, onComplete?: (a: string, b: string) => void) { }\n\n  /**\n   * @param {string} pathString\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectCancel(pathString: string, onComplete?: (a: string, b: string) => void) { }\n\n  /**\n   * @param {Object.<string, *>} stats\n   */\n  reportStats(stats: { [k: string]: any }) { }\n\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nvar ServerActions = (function () {\n    function ServerActions() {\n    }\n    /**\n     * @param {string} pathString\n     * @param {*} data\n     * @param {function(string, string)=} onComplete\n     * @param {string=} hash\n     */\n    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };\n    /**\n     * @param {string} pathString\n     * @param {*} data\n     * @param {function(string, ?string)} onComplete\n     * @param {string=} hash\n     */\n    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };\n    /**\n     * Refreshes the auth token for the current connection.\n     * @param {string} token The authentication token\n     */\n    ServerActions.prototype.refreshAuthToken = function (token) { };\n    /**\n     * @param {string} pathString\n     * @param {*} data\n     * @param {function(string, string)=} onComplete\n     */\n    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };\n    /**\n     * @param {string} pathString\n     * @param {*} data\n     * @param {function(string, string)=} onComplete\n     */\n    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };\n    /**\n     * @param {string} pathString\n     * @param {function(string, string)=} onComplete\n     */\n    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };\n    /**\n     * @param {Object.<string, *>} stats\n     */\n    ServerActions.prototype.reportStats = function (stats) { };\n    return ServerActions;\n}());\nexport { ServerActions };\n\n\n"]}