{"version":3,"sources":["src/database/api/test_access.ts"],"names":["DataConnection","prototype","simpleListen","pathString","onComplete","sendRequest","echo","data","onEcho","RealTimeConnection","hijackHash","newHash","oldPut","put","opt_onComplete","opt_hash","undefined","call","ConnectionTarget","queryIdentifier","query","listens","firebaseRef","repo","persistentConnection_","listens_","forceRestClient","getInstance"],"mappings":";;;;;;;AAgBA;;AACA;;AACA;;AACA;;AAnBA;;;;;;;;;;;;;;;AAsBO,IAAMA,oFAAN;AAEP;;;;AAIC,2CAAqBC,SAArB,CAAuCC,YAAvC,GAAsD,UAASC,UAAT,EAA6BC,UAA7B,EAAyD;AAC9G,SAAKC,WAAL,CAAiB,GAAjB,EAAsB,EAAC,KAAKF,UAAN,EAAtB,EAAyCC,UAAzC;AACD,CAFA;AAID;;;;AAIC,2CAAqBH,SAArB,CAAuCK,IAAvC,GAA8C,UAASC,IAAT,EAAoBC,MAApB,EAA4C;AACzF,SAAKH,WAAL,CAAiB,MAAjB,EAAyB,EAAC,KAAKE,IAAN,EAAzB,EAAsCC,MAAtC;AACD,CAFA;AAID;AACO,IAAMC,wEAAN;AAEP;;;;AAIO,IAAMC,kCAAa,SAAbA,UAAa,CAASC,OAAT,EAA8B;AACtD,QAAMC,SAAS,2CAAqBX,SAArB,CAA+BY,GAA9C;AACA,+CAAqBZ,SAArB,CAA+BY,GAA/B,GAAqC,UAASV,UAAT,EAAqBI,IAArB,EAA2BO,cAA3B,EAA2CC,QAA3C,EAAmD;AACtF,YAAIA,aAAaC,SAAjB,EAA4B;AAC1BD,uBAAWJ,SAAX;AACD;AACDC,eAAOK,IAAP,CAAY,IAAZ,EAAkBd,UAAlB,EAA8BI,IAA9B,EAAoCO,cAApC,EAAoDC,QAApD;AACD,KALD;AAMA,WAAO,YAAA;AACL,mDAAqBd,SAArB,CAA+BY,GAA/B,GAAqCD,MAArC;AACD,KAFD;AAGD,CAXM;AAaP;;;AAGO,IAAMM,gEAAN;AAEP;;;;AAIO,IAAMC,4CAAkB,SAAlBA,eAAkB,CAASC,KAAT,EAAqB;AAClD,WAAOA,MAAMD,eAAN,EAAP;AACD,CAFM;AAIP;;;;AAIO,IAAME,4BAAU,SAAVA,OAAU,CAASC,WAAT,EAA2B;AAChD,WAAQA,YAAYC,IAAZ,CAAiBC,qBAAjB,CAA+CC,QAAvD;AACD,CAFM;AAIP;;;;;AAKO,IAAMC,4CAAkB,yBAASA,gBAAT,EAAiC;AAC9D,6BAAYC,WAAZ,GAA0BD,eAA1B,CAA0CA,gBAA1C;AACD,CAFM","file":"test_access.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { RepoInfo } from \"../core/RepoInfo\";\nimport { PersistentConnection } from \"../core/PersistentConnection\";\nimport { RepoManager } from \"../core/RepoManager\";\nimport { Connection } from \"../realtime/Connection\";\nimport { Query } from './Query';\n\nexport const DataConnection = PersistentConnection;\n\n/**\n * @param {!string} pathString\n * @param {function(*)} onComplete\n */\n(PersistentConnection.prototype as any).simpleListen = function(pathString: string, onComplete: (a: any) => void) {\n  this.sendRequest('q', {'p': pathString}, onComplete);\n};\n\n/**\n * @param {*} data\n * @param {function(*)} onEcho\n */\n(PersistentConnection.prototype as any).echo = function(data: any, onEcho: (a: any) => void) {\n  this.sendRequest('echo', {'d': data}, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @param {function(): string} newHash\n * @return {function()}\n */\nexport const hijackHash = function(newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function(pathString, data, opt_onComplete, opt_hash) {\n    if (opt_hash !== undefined) {\n      opt_hash = newHash();\n    }\n    oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\n  };\n  return function() {\n    PersistentConnection.prototype.put = oldPut;\n  }\n};\n\n/**\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\n */\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * @param {!Query} query\n * @return {!string}\n */\nexport const queryIdentifier = function(query: Query) {\n  return query.queryIdentifier();\n};\n\n/**\n * @param {!Query} firebaseRef\n * @return {!Object}\n */\nexport const listens = function(firebaseRef: Query) {\n  return (firebaseRef.repo.persistentConnection_ as any).listens_;\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n *\n * @param {boolean} forceRestClient\n */\nexport const forceRestClient = function(forceRestClient: boolean) {\n  RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n"]}